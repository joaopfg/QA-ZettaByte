context,question,sentences,sent_emb,quest_emb,cosine_sim,pred_idx_cos
"17MA
NI
PUL
ATING
 IMAGE
SIf you have a digital camera or even if 
you
 just upload photos from your phone 
to
 Facebook, you probably cross paths with 
digital image ˜les all the time. You may know 
how to use basic graphics software, such as Microsoft 
Paint or Paintbrush, or even more advanced applica
-tions such as Adobe Photoshop. But if you need to 
edit a massive number of images, editing them by 
hand can be a lengthy, boring job.
Enter Python. Pillow is a third-party Python module for interacting 
with image ˜les. The module has several functions that make it easy to 
crop, resize, and edit the content of an image. With the power to manipu
-late images the same way you would with software such as Microsoft Paint 
or Adobe Photoshop, Python can automatically edit hundreds or thousands 
of images with ease.
 388
   Chapter 17
Computer 
Ima
ge 
Fun
damentals
In order to manipulate an image, you need to understand the basics of how 
computers deal with colors and coordinates in images and how you can 
work with colors and coordinates in Pillow. But before you continue, install 
the 
pillow module. See Appendix A for help installing third-party modules.
Colors and RGBA Values
Computer programs often represent a color in an image as an 
RGBA value
. An RGBA value is a group of numbers that specify the amount of red, green, 
blue, and 
alpha
 (or transparency) in a color. Each of these component values 
is an integer from 
0 (none at all) to 
255 (the maximum). These RGBA values 
are assigned to individual 
pixel
s; a pixel is the smallest dot of a single color 
the computer screen can show (as you can imagine, there are millions of 
pixels on a screen). A pixel™s RGB setting tells it precisely what shade of 
color it should display. Images also have an alpha value to create RGBA 
values. If an image is displayed on the screen over a background image 
or desktop wallpaper, the alpha value determines how much of the back-
ground you can ﬁsee throughﬂ the image™s pixel.
In Pillow, RGBA values are represented by a tuple of four integer values. 
For example, the color red is represented by 
(255, 0, 0, 255). This color has 
the maximum amount of red, no green or blue, and the maximum alpha 
value, meaning it is fully opaque. Green is represented by 
(0, 255, 0, 255), and blue is 
(0, 0, 255, 255). White, the combination of all colors, is 
(255, 255, 255, 255), while black, which has no color at all, is 
(0, 0, 0, 255).If a color has an alpha value of 
0, it is invisible, and it doesn™t really mat-
ter what the RGB values are. After all, invisible red looks the same as invis-
ible black. 
Pillow uses the standard color names that HTML uses. Table 17-1 lists a 
selection of standard color names and their values.
Table 17-1: 
Standard Color Names and Their RGBA Values
Name
RG
BA v
alue
Name
RG
BA v
alue
White
(255, 255, 255, 255)Red
(255, 0, 0, 255)Green
(0, 128, 0, 255)Blue
(0, 0, 255, 255)Gray
(128, 128, 128, 255)Yellow
(255, 255, 0, 255)Black
(0, 0, 0, 255)Purple
(128, 0, 128, 255)Pillow offers the 
ImageColor.getcolor() function so you don™t have to 
memorize RGBA values for the colors you want to use. This function takes 
a color name string as its ˜rst argument, and the string 
'RGBA' as its second 
argument, and it returns an RGBA tuple. 
 Manipulating Images
   389
To see how this function works, enter the following into the interactive 
shell:
 >>> from PIL import ImageColor >>> ImageColor.getcolor('red', 'RGBA')(255, 0, 0, 255) >>> ImageColor.getcolor('RED', 'RGBA')(255, 0, 0, 255)>>> ImageColor.getcolor('Black', 'RGBA')(0, 0, 0, 255)>>> ImageColor.getcolor('chocolate', 'RGBA')(210, 105, 30, 255)>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')(100, 149, 237, 255)First, you need to import the 
ImageColor module from PIL 
 (not 
from
 Pillow; you™ll see why in a moment). The color name string you pass 
to
 ImageColor.getcolor() is case insensitive, so passing 
'red'  and passing 
'RED'  give you the same RGBA tuple. You can also pass more unusual 
color names, like 
'chocolate' and 
'Cornflower Blue'.Pillow supports a huge number of color names, from 
'aliceblue' to 
'whitesmoke'. You can ˜nd the full list of more than 100 standard color 
names in the resources at 
http://nostarch.com/automatestuff/
. Coordinates and Box Tuples
Image pixels are addressed with x- and y-coordinates, which respectively 
specify a pixel™s horizontal and vertical location in an image. The 
origin
 is 
the pixel at the top-left corner of the image and is speci˜ed with the nota-
tion (0, 0). The ˜rst zero represents the x-coordinate, which starts at zero 
at the origin and increases going from left to right. The second zero repre-
sents the y-coordinate, which starts at zero at the origin and increases going 
CMYK
 AND RGB COL
ORING
In grade school you learned that mixing red, yellow, and blue paints can 
form other colors; for example, you can mix blue and yellow to make green 
paint
. This is known as the 
subtractive color model
, and it applies to dyes, inks, 
and pigments
. This is why color printers have 
CMYK
 ink cartridges: the 
Cyan
 (blue), 
Magenta
 (red), 
Yellow
, and 
blacK
 ink can be mixed together to form any 
color
.Ho
wever, the physics of light uses what™s called an 
additive color model
. Wh
en combining light (such as the light given off by your computer screen), 
red, green, and blue light can be combined to form any other color
. This is why 
RGB
 values represent color in computer programs
. 390
   Chapter 17
down the image. This bears repeating: 
y-coordinates increase going downward, 
which is the opposite of how you may 
remember y-coordinates being used in 
math class. Figure 17-1 demonstrates how 
this coordinate system works.
Many of Pillow™s functions and 
 me
thods take a 
box tuple
 argument. This 
means Pillow is expecting a tuple of four 
integer coordinates that represent a rect-
angular region in an image. The four 
integers are, in order, as follows:
Left
: The x-coordinate of the leftmost 
edge of the box.
Top
: The y-coordinate of the top edge 
of the box.
Right
: The x-coordinate of one pixel 
to the right of the rightmost edge of 
the box. This integer must be greater 
than the left integer.
Bottom
: The y-coordinate of one pixel 
lower than the bottom edge of the 
box. This integer must be greater 
than the top integer.
Note that the box includes the left 
and top coordinates and goes up to but 
does not include the right and bottom 
coordinates. For example, the box tuple  
(3, 1, 9, 6) represents all the pixels in 
the
 black box in Figure 17-2.
Manipulating 
Ima
ges with Pillow
Now that you know how colors and coordinates work in Pillow, let™s use 
Pillow to manipulate an image. Figure 17-3 is the image that will be used 
for all the interactive shell examples in this chapter. You can download it 
from 
http://nostarch.com/automatestuff/
.Once you have the image ˜le 
Zophie.png
 in your current working direc-
tory, you™ll be ready to load the image of Zophie into Python, like so:
>>> from PIL import Image>>> catIm = Image.open('zophie.png')Figure 17-2: 
The area represented 
by the box tuple 
(3, 1, 9, 6)x increasesy increases(0,0)(27,26)Figure 17-1: The x- and y-coordinates 
of a 27×26 image of some sort of 
ancient data storage device
 Manipulating Images
   391
Figure 17-3: My cat Zophie. The camera  
adds 10 pounds (which is a lot for a cat).
To load the image, you import the 
Image module from Pillow and call 
Image.open(), passing it the image™s ˜lename. You can then store the loaded 
image in a variable like 
CatIm. The module name of Pillow is 
PIL to make it 
backward compatible with an older module called Python Imaging Library, 
which is why you must run 
from PIL import Image instead of 
from Pillow import Image. Because of the way Pillow™s creators set up the 
pillow module, you must 
use the 
from PIL import Image form of 
import statement, rather than simply 
import PIL.If the image ˜le isn™t in the current working directory, change the 
working directory to the folder that contains the image ˜le by calling the 
os.chdir() function.
>>> import os>>> os.chdir('C:\\folder_with_image_file')The 
Image.open() function returns a value of the 
Image object data type, 
which is how Pillow represents an image as a Python value. You can load an 
Image object from an image ˜le (of any format) by passing the 
Image.open() function a string of the ˜lename. Any changes you make to the 
Image object can be saved to an image ˜le (also of any format) with the 
save() method. All the rotations, resizing, cropping, drawing, and other image 
manipulations will be done through method calls on this 
Image object.
To shorten the examples in this chapter, I™ll assume you™ve imported 
Pillow™s 
Image module and that you have the Zophie image stored in a variable 
named 
catIm. Be sure that the 
zophie.png
 ˜le is in the current working direc-
tory so that the 
Image.open() function can ˜nd it. Otherwise, you will also have 
to specify the full absolute path in the string argument to 
Image.open(). 392
   Chapter 17
Working with the Image Data Type
An 
Image object has several useful attributes that give you basic information 
about the image ˜le it was loaded from: its width and height, the ˜lename, 
and the graphics format (such as JPEG, GIF, or PNG). 
For example, enter the following into the interactive shell:
>>> from PIL import Image>>> catIm = Image.open('zophie.png')>>> catIm.size (816, 1088) >>> width, height = catIm.size >>> width816 >>> height1088>>> catIm.filename'zophie.png'>>> catIm.format'PNG'>>> catIm.format_description'Portable network graphics' >>> catIm.save('zophie.jpg')After making an 
Image object from 
Zophie.png
 and storing the 
Image object in 
catIm, we can see that the object™s 
size attribute contains a tuple 
of the image™s width and height in pixels 
. We can assign the values in the 
tuple to 
width and 
height variables 
 in order to access with width 
 and 
height 
 individually. The 
filename attribute describes the original ˜le™s 
name. The 
format and 
format_description attributes are strings that describe 
the image format of the original ˜le (with 
format_description being a bit 
more verbose).
Finally, calling the 
save() method and passing it 
'zophie.jpg' saves a new 
image with the ˜lename 
zophie.jpg
 to your hard drive 
. Pillow sees that
 the 
˜le extension is 
.jpg
 and automatically saves the image using the JPEG image 
format. Now you should have two images, 
zophie.png
 and 
zophie.jpg
, on your 
hard drive. While these ˜les are based on the same image, they are not iden
-tical because of their different formats.
Pillow also provides the 
Image.new() function, which returns an 
Image objectŠmuch like 
Image.open(), except the image represented by 
Image.new()™s 
object will be blank. The arguments to 
Image.new() are as follows:
The string 
'RGBA', which sets the color mode to RGBA. (There are other 
modes that this book doesn™t go into.)
The size, as a two-integer tuple of the new image™s width and height.
 Manipulating Images
   393
The background color that the image should start with, as a four-
integer tuple of an RGBA value. You can use the return value of 
the
 ImageColor.getcolor() function for this argument. Alternatively, 
Image.new() also supports just passing the string of the standard 
color
 name.
For example, enter the following into the interactive shell:
>>> from PIL import Image >>> im = Image.new('RGBA', (100, 200), 'purple')>>> im.save('purpleImage.png') >>> im2 = Image.new('RGBA', (20, 20))>>> im2.save('transparentImage.png')Here we create an 
Image object for an image that™s 100 pixels wide and 
200 pixels tall, with a purple background 
. This image is then saved to 
the ˜le 
purpleImage.png
. We call 
Image.new() again to create another 
Image object, this time passing (20, 20) for the dimensions and nothing for the 
background color 
. Invisible black, 
(0, 0, 0, 0), is the default color used if 
no color argument is speci˜ed, so the second image has a transparent back-
ground; we save this 20×20 transparent square in 
transparentImage.png
.Cropping Images
Cropping
 an image means selecting a rectangular region inside an image 
and removing everything outside the rectangle. The 
crop() method on 
Image objects takes a box tuple and returns an 
Image object representing 
the cropped image. The cropping does not happen in placeŠthat is, the 
original 
Image object is left untouched, and the 
crop() method returns a 
new 
Image object. Remeber that a boxed tupleŠin this case, the cropped 
se
ctionŠincludes the left column and top row of pixels but only goes up 
to
 and does 
not include the right column and bottom row of pixels.
Enter the following into the interactive shell:
>>> croppedIm = catIm.crop((335, 345, 565, 560))>>> croppedIm.save('cropped.png')This makes a new 
Image object for the cropped image, stores the 
object
 in croppedIm, and then calls 
save() on 
croppedIm to save the cropped 
image in 
cropped.png
. The new ˜le 
cropped.png
 will be created from the ori
-gi
nal image, like in Figure 17-4.
 394
   Chapter 17
     Figure 17-4: The new image will be just the cropped  
section of the original image.
Copying and Pasting Images onto Other Images
The 
copy() method will return a new 
Image object with the same image 
as the 
Image object it was called on. This is useful if you need to make 
changes to an image but also want to keep an untouched version of the 
original. For example, enter the following into the interactive shell:
>>> catIm = Image.open('zophie.png')>>> catCopyIm = catIm.copy()The 
catIm and 
catCopyIm variables contain two separate 
Image objects, 
which both have the same image on them. Now that you have an 
Image object stored in 
catCopyIm, you can modify 
catCopyIm as you like and save 
it to
 a new ˜lename, leaving 
zophie.png
 untouched. For example, let™s try 
 modifying 
catCopyIm with the 
paste() method.
The 
paste() method is called on an 
Image object and pastes another image 
on top of it. Let™s continue the shell example by pasting a smaller image onto 
catCopyIm.>>> faceIm = catIm.crop((335, 345, 565, 560))>>> faceIm.size(230, 215)>>> catCopyIm.paste(faceIm, (0, 0))>>> catCopyIm.paste(faceIm, (400, 500))>>> catCopyIm.save('pasted.png') Manipulating Images
   395
First we pass 
crop() a box tuple for the rectangular area in 
zophie.png
 that contains Zophie™s face. This creates an 
Image object representing a 
230×215 crop, which we store in 
faceIm. Now we can paste 
faceIm onto 
 catCopyIm. The 
paste() method takes two arguments: a ﬁsourceﬂ 
Image object
 and a tuple of the x- and y-coordinates where you want to paste 
the top-left corner of the source 
Image object onto the main 
Image object. 
Here
 we call 
paste() twice on 
catCopyIm, passing (0, 0) the ˜rst time and 
(400, 500) the second time. This pastes 
faceIm onto 
catCopyIm twice: once 
with the top-left corner of 
faceIm at (0, 0) on 
catCopyIm, and once with 
the top-left corner of 
faceIm at (400, 500). Finally, we save the modi˜ed 
 catCopyIm to 
pasted.png
. The 
pasted.png
 image looks like Figure 17-5.
Figure 17-5: Zophie the cat, with her face  
pasted twice
NOTE
 Despite their names, the 
copy() and 
paste() methods in Pillow do not use your com-
puter™s clipboard.
Note that the 
paste() method modi˜es its 
Image object 
in place
; it does 
not return an 
Image object with the pasted image. If you want to call 
paste() but also keep an untouched version of the original image around, you™ll 
need to ˜rst copy the image and then call 
paste() on that copy.
Say you want to tile Zophie™s head across the entire image, as in 
Figure 17-6. You can achieve this effect with just a couple 
for loops. 
Continue the interactive shell example by entering the following:
>>> catImWidth, catImHeight = catIm.size>>> faceImWidth, faceImHeight = faceIm.size >>> catCopyTwo = catIm.copy() 396   Chapter 17
 >>> for left in range(0, catImWidth, faceImWidth):         for top in range(0, catImHeight, faceImHeight):            print(left, top)            catCopyTwo.paste(faceIm, (left, top))0 00 2150 4300 6450 8600 1075230 0230 215--snip--690 860690 1075>>> catCopyTwo.save('tiled.png')Here we store the width of height of 
catIm in 
catImWidth and 
 catImHeight. At 
 we make a copy of 
catIm and store it in 
catCopyTwo. Now 
that
 we have a copy that we can paste onto, we start looping to paste 
faceIm onto 
 catCopyTwo. The outer 
for loop™s 
left variable starts at 0 and increases by 
 faceImWidth(230) . The inner 
for loop™s 
top variable start at 0 and
 increases 
by faceImHeight(215) . These nested 
for loops
 produce values for 
left and 
top to paste a grid of 
faceIm images over the 
catCopyTwo Image object, as in 
Figure 17-6. To see our nested loops working, we print 
left and 
top. After 
the pasting is complete, we save the modi˜ed 
catCopyTwo to 
tiled.png
.Figure 17-6: Nested 
for loops used  
with 
paste() to duplicate the cat™s face  
(a dupli-cat, if you will).
 Manipulating Images
   397
Resizing an Image
The 
resize() method is called on an 
Image object and returns a new 
Image object of the speci˜ed width and height. It accepts a two-integer tuple argu-
ment, representing the new width and height of the returned image. Enter 
the following into the interactive shell:
 >>> width, height = catIm.size >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))>>> quartersizedIm.save('quartersized.png') >>> svelteIm = catIm.resize((width, height + 300))>>> svelteIm.save('svelte.png')Here we assign the two values in the 
catIm.size tuple to the variables 
width and 
height . Using 
width and 
height instead of 
catIm.size[0] and 
 catIm.size[1] makes the rest of the code more readable.
The ˜rst 
resize() call passes 
int(width / 2) for the new width and 
int(height / 2) for the new height 
, so the 
Image object returned from 
resize() will be half the length and width of the original image, or one-
quarter of the original image size overall. The 
resize() method accepts 
only integers in its tuple argument, which is why you needed to wrap both 
divisions by 
2 in an 
int() call.
This resizing keeps the same proportions for the width and height. But 
the new width and height passed to 
resize() do not have to be proportional 
to the original image. The 
svelteIm variable contains an 
Image object that 
has the original width but a height that is 300 pixels taller 
, giving Zophie 
a more slender look.
Note that the 
resize() method does not edit the 
Image object in place 
but instead returns a new 
Image object.
PAS
TING 
TRANSP
ARE
NT PIXEL
SNormally transparent pixels are pasted as white pixels
. If the image you want 
to paste has transparent pixels, pass the 
Image object as the third argument 
so that a solid rectangle isn™t pasted
. This third argument is the ﬁmaskﬂ 
Image object
. A mask is an 
Image object where the alpha value is signi˜cant, but the 
red, green, and blue values are ignored
. The mask tells the 
paste() function 
which pixels it should copy and which it should leave transparent
. Advanced 
usage of masks is beyond this book, but if you want to paste an image that has 
transparent pixels, pass the 
Image object again as the third argument
. 398
   Chapter 17
Rotating and Flipping Images
Images can be rotated with the 
rotate() method, which returns a new 
Image object of the rotated image and leaves the original 
Image object unchanged. 
The argument to 
rotate() is a single integer or ˚oat representing the num-
ber of degrees to rotate the image counterclockwise. Enter the following 
into the interactive shell:
>>> catIm.rotate(90).save('rotated90.png')>>> catIm.rotate(180).save('rotated180.png')>>> catIm.rotate(270).save('rotated270.png')Note how you can 
chain
 method calls by calling 
save() directly on the 
Image object returned from 
rotate(). The ˜rst 
rotate() and 
save() call makes 
a new 
Image object representing the image rotated counterclockwise by 
90
 degrees and saves the rotated image to 
rotated90.png
. The second and 
third calls do the same, but with 180 degress and 270 degress. The results 
look like Figure 17-7.
Figure 17-7: The original image (left) and the image rotated counterclockwise by 90, 180, 
and 270 degrees
Notice that the width and height of the image change when the image 
is rotated 90 or 270 degrees. If you rotate an image by some other amount, 
the original dimensions of the image are maintained. On Windows, a 
black background is used to ˜ll in any gaps made by the rotation, like in 
Figure
 17-8. On OS X, transparent pixels are used for the gaps instead.
The 
rotate() method has an optional 
expand keyword argument that can 
be set to 
True to enlarge the dimensions of the image to ˜t the entire rotated 
new image. For example, enter the following into the interactive shell:
>>> catIm.rotate(6).save('rotated6.png')>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')The ˜rst call rotates the image 6 degrees and saves it to 
rotate6.png
 (see 
the image on the left of Figure 17-8). The second call rotates the image 6 
degrees with 
expand set to 
True and saves it to 
rotate6_expanded.png
 (see the 
image on the right of Figure 17-8).
 Manipulating Images
   399
    Figure 17-8: The image rotated 6 degrees normally (left) and with 
expand=True (right)
You can also get a ﬁmirror ˚ipﬂ of an image with the 
transpose() method. 
You must pass either 
Image.FLIP_LEFT_RIGHT or 
Image.FLIP_TOP_BOTTOM to the 
transpose() method. Enter the following into the interactive shell:
>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')Like 
rotate(), transpose() creates a new 
Image object. Here was pass 
Image.FLIP_LEFT_RIGHT to ˚ip the image horizontally and then save the result 
to 
horizontal_˜ip.png
. To ˚ip the image vertically, we pass 
Image.FLIP_TOP_BOTTOM and save to 
vertical_˜ip.png
. The results look like Figure 17-9.
Figure 17-9: The original image (left), horizontal ˜ip (center), and vertical ˜ip (right)
 400
   Chapter 17
Changing Individual Pixels
The color of an individual pixel can be retrieved or set with the 
getpixel() and 
putpixel() methods. These methods both take a tuple representing the 
x- and y-coordinates of the pixel. The 
putpixel() method also takes an addi-
tional tuple argument for the color of the pixel. This color argument is a 
four-integer RGBA tuple or a three-integer RGB tuple. Enter the following 
into the interactive shell:
 >>> im = Image.new('RGBA', (100, 100)) >>> im.getpixel((0, 0))(0, 0, 0, 0) >>> for x in range(100):        for y in range(50):             im.putpixel((x, y), (210, 210, 210))>>> from PIL import ImageColor >>> for x in range(100):        for y in range(50, 100):             im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))>>> im.getpixel((0, 0))(210, 210, 210, 255)>>> im.getpixel((0, 50))(169, 169, 169, 255)>>> im.save('putPixel.png')At 
 we make a new image that is a 100×100 transparent square. 
Ca
lling 
getpixel() on some coordinates in this image returns 
(0, 0, 0, 0) because the image is transparent 
. To c
olor pixels in this image, we can 
use nested 
for loops to go through all the pixels in the top half of the 
image
  and color each pixel using 
putpixel() . Here we pass 
putpixel() the RGB tuple 
(210, 210, 210), a light gray.
Say we want to color the bottom half of the image dark gray but don™t 
know the RGB tuple for dark gray. The 
putpixel() method doesn™t accept a 
standard color name like 
'darkgray', so you have to use 
ImageColor.getcolor() to get a color tuple from 
'darkgray'. Loop through 
the pixels in the bottom half of the image 
 and pass 
putpixel() the return value of 
ImageColor.getcolor() , an
d you should now have an image that is light gray 
in
 its top half and dark gray in the bottom half, as 
shown in Figure 17-10. You can call 
getpixel() on some 
coordinates to con˜rm that the color at any given 
pixel is what you expect. Finally, save the image to 
 put
Pixel.png
.Of course, drawing one pixel at a time onto 
an image isn™t very convenient. If you need to draw 
shapes, use the 
ImageDraw functions explained later 
in
 this chapter.
Figure 17-10: 
The 
 putPixel
.png
 image 
 Manipulating Images
   401
Project: Adding a 
Log
oSay you have the boring job of resizing thousands 
of images and adding a small logo watermark to 
the corner of each. Doing this with a basic graph-
ics program such as Paintbrush or Paint would 
take forever. A fancier graphics application such 
as Photoshop can do batch processing, but that 
software costs hundreds of dollars. Let™s write a 
script to do it instead.
Say that Figure 17-11 is the logo you want to 
add to the bottom-right corner of each image: a 
black cat icon with a white border, with the rest 
of
 the image transparent.
At a high level, here™s what the program 
should do:
Load the logo image.
Loop over all 
.png
 and
.jpg
 ˜les in the working directory.
Check whether the image is wider or taller than 300 pixels.
If so, reduce the width or height (whichever is larger) to 300 pixels and 
scale down the other dimension proportionally.
Paste the logo image into the corner.
Save the altered images to another folder.
This means the code will need to do the following:
Open the 
catlogo.png
 ˜le as an 
Image object.
Loop over the strings returned from 
os.listdir('.').Get the width and height of the image from the 
size attribute.
Calculate the new width and height of the resized image.
Call the 
resize() method to resize the image.
Call the 
paste() method to paste the logo.
Call the 
save() method to save the changes, using the original ˜lename.
Step 1: Open the Logo Image
For this project, open a new ˜le editor window, enter the following code, 
and save it as 
resizeAndAddLogo.py
:#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.Figure 17-11: The logo to be 
added to the image.
 402
   Chapter 17
import osfrom PIL import Image SQUARE_FIT_SIZE = 300 LOGO_FILENAME = 'catlogo.png' logoIm = Image.open(LOGO_FILENAME) logoWidth, logoHeight = logoIm.size# TODO: Loop over all files in the working directory.# TODO: Check if image needs to be resized.# TODO: Calculate the new width and height to resize to.# TODO: Resize the image.# TODO: Add the logo.# TODO: Save changes.By setting up the 
SQUARE_FIT_SIZE  and 
LOGO_FILENAME  constants at the 
start of the program, we™ve made it easy to change the program later. Say 
the logo that you™re adding isn™t the cat icon, or say you™re reducing the out-
put images™ largest dimension to something other than 300 
 pi
xels. With these 
constants at the start of the program, you can just open the code, change 
those values once, and you™re done. (Or you can make it so that the values 
for these constants are taken from the command line arguments.) Without 
these constants, you™d instead have to search the code for all instances of 
300 and 
'catlogo.png' and replace them with the values for your new project. 
In short, using constants makes your program more generalized.
The logo 
Image object is returned from 
Image.open() . For readability, 
logoWidth and 
logoHeight are assigned to the values from 
logoIm.size .The rest of the program is a skeleton of 
TODO comments for now.
Step 2: Loop Over All Files and Open Images
Now you need to ˜nd every 
.png
 ˜le and 
.jpg
 ˜le in the current working 
directory. Note that you don™t want to add the logo image to the logo image 
itself, so the program should skip any image with a ˜lename that™s the same 
as 
LOGO_FILENAME. Add the following to your code:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip-- Manipulating Images
   403
os.makedirs('withLogo', exist_ok=True)# Loop over all files in the working directory. for filename in os.listdir('.'):     if not (filename.endswith('.png') or filename.endswith('.jpg')) \       or filename == LOGO_FILENAME:         continue    # skip non-image files and the logo file itself     im = Image.open(filename)    width, height = im.size--snip--First, the 
os.makedirs() call creates a 
withLogo
 folder to store the ˜n-
ished images with logos, instead of overwriting the original image ˜les. 
The 
exist_ok=True keyword argument will keep 
os.makedirs() from raising 
an exception if 
withLogo
 already exists. While looping through all the ˜les 
in the working directory with 
os.listdir('.') , the long 
if statement 
 checks whether each ˜lename doesn™t end with 
.png
 or 
.jpg
. If
 soŠor if the 
˜le is the logo image itselfŠthen the loop should skip it and use 
continue  to go to the next ˜le. If 
filename does
 end with 
'.png' or 
'.jpg' (and isn™t the 
logo ˜le), you can open it as an 
Image object 
 and set 
width and 
height.Step 3: Resize the Images
The program should resize the image only if the width or height is larger 
than 
SQUARE_FIT_SIZE (300 pixels, in this case), so put all of the resizing code 
inside an 
if statement that checks the 
width and 
height variables. Add the 
following code to your program:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip--    # Check if image needs to be resized.    if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:        # Calculate the new width and height to resize to.        if width > height:             height = int((SQUARE_FIT_SIZE / width) * height)            width = SQUARE_FIT_SIZE        else:             width = int((SQUARE_FIT_SIZE / height) * width)            height = SQUARE_FIT_SIZE        # Resize the image.        print('Resizing %s...' % (filename))         im = im.resize((width, height))--snip-- 404
   Chapter 17
If the image does need to be resized, you need to ˜nd out whether it is 
a wide or tall image. If 
width is greater than 
height, then the height should 
be reduced by the same proportion that the width would be reduced 
. This proportion is the 
SQUARE_FIT_SIZE value divided by the current width. 
The new 
height value is this proportion multiplied by the current 
height value. Since the division operator returns a ˚oat value and 
resize() requires 
the dimensions to be integers, remember to convert the result to an integer 
with the 
int() function. Finally, the new 
width value will simply be set to 
SQUARE_FIT_SIZE.If the 
height is greater than or equal to the 
width (both cases are handled 
in the 
else clause), then the same calculation is done, except with the 
height and 
width variables swapped 
.Once 
width and 
height contain the new image dimensions, pass them to 
the 
resize() method and store the returned 
Image object in 
im .Step 4: Add the Logo and Save the Changes
Whether or not the image was resized, the logo should still be pasted to the 
bottom-right corner. Where exactly the logo should be pasted depends on 
both the size of the image and the size of the logo. Figure 17-12 shows how 
to calculate the pasting position. The left coordinate for where to paste the 
logo will be the image width minus the logo width; the top coordinate for 
where to paste the logo will be the image height minus the logo height.
ImageLogo widthLogo heightLogoImage widthImage heightFigure 17-12: The left and top coordinates for 
placing the logo in the bottom-right corner 
should be the image width/height minus the 
logo width/height.
After your code pastes the logo into the image, it should save the modi-
˜ed 
Image object. Add the following to your program:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image Manipulating Images
   405
--snip--    # Check if image needs to be resized.    --snip--    # Add the logo.     print('Adding logo to %s...' % (filename))     im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)    # Save changes.     im.save(os.path.join('withLogo', filename))The new code prints a message telling the user that the logo is being 
added 
, pastes 
logoIm onto 
im at the calculated coordinates 
, and saves 
the changes to a ˜lename in the 
withLogo
 directory 
. When you run this 
program with the 
zophie.png
 ˜le as the only image in the working directory, 
the output will look like this:
Resizing zophie.png...Adding logo to zophie.png...The image 
zophie.png
 will be changed to a 225×300-pixel image that 
looks like Figure 17-13. Remember that the 
paste() method will not paste 
the transparency pixels if you do not pass the 
logoIm for the third argument 
as well. This program can automatically resize and ﬁlogo-ifyﬂ hundreds of 
images in just a couple minutes.
    Figure 17-13: The image 
zophie
.png
 resized and the logo added (left). If you forget the 
third argument, the transparent pixels in the logo will be copied as solid white pixels (right).
 406
   Chapter 17
Ideas for Similar Programs
Being able to composite images or modify image sizes in a batch can be 
useful in many applications. You could write similar programs to do the 
following:
Add text or a website URL to images.
Add timestamps to images.
Copy or move images into different folders based on their sizes.
Add a mostly transparent watermark to an image to prevent others 
from copying it.
Drawing on 
Ima
ges
If you need to draw lines, rectangles, circles, or other simple shapes on 
an
 image, use Pillow™s 
ImageDraw module. Enter the following into the inter-
active shell:
>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im)First, we import 
Image and 
ImageDraw. Then we create a new image, in this 
case, a 200×200 white image, and store the 
Image object in 
im. We pass the 
Image object to the 
ImageDraw.Draw() function to receive an 
ImageDraw object. 
This object has several methods for drawing shapes and text onto an 
Image object. Store the 
ImageDraw object in a variable like 
draw so you can use it eas-
ily in the following example.
Drawing Shapes
The following ImageDraw methods draw various kinds of shapes on the 
image. The 
fill and 
outline parameters for these methods are optional and 
will default to white if left unspeci˜ed.
Points
The 
point(xy, fill) method draws individual pixels. The 
xy argument 
represents a list of the points you want to draw. The list can be a list of 
x- and y-coordinate tuples, such as 
[(x, y), (x, y), ...], or a list of x- and 
y-
 co
ordinates without tuples, such as 
[x1, y1, x2, y2, ...]. The 
fill argu
-ment is the color of the points and is either an RGBA tuple or a string of 
a color name, such as 
'red'. The 
fill argument is optional.
Lines
The 
line(xy, fill, width) method draws a line or series of lines. 
xy is either 
a list of tuples, such as 
[(x, y), (x, y), ...], or a list of integers, such as 
[x1, y1, x2, y2, ...]. Each point is one of the connecting points on the 
 Manipulating Images
   407
lines you™re drawing. The optional 
fill argument is the color of the lines, 
as
 an RGBA tuple or color name. The optional 
width argument is the width 
of the lines and defaults to 1 if left unspeci˜ed.
Rec
tangles
The 
rectangle(xy, fill, outline) method draws a rectangle. The 
xy argu
-ment is a box tuple of the form 
(left, top, right, bottom). The 
left and 
top values specify the x- and y-coordinates of the upper-left corner of the rect-
angle, while 
right and 
bottom specify the lower-right corner. The optional 
fill argument is the color that will ˜ll the inside of the rectangle. The 
optional 
outline argument is the color of the rectangle™s outline.
Ellipses
The 
ellipse(xy, fill, outline) method draws an ellipse. If the width and 
height of the ellipse are identical, this method will draw a circle. The 
xy argument is a box tuple (
left, top, right, bottom) that represents a box that 
precisely contains the ellipse. The optional 
fill argument is the color of the 
inside of the ellipse, and the optional 
outline argument is the color of the 
ellipse™s outline.
Polygons
The 
polygon(xy, fill, outline) method draws an arbitrary polygon. The 
xy argument is a list of tuples, such as 
[(x, y), (x, y), ...], or integers, such 
as 
[x1, y1, x2, y2, ...], representing the connecting points of the polygon™s 
sides. The last pair of coordinates will be automatically connected to the 
˜rst pair. The optional 
fill argument is the color of the inside of the poly-
gon, and the optional 
outline argument is the color of the polygon™s outline.
Drawing Example
Enter the following into the interactive shell:
>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im) >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black') >>> draw.rectangle((20, 30, 60, 60), fill='blue') >>> draw.ellipse((120, 30, 160, 60), fill='red') >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown') >>> for i in range(100, 200, 10):        draw.line([(i, 0), (200, i - 100)], fill='green')>>> im.save('drawing.png')After making an 
Image object for a 200×200 white image, passing it to 
ImageDraw.Draw() to get an 
ImageDraw object, and storing the 
ImageDraw object 
in 
draw, you can call drawing methods on 
draw. Here we make a thin, black 
 408   Chapter 17
outline at the edges of the image 
, a bl
ue rectangle with its top-left corner 
at (20, 30) and bottom-right corner at (60, 60) 
, a red e
llipse de˜ned by a 
box from (120, 30) to (160, 60) 
, a bro
wn polygon with ˜ve points 
, an
d a pattern of green lines drawn with a 
for loop 
. The resulting 
drawing.png
 ˜le will look like Figure 17-14.
Figure 17-14: The resulting 
drawing
.png
  image
There are several other shape-drawing methods for 
ImageDraw objects. 
The full documentation is available at 
http://pillow.readthedocs.org/en/latest/
reference/ImageDraw.html
.Drawing Text
The 
ImageDraw object also has a 
text() method for drawing text onto an 
image. The 
text() method takes four arguments: 
xy, text, fill, and 
font.The 
xy argument is a two-integer tuple specifying the upper-left corner 
of the text box.
The 
text argument is the string of text you want to write.
The optional 
fill argument is the color of the text.
The optional 
font argument is an 
ImageFont object, used to set the type-
face and size of the text. This is described in more detail in the next 
section.
Since it™s often hard to know in advance what size a block of text will 
be in a given font, the 
ImageDraw module also offers a 
textsize() method. 
Its ˜rst argument is the string of text you want to measure, and its second 
argument is an optional 
ImageFont object. The 
textsize() method will then 
return a two-integer tuple of the width and height that the text in the given 
 Manipulating Images
   409
font would be if it were written onto the image. You can use this width and 
height to help you calculate exactly where you want to put the text on your 
image.
The ˜rst three arguments for 
text() are straightforward. Before we use 
text() to draw text onto an image, let™s look at the optional fourth argument, 
the 
ImageFont object.
Both 
text() and 
textsize() take an optional 
ImageFont object as their 
˜nal arguments. To create one of these objects, ˜rst run the following:
>>> from PIL import ImageFontNow that you™ve imported Pillow™s 
ImageFont module, you can call the 
ImageFont.truetype() function, which takes two arguments. The ˜rst argu-
ment is a string for the font™s 
TrueType ˚le
Šthis is the actual font ˜le that 
lives on your hard drive. A TrueType ˜le has the 
.ttf
 ˜le extension and can 
usually be found in the following folders:
On Windows: 
C:\Windows\Fonts
On OS X: 
/Library/Fonts
 and 
/System/Library/Fonts
On Linux: 
/usr/share/fonts/truetype
You don™t actually need to enter these paths as part of the TrueType 
˜le string because Python knows to automatically search for fonts in these 
directories. But Python will display an error if it is unable to ˜nd the font 
you speci˜ed.
The second argument to 
ImageFont.truetype() is an integer for the font 
size in 
points
 (rather than, say, pixels). Keep in mind that Pillow creates 
PNG images that are 72 pixels per inch by default, and a point is 1/72 of 
an inch.
Enter the following into the interactive shell, replacing 
FONT_FOLDER with 
the actual folder name your operating system uses:
>>> from PIL import Image, ImageDraw, ImageFont>>> import os >>> im = Image.new('RGBA', (200, 200), 'white') >>> draw = ImageDraw.Draw(im) >>> draw.text((20, 150), 'Hello', fill='purple')>>> fontsFolder = 'FONT_FOLDER' # e.g. ‚/Library/Fonts™ >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32) >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)>>> im.save('text.png')After importing 
Image, ImageDraw, ImageFont, and 
os, we make an 
Image object for a new 200×200 white image 
 and make an 
ImageDraw object from 
the 
Image object 
. We u
se 
text() to draw 
Hello
 at (20, 150) in purple
 . We 
didn™t pass the optional fourth argument in this 
text() call, so the typeface 
and size of this text aren™t customized.
 410
   Chapter 17
To set a typeface and size, we ˜rst 
store the folder name (like 
/Library/
Fonts
) in 
fontsFolder. Then we call 
ImageFont.truetype(), passing it the 
.ttf
 ˜le for the font we want, followed by 
an integer font size 
. St
ore the 
Font object you get from 
ImageFont.truetype() in a variable like 
arialFont, and then 
pass the
 variable to 
text() in the ˜nal 
keyword argument. The 
text() call at
  dr
aws 
Howdy
 at (100, 150) in gray in 
32-point Arial.
The resulting 
text.png
 ˜le will look 
like Figure 17-15.
Summary
Images consist of a collection of pixels, and each pixel has an RGBA value 
for its color and its addressable by x- and y-coordinates. Two common image 
formats are JPEG and PNG. The 
pillow module can handle both of these 
image formats and others.
When an image is loaded into an 
Image object, its width and height 
dimensions are stored as a two-integer tuple in the 
size attribute. Objects of the 
Image data type also have methods for common image manipulations: 
crop(), copy(), paste(), resize(), rotate(), and 
transpose(). To save the 
Image object to 
an image ˜le, call the 
save() method.
If you want your program to draw shapes onto an image, use 
ImageDraw methods to draw points, lines, rectangles, ellipses, and polygons. The mod-
ule also provides methods for drawing text in a typeface and font size of 
your choosing.
Although advanced (and expensive) applications such as Photoshop 
provide automatic batch processing features, you can use Python scripts to 
do many of the same modi˜cations for free. In the previous chapters, you 
wrote Python programs to deal with plaintext ˜les, spreadsheets, PDFs, and 
other formats. With the 
pillow module, you™ve extended your programming 
powers to processing images as well!
Practice Questions
1. What is an RGBA value?
2. Ho
w can you get the RGBA value of 
'CornflowerBlue' from the 
Pillow module?
3. Wh
at is a box tuple?
4.
 Wh
at function returns an 
Image object for, say, an image ˜le named 
zophie.png
?Figure 17-15: The resulting 
text
.png
 image
 Manipulating Images
   411
5. How can you ˜nd out the width and height of an 
Image object™s image?
6.
 Wh
at method would you call to get 
Image object for a 100×100 image, 
excluding the lower left quarter of it?
7. Af
ter making changes to an 
Image object, how could you save it as an 
image ˜le?
8.
 Wh
at module contains Pillow™s shape-drawing code?
9. Image objects do not have drawing methods. What kind of object does? 
How do you get this kind of object?
Practice Projects
For practice, write programs that do the following.
Extending and Fixing the Chapter Project Programs
The 
resizeAndAddLogo.py
 program in this chapter works with PNG and JPEG 
˜les, but Pillow supports many more formats than just these two. Extend 
resizeAndAddLogo.py
 to process GIF 
and BMP images as well.
Another small issue is that the 
program modi˜es PNG and JPEG 
˜les only if their ˜le extensions are 
set in lowercase. For example, it will 
process 
zophie.png
 but not 
zophie.PNG
. Change the code so that the ˜le 
extension check is case insensitive.
Finally, the logo added to the 
bottom-right corner is meant to be 
just a small mark, but if the image is 
about the same size as the logo itself, 
the result will look like Figure 17-16. 
Modify 
resizeAndAddLogo.py
 so that 
the image must be at least twice the 
width and height of the logo image 
before the logo is pasted. Other
 wi
se, 
it should skip adding the logo.
Identifying Photo Folders on the Hard Drive
I have a bad habit of transferring ˜les from my digital camera to temporary 
folders somewhere on the hard drive and then forgetting about these fold-
ers. It would be nice to write a program that could scan the entire hard 
drive and ˜nd these leftover ﬁphoto folders.ﬂ
Write a program that goes through every folder on your hard drive and 
˜nds potential photo folders. Of course, ˜rst you™ll have to de˜ne what you 
consider a ﬁphoto folderﬂ to be; let™s say that it™s any folder where more than 
half of the ˜les are photos. And how do you de˜ne what ˜les are photos? 
Figure 17-16: When the image isn™t much 
larger than the logo, the results look ugly.
 412   Chapter 17
First, a photo ˜le must have the ˜le extension 
.png
 or 
.jpg
. Also, photos 
are large images; a photo ˜le™s width and height must both be larger than 
500
 pixels. This is a safe bet, since most digital camera photos are several 
thousand pixels in width and height. 
As a hint, here™s a rough skeleton of what this program might look like:
#! python3# Import modules and write comments to describe this program.for foldername, subfolders, filenames in os.walk('C:\\'):    numPhotoFiles = 0    numNonPhotoFiles = 0    for filename in filenames:        # Check if file extension isn't .png or .jpg.        if TODO:            numNonPhotoFiles += 1            continue    # skip to next filename        # Open image file using Pillow.        # Check if width & height are larger than 500.        if TODO:            # Image is large enough to be considered a photo.            numPhotoFiles += 1        else:            # Image is too small to be a photo.            numNonPhotoFiles += 1    # If more than half of files were photos,    # print the absolute path of the folder.    if TODO:        print(TODO)When the program runs, it should print the absolute path of any photo 
folders to the screen.
Custom Seating Cards
Chapter 13 included a practice project to create custom invitations from 
a list of guests in a plaintext ˜le. As an additional project, use the 
 pillow module to create images for custom seating cards for your guests. For 
each of the guests listed in the 
guests.txt
 ˜le from the resources at 
http://
nostarch.com/automatestuff/
, generate an image ˜le with the guest name and 
some ˚owery decoration. A public domain ˚ower image is available in the 
resources at 
http://nostarch.com/automatestuff/
.To ensure that each seating card is the same size, add a black rectangle 
on the edges of the invitation image so that when the image is printed out, 
there will be a guideline for cutting. The PNG ˜les that Pillow produces are 
set to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel 
image.
",How computer programs represent a color in a image?,"['17MA\nNI\nPUL\nATING\n IMAGE\nSIf you have a digital camera or even if \nyou\n just upload photos from your phone \nto\n Facebook, you probably cross paths with \ndigital image ˜les all the time.', 'You may know \nhow to use basic graphics software, such as Microsoft \nPaint or Paintbrush, or even more advanced applica\n-tions such as Adobe Photoshop.', 'But if you need to \nedit a massive number of images, editing them by \nhand can be a lengthy, boring job.', 'Enter Python.', 'Pillow is a third-party Python module for interacting \nwith image ˜les.', 'The module has several functions that make it easy to \ncrop, resize, and edit the content of an image.', 'With the power to manipu\n-late images the same way you would with software such as Microsoft Paint \nor Adobe Photoshop, Python can automatically edit hundreds or thousands \nof images with ease.', '388\n   Chapter 17\nComputer \nIma\nge \nFun\ndamentals\nIn order to manipulate an image, you need to understand the basics of how \ncomputers deal with colors and coordinates in images and how you can \nwork with colors and coordinates in Pillow.', 'But before you continue, install \nthe \npillow module.', 'See Appendix A for help installing third-party modules.', 'Colors and RGBA Values\nComputer programs often represent a color in an image as an \nRGBA value\n.', 'An RGBA value is a group of numbers that specify the amount of red, green, \nblue, and \nalpha\n (or transparency) in a color.', 'Each of these component values \nis an integer from \n0 (none at all) to \n255 (the maximum).', 'These RGBA values \nare assigned to individual \npixel\ns; a pixel is the smallest dot of a single color \nthe computer screen can show (as you can imagine, there are millions of \npixels on a screen).', 'A pixel™s RGB setting tells it precisely what shade of \ncolor it should display.', 'Images also have an alpha value to create RGBA \nvalues.', 'If an image is displayed on the screen over a background image \nor desktop wallpaper, the alpha value determines how much of the back-\nground you can ﬁsee throughﬂ the image™s pixel.', 'In Pillow, RGBA values are represented by a tuple of four integer values.', 'For example, the color red is represented by \n(255, 0, 0, 255).', 'This color has \nthe maximum amount of red, no green or blue, and the maximum alpha \nvalue, meaning it is fully opaque.', 'Green is represented by \n(0, 255, 0, 255), and blue is \n(0, 0, 255, 255).', 'White, the combination of all colors, is \n(255, 255, 255, 255), while black, which has no color at all, is \n(0, 0, 0, 255).If a color has an alpha value of \n0, it is invisible, and it doesn™t really mat-\nter what the RGB values are.', 'After all, invisible red looks the same as invis-\nible black.', 'Pillow uses the standard color names that HTML uses.', 'Table 17-1 lists a \nselection of standard color names and their values.', 'Table 17-1: \nStandard Color Names and Their RGBA Values\nName\nRG\nBA v\nalue\nName\nRG\nBA v\nalue\nWhite\n(255, 255, 255, 255)Red\n(255, 0, 0, 255)Green\n(0, 128, 0, 255)Blue\n(0, 0, 255, 255)Gray\n(128, 128, 128, 255)Yellow\n(255, 255, 0, 255)Black\n(0, 0, 0, 255)Purple\n(128, 0, 128, 255)Pillow offers the \nImageColor.getcolor() function so you don™t have to \nmemorize RGBA values for the colors you want to use.', ""This function takes \na color name string as its ˜rst argument, and the string \n'RGBA' as its second \nargument, and it returns an RGBA tuple."", ""Manipulating Images\n   389\nTo see how this function works, enter the following into the interactive \nshell:\n >>> from PIL import ImageColor >>> ImageColor.getcolor('red', 'RGBA')(255, 0, 0, 255) >>> ImageColor.getcolor('RED', 'RGBA')(255, 0, 0, 255)>>> ImageColor.getcolor('Black', 'RGBA')(0, 0, 0, 255)>>> ImageColor.getcolor('chocolate', 'RGBA')(210, 105, 30, 255)>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')(100, 149, 237, 255)First, you need to import the \nImageColor module from PIL \n (not \nfrom\n Pillow; you™ll see why in a moment)."", ""The color name string you pass \nto\n ImageColor.getcolor() is case insensitive, so passing \n'red'  and passing \n'RED'  give you the same RGBA tuple."", ""You can also pass more unusual \ncolor names, like \n'chocolate' and \n'Cornflower Blue'.Pillow supports a huge number of color names, from \n'aliceblue' to \n'whitesmoke'."", 'You can ˜nd the full list of more than 100 standard color \nnames in the resources at \nhttp://nostarch.com/automatestuff/\n.', 'Coordinates and Box Tuples\nImage pixels are addressed with x- and y-coordinates, which respectively \nspecify a pixel™s horizontal and vertical location in an image.', 'The \norigin\n is \nthe pixel at the top-left corner of the image and is speci˜ed with the nota-\ntion (0, 0).', 'The ˜rst zero represents the x-coordinate, which starts at zero \nat the origin and increases going from left to right.', 'The second zero repre-\nsents the y-coordinate, which starts at zero at the origin and increases going \nCMYK\n AND RGB COL\nORING\nIn grade school you learned that mixing red, yellow, and blue paints can \nform other colors; for example, you can mix blue and yellow to make green \npaint\n.', 'This is known as the \nsubtractive color model\n, and it applies to dyes, inks, \nand pigments\n.', 'This is why color printers have \nCMYK\n ink cartridges: the \nCyan\n (blue), \nMagenta\n (red), \nYellow\n, and \nblacK\n ink can be mixed together to form any \ncolor\n.Ho\nwever, the physics of light uses what™s called an \nadditive color model\n.', 'Wh\nen combining light (such as the light given off by your computer screen), \nred, green, and blue light can be combined to form any other color\n.', 'This is why \nRGB\n values represent color in computer programs\n.', '390\n   Chapter 17\ndown the image.', 'This bears repeating: \ny-coordinates increase going downward, \nwhich is the opposite of how you may \nremember y-coordinates being used in \nmath class.', 'Figure 17-1 demonstrates how \nthis coordinate system works.', 'Many of Pillow™s functions and \n me\nthods take a \nbox tuple\n argument.', 'This \nmeans Pillow is expecting a tuple of four \ninteger coordinates that represent a rect-\nangular region in an image.', 'The four \nintegers are, in order, as follows:\nLeft\n: The x-coordinate of the leftmost \nedge of the box.', 'Top\n: The y-coordinate of the top edge \nof the box.', 'Right\n: The x-coordinate of one pixel \nto the right of the rightmost edge of \nthe box.', 'This integer must be greater \nthan the left integer.', 'Bottom\n: The y-coordinate of one pixel \nlower than the bottom edge of the \nbox.', 'This integer must be greater \nthan the top integer.', 'Note that the box includes the left \nand top coordinates and goes up to but \ndoes not include the right and bottom \ncoordinates.', 'For example, the box tuple  \n(3, 1, 9, 6) represents all the pixels in \nthe\n black box in Figure 17-2.', 'Manipulating \nIma\nges with Pillow\nNow that you know how colors and coordinates work in Pillow, let™s use \nPillow to manipulate an image.', 'Figure 17-3 is the image that will be used \nfor all the interactive shell examples in this chapter.', ""You can download it \nfrom \nhttp://nostarch.com/automatestuff/\n.Once you have the image ˜le \nZophie.png\n in your current working direc-\ntory, you™ll be ready to load the image of Zophie into Python, like so:\n>>> from PIL import Image>>> catIm = Image.open('zophie.png')Figure 17-2: \nThe area represented \nby the box tuple \n(3, 1, 9, 6)x increasesy increases(0,0)(27,26)Figure 17-1: The x- and y-coordinates \nof a 27×26 image of some sort of \nancient data storage device\n Manipulating Images\n   391\nFigure 17-3: My cat Zophie."", 'The camera  \nadds 10 pounds (which is a lot for a cat).', 'To load the image, you import the \nImage module from Pillow and call \nImage.open(), passing it the image™s ˜lename.', 'You can then store the loaded \nimage in a variable like \nCatIm.', 'The module name of Pillow is \nPIL to make it \nbackward compatible with an older module called Python Imaging Library, \nwhich is why you must run \nfrom PIL import Image instead of \nfrom Pillow import Image.', 'Because of the way Pillow™s creators set up the \npillow module, you must \nuse the \nfrom PIL import Image form of \nimport statement, rather than simply \nimport PIL.If the image ˜le isn™t in the current working directory, change the \nworking directory to the folder that contains the image ˜le by calling the \nos.chdir() function.', "">>> import os>>> os.chdir('C:\\\\folder_with_image_file')The \nImage.open() function returns a value of the \nImage object data type, \nwhich is how Pillow represents an image as a Python value."", 'You can load an \nImage object from an image ˜le (of any format) by passing the \nImage.open() function a string of the ˜lename.', 'Any changes you make to the \nImage object can be saved to an image ˜le (also of any format) with the \nsave() method.', 'All the rotations, resizing, cropping, drawing, and other image \nmanipulations will be done through method calls on this \nImage object.', 'To shorten the examples in this chapter, I™ll assume you™ve imported \nPillow™s \nImage module and that you have the Zophie image stored in a variable \nnamed \ncatIm.', 'Be sure that the \nzophie.png\n ˜le is in the current working direc-\ntory so that the \nImage.open() function can ˜nd it.', 'Otherwise, you will also have \nto specify the full absolute path in the string argument to \nImage.open().', '392\n   Chapter 17\nWorking with the Image Data Type\nAn \nImage object has several useful attributes that give you basic information \nabout the image ˜le it was loaded from: its width and height, the ˜lename, \nand the graphics format (such as JPEG, GIF, or PNG).', ""For example, enter the following into the interactive shell:\n>>> from PIL import Image>>> catIm = Image.open('zophie.png')>>> catIm.size (816, 1088) >>> width, height = catIm.size >>> width816 >>> height1088>>> catIm.filename'zophie.png'>>> catIm.format'PNG'>>> catIm.format_description'Portable network graphics' >>> catIm.save('zophie.jpg')After making an \nImage object from \nZophie.png\n and storing the \nImage object in \ncatIm, we can see that the object™s \nsize attribute contains a tuple \nof the image™s width and height in pixels \n."", 'We can assign the values in the \ntuple to \nwidth and \nheight variables \n in order to access with width \n and \nheight \n individually.', 'The \nfilename attribute describes the original ˜le™s \nname.', 'The \nformat and \nformat_description attributes are strings that describe \nthe image format of the original ˜le (with \nformat_description being a bit \nmore verbose).', ""Finally, calling the \nsave() method and passing it \n'zophie.jpg' saves a new \nimage with the ˜lename \nzophie.jpg\n to your hard drive \n."", 'Pillow sees that\n the \n˜le extension is \n.jpg\n and automatically saves the image using the JPEG image \nformat.', 'Now you should have two images, \nzophie.png\n and \nzophie.jpg\n, on your \nhard drive.', 'While these ˜les are based on the same image, they are not iden\n-tical because of their different formats.', 'Pillow also provides the \nImage.new() function, which returns an \nImage objectŠmuch like \nImage.open(), except the image represented by \nImage.new()™s \nobject will be blank.', ""The arguments to \nImage.new() are as follows:\nThe string \n'RGBA', which sets the color mode to RGBA."", '(There are other \nmodes that this book doesn™t go into.)', 'The size, as a two-integer tuple of the new image™s width and height.', 'Manipulating Images\n   393\nThe background color that the image should start with, as a four-\ninteger tuple of an RGBA value.', 'You can use the return value of \nthe\n ImageColor.getcolor() function for this argument.', 'Alternatively, \nImage.new() also supports just passing the string of the standard \ncolor\n name.', ""For example, enter the following into the interactive shell:\n>>> from PIL import Image >>> im = Image.new('RGBA', (100, 200), 'purple')>>> im.save('purpleImage.png') >>> im2 = Image.new('RGBA', (20, 20))>>> im2.save('transparentImage.png')Here we create an \nImage object for an image that™s 100 pixels wide and \n200 pixels tall, with a purple background \n."", 'This image is then saved to \nthe ˜le \npurpleImage.png\n.', 'We call \nImage.new() again to create another \nImage object, this time passing (20, 20) for the dimensions and nothing for the \nbackground color \n.', 'Invisible black, \n(0, 0, 0, 0), is the default color used if \nno color argument is speci˜ed, so the second image has a transparent back-\nground; we save this 20×20 transparent square in \ntransparentImage.png\n.Cropping Images\nCropping\n an image means selecting a rectangular region inside an image \nand removing everything outside the rectangle.', 'The \ncrop() method on \nImage objects takes a box tuple and returns an \nImage object representing \nthe cropped image.', 'The cropping does not happen in placeŠthat is, the \noriginal \nImage object is left untouched, and the \ncrop() method returns a \nnew \nImage object.', 'Remeber that a boxed tupleŠin this case, the cropped \nse\nctionŠincludes the left column and top row of pixels but only goes up \nto\n and does \nnot include the right column and bottom row of pixels.', ""Enter the following into the interactive shell:\n>>> croppedIm = catIm.crop((335, 345, 565, 560))>>> croppedIm.save('cropped.png')This makes a new \nImage object for the cropped image, stores the \nobject\n in croppedIm, and then calls \nsave() on \ncroppedIm to save the cropped \nimage in \ncropped.png\n."", 'The new ˜le \ncropped.png\n will be created from the ori\n-gi\nnal image, like in Figure 17-4.', '394\n   Chapter 17\n     Figure 17-4: The new image will be just the cropped  \nsection of the original image.', 'Copying and Pasting Images onto Other Images\nThe \ncopy() method will return a new \nImage object with the same image \nas the \nImage object it was called on.', 'This is useful if you need to make \nchanges to an image but also want to keep an untouched version of the \noriginal.', ""For example, enter the following into the interactive shell:\n>>> catIm = Image.open('zophie.png')>>> catCopyIm = catIm.copy()The \ncatIm and \ncatCopyIm variables contain two separate \nImage objects, \nwhich both have the same image on them."", 'Now that you have an \nImage object stored in \ncatCopyIm, you can modify \ncatCopyIm as you like and save \nit to\n a new ˜lename, leaving \nzophie.png\n untouched.', 'For example, let™s try \n modifying \ncatCopyIm with the \npaste() method.', 'The \npaste() method is called on an \nImage object and pastes another image \non top of it.', ""Let™s continue the shell example by pasting a smaller image onto \ncatCopyIm.>>> faceIm = catIm.crop((335, 345, 565, 560))>>> faceIm.size(230, 215)>>> catCopyIm.paste(faceIm, (0, 0))>>> catCopyIm.paste(faceIm, (400, 500))>>> catCopyIm.save('pasted.png') Manipulating Images\n   395\nFirst we pass \ncrop() a box tuple for the rectangular area in \nzophie.png\n that contains Zophie™s face."", 'This creates an \nImage object representing a \n230×215 crop, which we store in \nfaceIm.', 'Now we can paste \nfaceIm onto \n catCopyIm.', 'The \npaste() method takes two arguments: a ﬁsourceﬂ \nImage object\n and a tuple of the x- and y-coordinates where you want to paste \nthe top-left corner of the source \nImage object onto the main \nImage object.', 'Here\n we call \npaste() twice on \ncatCopyIm, passing (0, 0) the ˜rst time and \n(400, 500) the second time.', 'This pastes \nfaceIm onto \ncatCopyIm twice: once \nwith the top-left corner of \nfaceIm at (0, 0) on \ncatCopyIm, and once with \nthe top-left corner of \nfaceIm at (400, 500).', 'Finally, we save the modi˜ed \n catCopyIm to \npasted.png\n.', 'The \npasted.png\n image looks like Figure 17-5.', 'Figure 17-5: Zophie the cat, with her face  \npasted twice\nNOTE\n Despite their names, the \ncopy() and \npaste() methods in Pillow do not use your com-\nputer™s clipboard.', 'Note that the \npaste() method modi˜es its \nImage object \nin place\n; it does \nnot return an \nImage object with the pasted image.', 'If you want to call \npaste() but also keep an untouched version of the original image around, you™ll \nneed to ˜rst copy the image and then call \npaste() on that copy.', 'Say you want to tile Zophie™s head across the entire image, as in \nFigure 17-6.', 'You can achieve this effect with just a couple \nfor loops.', ""Continue the interactive shell example by entering the following:\n>>> catImWidth, catImHeight = catIm.size>>> faceImWidth, faceImHeight = faceIm.size >>> catCopyTwo = catIm.copy() 396   Chapter 17\n >>> for left in range(0, catImWidth, faceImWidth):         for top in range(0, catImHeight, faceImHeight):            print(left, top)            catCopyTwo.paste(faceIm, (left, top))0 00 2150 4300 6450 8600 1075230 0230 215--snip--690 860690 1075>>> catCopyTwo.save('tiled.png')Here we store the width of height of \ncatIm in \ncatImWidth and \n catImHeight."", 'At \n we make a copy of \ncatIm and store it in \ncatCopyTwo.', 'Now \nthat\n we have a copy that we can paste onto, we start looping to paste \nfaceIm onto \n catCopyTwo.', 'The outer \nfor loop™s \nleft variable starts at 0 and increases by \n faceImWidth(230) .', 'The inner \nfor loop™s \ntop variable start at 0 and\n increases \nby faceImHeight(215) .', 'These nested \nfor loops\n produce values for \nleft and \ntop to paste a grid of \nfaceIm images over the \ncatCopyTwo Image object, as in \nFigure 17-6.', 'To see our nested loops working, we print \nleft and \ntop.', 'After \nthe pasting is complete, we save the modi˜ed \ncatCopyTwo to \ntiled.png\n.Figure 17-6: Nested \nfor loops used  \nwith \npaste() to duplicate the cat™s face  \n(a dupli-cat, if you will).', 'Manipulating Images\n   397\nResizing an Image\nThe \nresize() method is called on an \nImage object and returns a new \nImage object of the speci˜ed width and height.', 'It accepts a two-integer tuple argu-\nment, representing the new width and height of the returned image.', ""Enter \nthe following into the interactive shell:\n >>> width, height = catIm.size >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))>>> quartersizedIm.save('quartersized.png') >>> svelteIm = catIm.resize((width, height + 300))>>> svelteIm.save('svelte.png')Here we assign the two values in the \ncatIm.size tuple to the variables \nwidth and \nheight ."", 'Using \nwidth and \nheight instead of \ncatIm.size[0] and \n catIm.size[1] makes the rest of the code more readable.', 'The ˜rst \nresize() call passes \nint(width / 2) for the new width and \nint(height / 2) for the new height \n, so the \nImage object returned from \nresize() will be half the length and width of the original image, or one-\nquarter of the original image size overall.', 'The \nresize() method accepts \nonly integers in its tuple argument, which is why you needed to wrap both \ndivisions by \n2 in an \nint() call.', 'This resizing keeps the same proportions for the width and height.', 'But \nthe new width and height passed to \nresize() do not have to be proportional \nto the original image.', 'The \nsvelteIm variable contains an \nImage object that \nhas the original width but a height that is 300 pixels taller \n, giving Zophie \na more slender look.', 'Note that the \nresize() method does not edit the \nImage object in place \nbut instead returns a new \nImage object.', 'PAS\nTING \nTRANSP\nARE\nNT PIXEL\nSNormally transparent pixels are pasted as white pixels\n.', 'If the image you want \nto paste has transparent pixels, pass the \nImage object as the third argument \nso that a solid rectangle isn™t pasted\n.', 'This third argument is the ﬁmaskﬂ \nImage object\n.', 'A mask is an \nImage object where the alpha value is signi˜cant, but the \nred, green, and blue values are ignored\n.', 'The mask tells the \npaste() function \nwhich pixels it should copy and which it should leave transparent\n.', 'Advanced \nusage of masks is beyond this book, but if you want to paste an image that has \ntransparent pixels, pass the \nImage object again as the third argument\n.', '398\n   Chapter 17\nRotating and Flipping Images\nImages can be rotated with the \nrotate() method, which returns a new \nImage object of the rotated image and leaves the original \nImage object unchanged.', 'The argument to \nrotate() is a single integer or ˚oat representing the num-\nber of degrees to rotate the image counterclockwise.', ""Enter the following \ninto the interactive shell:\n>>> catIm.rotate(90).save('rotated90.png')>>> catIm.rotate(180).save('rotated180.png')>>> catIm.rotate(270).save('rotated270.png')Note how you can \nchain\n method calls by calling \nsave() directly on the \nImage object returned from \nrotate()."", 'The ˜rst \nrotate() and \nsave() call makes \na new \nImage object representing the image rotated counterclockwise by \n90\n degrees and saves the rotated image to \nrotated90.png\n.', 'The second and \nthird calls do the same, but with 180 degress and 270 degress.', 'The results \nlook like Figure 17-7.', 'Figure 17-7: The original image (left) and the image rotated counterclockwise by 90, 180, \nand 270 degrees\nNotice that the width and height of the image change when the image \nis rotated 90 or 270 degrees.', 'If you rotate an image by some other amount, \nthe original dimensions of the image are maintained.', 'On Windows, a \nblack background is used to ˜ll in any gaps made by the rotation, like in \nFigure\n 17-8.', 'On OS X, transparent pixels are used for the gaps instead.', 'The \nrotate() method has an optional \nexpand keyword argument that can \nbe set to \nTrue to enlarge the dimensions of the image to ˜t the entire rotated \nnew image.', ""For example, enter the following into the interactive shell:\n>>> catIm.rotate(6).save('rotated6.png')>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')The ˜rst call rotates the image 6 degrees and saves it to \nrotate6.png\n (see \nthe image on the left of Figure 17-8)."", 'The second call rotates the image 6 \ndegrees with \nexpand set to \nTrue and saves it to \nrotate6_expanded.png\n (see the \nimage on the right of Figure 17-8).', 'Manipulating Images\n   399\n    Figure 17-8: The image rotated 6 degrees normally (left) and with \nexpand=True (right)\nYou can also get a ﬁmirror ˚ipﬂ of an image with the \ntranspose() method.', 'You must pass either \nImage.FLIP_LEFT_RIGHT or \nImage.FLIP_TOP_BOTTOM to the \ntranspose() method.', ""Enter the following into the interactive shell:\n>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')Like \nrotate(), transpose() creates a new \nImage object."", 'Here was pass \nImage.FLIP_LEFT_RIGHT to ˚ip the image horizontally and then save the result \nto \nhorizontal_˜ip.png\n.', 'To ˚ip the image vertically, we pass \nImage.FLIP_TOP_BOTTOM and save to \nvertical_˜ip.png\n.', 'The results look like Figure 17-9.', 'Figure 17-9: The original image (left), horizontal ˜ip (center), and vertical ˜ip (right)\n 400\n   Chapter 17\nChanging Individual Pixels\nThe color of an individual pixel can be retrieved or set with the \ngetpixel() and \nputpixel() methods.', 'These methods both take a tuple representing the \nx- and y-coordinates of the pixel.', 'The \nputpixel() method also takes an addi-\ntional tuple argument for the color of the pixel.', 'This color argument is a \nfour-integer RGBA tuple or a three-integer RGB tuple.', ""Enter the following \ninto the interactive shell:\n >>> im = Image.new('RGBA', (100, 100)) >>> im.getpixel((0, 0))(0, 0, 0, 0) >>> for x in range(100):        for y in range(50):             im.putpixel((x, y), (210, 210, 210))>>> from PIL import ImageColor >>> for x in range(100):        for y in range(50, 100):             im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))>>> im.getpixel((0, 0))(210, 210, 210, 255)>>> im.getpixel((0, 50))(169, 169, 169, 255)>>> im.save('putPixel.png')At \n we make a new image that is a 100×100 transparent square."", 'Ca\nlling \ngetpixel() on some coordinates in this image returns \n(0, 0, 0, 0) because the image is transparent \n.', 'To c\nolor pixels in this image, we can \nuse nested \nfor loops to go through all the pixels in the top half of the \nimage\n  and color each pixel using \nputpixel() .', 'Here we pass \nputpixel() the RGB tuple \n(210, 210, 210), a light gray.', 'Say we want to color the bottom half of the image dark gray but don™t \nknow the RGB tuple for dark gray.', ""The \nputpixel() method doesn™t accept a \nstandard color name like \n'darkgray', so you have to use \nImageColor.getcolor() to get a color tuple from \n'darkgray'."", 'Loop through \nthe pixels in the bottom half of the image \n and pass \nputpixel() the return value of \nImageColor.getcolor() , an\nd you should now have an image that is light gray \nin\n its top half and dark gray in the bottom half, as \nshown in Figure 17-10.', 'You can call \ngetpixel() on some \ncoordinates to con˜rm that the color at any given \npixel is what you expect.', 'Finally, save the image to \n put\nPixel.png\n.Of course, drawing one pixel at a time onto \nan image isn™t very convenient.', 'If you need to draw \nshapes, use the \nImageDraw functions explained later \nin\n this chapter.', 'Figure 17-10: \nThe \n putPixel\n.png\n image \n Manipulating Images\n   401\nProject: Adding a \nLog\noSay you have the boring job of resizing thousands \nof images and adding a small logo watermark to \nthe corner of each.', 'Doing this with a basic graph-\nics program such as Paintbrush or Paint would \ntake forever.', 'A fancier graphics application such \nas Photoshop can do batch processing, but that \nsoftware costs hundreds of dollars.', 'Let™s write a \nscript to do it instead.', 'Say that Figure 17-11 is the logo you want to \nadd to the bottom-right corner of each image: a \nblack cat icon with a white border, with the rest \nof\n the image transparent.', 'At a high level, here™s what the program \nshould do:\nLoad the logo image.', 'Loop over all \n.png\n and\n.jpg\n ˜les in the working directory.', 'Check whether the image is wider or taller than 300 pixels.', 'If so, reduce the width or height (whichever is larger) to 300 pixels and \nscale down the other dimension proportionally.', 'Paste the logo image into the corner.', 'Save the altered images to another folder.', 'This means the code will need to do the following:\nOpen the \ncatlogo.png\n ˜le as an \nImage object.', ""Loop over the strings returned from \nos.listdir('."", ""').Get the width and height of the image from the \nsize attribute."", 'Calculate the new width and height of the resized image.', 'Call the \nresize() method to resize the image.', 'Call the \npaste() method to paste the logo.', 'Call the \nsave() method to save the changes, using the original ˜lename.', 'Step 1: Open the Logo Image\nFor this project, open a new ˜le editor window, enter the following code, \nand save it as \nresizeAndAddLogo.py\n:#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.Figure 17-11: The logo to be \nadded to the image.', ""402\n   Chapter 17\nimport osfrom PIL import Image SQUARE_FIT_SIZE = 300 LOGO_FILENAME = 'catlogo.png' logoIm = Image.open(LOGO_FILENAME) logoWidth, logoHeight = logoIm.size# TODO: Loop over all files in the working directory.# TODO: Check if image needs to be resized.# TODO: Calculate the new width and height to resize to.# TODO: Resize the image.# TODO: Add the logo.# TODO: Save changes.By setting up the \nSQUARE_FIT_SIZE  and \nLOGO_FILENAME  constants at the \nstart of the program, we™ve made it easy to change the program later."", 'Say \nthe logo that you™re adding isn™t the cat icon, or say you™re reducing the out-\nput images™ largest dimension to something other than 300 \n pi\nxels.', 'With these \nconstants at the start of the program, you can just open the code, change \nthose values once, and you™re done.', '(Or you can make it so that the values \nfor these constants are taken from the command line arguments.)', ""Without \nthese constants, you™d instead have to search the code for all instances of \n300 and \n'catlogo.png' and replace them with the values for your new project."", 'In short, using constants makes your program more generalized.', 'The logo \nImage object is returned from \nImage.open() .', 'For readability, \nlogoWidth and \nlogoHeight are assigned to the values from \nlogoIm.size .The rest of the program is a skeleton of \nTODO comments for now.', 'Step 2: Loop Over All Files and Open Images\nNow you need to ˜nd every \n.png\n ˜le and \n.jpg\n ˜le in the current working \ndirectory.', 'Note that you don™t want to add the logo image to the logo image \nitself, so the program should skip any image with a ˜lename that™s the same \nas \nLOGO_FILENAME.', 'Add the following to your code:\n#!', ""python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip-- Manipulating Images\n   403\nos.makedirs('withLogo', exist_ok=True)# Loop over all files in the working directory."", ""for filename in os.listdir('."", ""'):     if not (filename.endswith('.png') or filename.endswith('.jpg')) \\       or filename == LOGO_FILENAME:         continue    # skip non-image files and the logo file itself     im = Image.open(filename)    width, height = im.size--snip--First, the \nos.makedirs() call creates a \nwithLogo\n folder to store the ˜n-\nished images with logos, instead of overwriting the original image ˜les."", 'The \nexist_ok=True keyword argument will keep \nos.makedirs() from raising \nan exception if \nwithLogo\n already exists.', ""While looping through all the ˜les \nin the working directory with \nos.listdir('.')"", ', the long \nif statement \n checks whether each ˜lename doesn™t end with \n.png\n or \n.jpg\n.', 'If\n soŠor if the \n˜le is the logo image itselfŠthen the loop should skip it and use \ncontinue  to go to the next ˜le.', ""If \nfilename does\n end with \n'.png' or \n'.jpg' (and isn™t the \nlogo ˜le), you can open it as an \nImage object \n and set \nwidth and \nheight.Step 3: Resize the Images\nThe program should resize the image only if the width or height is larger \nthan \nSQUARE_FIT_SIZE (300 pixels, in this case), so put all of the resizing code \ninside an \nif statement that checks the \nwidth and \nheight variables."", 'Add the \nfollowing code to your program:\n#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip--    # Check if image needs to be resized.', 'if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:        # Calculate the new width and height to resize to.', 'if width > height:             height = int((SQUARE_FIT_SIZE / width) * height)            width = SQUARE_FIT_SIZE        else:             width = int((SQUARE_FIT_SIZE / height) * width)            height = SQUARE_FIT_SIZE        # Resize the image.', ""print('Resizing %s...' % (filename))         im = im.resize((width, height))--snip-- 404\n   Chapter 17\nIf the image does need to be resized, you need to ˜nd out whether it is \na wide or tall image."", 'If \nwidth is greater than \nheight, then the height should \nbe reduced by the same proportion that the width would be reduced \n.', 'This proportion is the \nSQUARE_FIT_SIZE value divided by the current width.', 'The new \nheight value is this proportion multiplied by the current \nheight value.', 'Since the division operator returns a ˚oat value and \nresize() requires \nthe dimensions to be integers, remember to convert the result to an integer \nwith the \nint() function.', 'Finally, the new \nwidth value will simply be set to \nSQUARE_FIT_SIZE.If the \nheight is greater than or equal to the \nwidth (both cases are handled \nin the \nelse clause), then the same calculation is done, except with the \nheight and \nwidth variables swapped \n.Once \nwidth and \nheight contain the new image dimensions, pass them to \nthe \nresize() method and store the returned \nImage object in \nim .Step 4: Add the Logo and Save the Changes\nWhether or not the image was resized, the logo should still be pasted to the \nbottom-right corner.', 'Where exactly the logo should be pasted depends on \nboth the size of the image and the size of the logo.', 'Figure 17-12 shows how \nto calculate the pasting position.', 'The left coordinate for where to paste the \nlogo will be the image width minus the logo width; the top coordinate for \nwhere to paste the logo will be the image height minus the logo height.', 'ImageLogo widthLogo heightLogoImage widthImage heightFigure 17-12: The left and top coordinates for \nplacing the logo in the bottom-right corner \nshould be the image width/height minus the \nlogo width/height.', 'After your code pastes the logo into the image, it should save the modi-\n˜ed \nImage object.', 'Add the following to your program:\n#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image Manipulating Images\n   405\n--snip--    # Check if image needs to be resized.', '--snip--    # Add the logo.', ""print('Adding logo to %s...' % (filename))     im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)    # Save changes."", ""im.save(os.path.join('withLogo', filename))The new code prints a message telling the user that the logo is being \nadded \n, pastes \nlogoIm onto \nim at the calculated coordinates \n, and saves \nthe changes to a ˜lename in the \nwithLogo\n directory \n."", 'When you run this \nprogram with the \nzophie.png\n ˜le as the only image in the working directory, \nthe output will look like this:\nResizing zophie.png...Adding logo to zophie.png...The image \nzophie.png\n will be changed to a 225×300-pixel image that \nlooks like Figure 17-13.', 'Remember that the \npaste() method will not paste \nthe transparency pixels if you do not pass the \nlogoIm for the third argument \nas well.', 'This program can automatically resize and ﬁlogo-ifyﬂ hundreds of \nimages in just a couple minutes.', 'Figure 17-13: The image \nzophie\n.png\n resized and the logo added (left).', 'If you forget the \nthird argument, the transparent pixels in the logo will be copied as solid white pixels (right).', '406\n   Chapter 17\nIdeas for Similar Programs\nBeing able to composite images or modify image sizes in a batch can be \nuseful in many applications.', 'You could write similar programs to do the \nfollowing:\nAdd text or a website URL to images.', 'Add timestamps to images.', 'Copy or move images into different folders based on their sizes.', 'Add a mostly transparent watermark to an image to prevent others \nfrom copying it.', 'Drawing on \nIma\nges\nIf you need to draw lines, rectangles, circles, or other simple shapes on \nan\n image, use Pillow™s \nImageDraw module.', ""Enter the following into the inter-\nactive shell:\n>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im)First, we import \nImage and \nImageDraw."", 'Then we create a new image, in this \ncase, a 200×200 white image, and store the \nImage object in \nim.', 'We pass the \nImage object to the \nImageDraw.Draw() function to receive an \nImageDraw object.', 'This object has several methods for drawing shapes and text onto an \nImage object.', 'Store the \nImageDraw object in a variable like \ndraw so you can use it eas-\nily in the following example.', 'Drawing Shapes\nThe following ImageDraw methods draw various kinds of shapes on the \nimage.', 'The \nfill and \noutline parameters for these methods are optional and \nwill default to white if left unspeci˜ed.', 'Points\nThe \npoint(xy, fill) method draws individual pixels.', 'The \nxy argument \nrepresents a list of the points you want to draw.', 'The list can be a list of \nx- and y-coordinate tuples, such as \n[(x, y), (x, y), ...], or a list of x- and \ny-\n co\nordinates without tuples, such as \n[x1, y1, x2, y2, ...].', ""The \nfill argu\n-ment is the color of the points and is either an RGBA tuple or a string of \na color name, such as \n'red'."", 'The \nfill argument is optional.', 'Lines\nThe \nline(xy, fill, width) method draws a line or series of lines.', 'xy is either \na list of tuples, such as \n[(x, y), (x, y), ...], or a list of integers, such as \n[x1, y1, x2, y2, ...].', 'Each point is one of the connecting points on the \n Manipulating Images\n   407\nlines you™re drawing.', 'The optional \nfill argument is the color of the lines, \nas\n an RGBA tuple or color name.', 'The optional \nwidth argument is the width \nof the lines and defaults to 1 if left unspeci˜ed.', 'Rec\ntangles\nThe \nrectangle(xy, fill, outline) method draws a rectangle.', 'The \nxy argu\n-ment is a box tuple of the form \n(left, top, right, bottom).', 'The \nleft and \ntop values specify the x- and y-coordinates of the upper-left corner of the rect-\nangle, while \nright and \nbottom specify the lower-right corner.', 'The optional \nfill argument is the color that will ˜ll the inside of the rectangle.', 'The \noptional \noutline argument is the color of the rectangle™s outline.', 'Ellipses\nThe \nellipse(xy, fill, outline) method draws an ellipse.', 'If the width and \nheight of the ellipse are identical, this method will draw a circle.', 'The \nxy argument is a box tuple (\nleft, top, right, bottom) that represents a box that \nprecisely contains the ellipse.', 'The optional \nfill argument is the color of the \ninside of the ellipse, and the optional \noutline argument is the color of the \nellipse™s outline.', 'Polygons\nThe \npolygon(xy, fill, outline) method draws an arbitrary polygon.', 'The \nxy argument is a list of tuples, such as \n[(x, y), (x, y), ...], or integers, such \nas \n[x1, y1, x2, y2, ...], representing the connecting points of the polygon™s \nsides.', 'The last pair of coordinates will be automatically connected to the \n˜rst pair.', 'The optional \nfill argument is the color of the inside of the poly-\ngon, and the optional \noutline argument is the color of the polygon™s outline.', ""Drawing Example\nEnter the following into the interactive shell:\n>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im) >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black') >>> draw.rectangle((20, 30, 60, 60), fill='blue') >>> draw.ellipse((120, 30, 160, 60), fill='red') >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown') >>> for i in range(100, 200, 10):        draw.line([(i, 0), (200, i - 100)], fill='green')>>> im.save('drawing.png')After making an \nImage object for a 200×200 white image, passing it to \nImageDraw.Draw() to get an \nImageDraw object, and storing the \nImageDraw object \nin \ndraw, you can call drawing methods on \ndraw."", 'Here we make a thin, black \n 408   Chapter 17\noutline at the edges of the image \n, a bl\nue rectangle with its top-left corner \nat (20, 30) and bottom-right corner at (60, 60) \n, a red e\nllipse de˜ned by a \nbox from (120, 30) to (160, 60) \n, a bro\nwn polygon with ˜ve points \n, an\nd a pattern of green lines drawn with a \nfor loop \n.', 'The resulting \ndrawing.png\n ˜le will look like Figure 17-14.', 'Figure 17-14: The resulting \ndrawing\n.png\n  image\nThere are several other shape-drawing methods for \nImageDraw objects.', 'The full documentation is available at \nhttp://pillow.readthedocs.org/en/latest/\nreference/ImageDraw.html\n.Drawing Text\nThe \nImageDraw object also has a \ntext() method for drawing text onto an \nimage.', 'The \ntext() method takes four arguments: \nxy, text, fill, and \nfont.The \nxy argument is a two-integer tuple specifying the upper-left corner \nof the text box.', 'The \ntext argument is the string of text you want to write.', 'The optional \nfill argument is the color of the text.', 'The optional \nfont argument is an \nImageFont object, used to set the type-\nface and size of the text.', 'This is described in more detail in the next \nsection.', 'Since it™s often hard to know in advance what size a block of text will \nbe in a given font, the \nImageDraw module also offers a \ntextsize() method.', 'Its ˜rst argument is the string of text you want to measure, and its second \nargument is an optional \nImageFont object.', 'The \ntextsize() method will then \nreturn a two-integer tuple of the width and height that the text in the given \n Manipulating Images\n   409\nfont would be if it were written onto the image.', 'You can use this width and \nheight to help you calculate exactly where you want to put the text on your \nimage.', 'The ˜rst three arguments for \ntext() are straightforward.', 'Before we use \ntext() to draw text onto an image, let™s look at the optional fourth argument, \nthe \nImageFont object.', 'Both \ntext() and \ntextsize() take an optional \nImageFont object as their \n˜nal arguments.', 'To create one of these objects, ˜rst run the following:\n>>> from PIL import ImageFontNow that you™ve imported Pillow™s \nImageFont module, you can call the \nImageFont.truetype() function, which takes two arguments.', 'The ˜rst argu-\nment is a string for the font™s \nTrueType ˚le\nŠthis is the actual font ˜le that \nlives on your hard drive.', 'A TrueType ˜le has the \n.ttf\n ˜le extension and can \nusually be found in the following folders:\nOn Windows: \nC:\\Windows\\Fonts\nOn OS X: \n/Library/Fonts\n and \n/System/Library/Fonts\nOn Linux: \n/usr/share/fonts/truetype\nYou don™t actually need to enter these paths as part of the TrueType \n˜le string because Python knows to automatically search for fonts in these \ndirectories.', 'But Python will display an error if it is unable to ˜nd the font \nyou speci˜ed.', 'The second argument to \nImageFont.truetype() is an integer for the font \nsize in \npoints\n (rather than, say, pixels).', 'Keep in mind that Pillow creates \nPNG images that are 72 pixels per inch by default, and a point is 1/72 of \nan inch.', ""Enter the following into the interactive shell, replacing \nFONT_FOLDER with \nthe actual folder name your operating system uses:\n>>> from PIL import Image, ImageDraw, ImageFont>>> import os >>> im = Image.new('RGBA', (200, 200), 'white') >>> draw = ImageDraw.Draw(im) >>> draw.text((20, 150), 'Hello', fill='purple')>>> fontsFolder = 'FONT_FOLDER' # e.g."", ""‚/Library/Fonts™ >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32) >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)>>> im.save('text.png')After importing \nImage, ImageDraw, ImageFont, and \nos, we make an \nImage object for a new 200×200 white image \n and make an \nImageDraw object from \nthe \nImage object \n."", 'We u\nse \ntext() to draw \nHello\n at (20, 150) in purple\n .', 'We \ndidn™t pass the optional fourth argument in this \ntext() call, so the typeface \nand size of this text aren™t customized.', '410\n   Chapter 17\nTo set a typeface and size, we ˜rst \nstore the folder name (like \n/Library/\nFonts\n) in \nfontsFolder.', 'Then we call \nImageFont.truetype(), passing it the \n.ttf\n ˜le for the font we want, followed by \nan integer font size \n.', 'St\nore the \nFont object you get from \nImageFont.truetype() in a variable like \narialFont, and then \npass the\n variable to \ntext() in the ˜nal \nkeyword argument.', 'The \ntext() call at\n  dr\naws \nHowdy\n at (100, 150) in gray in \n32-point Arial.', 'The resulting \ntext.png\n ˜le will look \nlike Figure 17-15.', 'Summary\nImages consist of a collection of pixels, and each pixel has an RGBA value \nfor its color and its addressable by x- and y-coordinates.', 'Two common image \nformats are JPEG and PNG.', 'The \npillow module can handle both of these \nimage formats and others.', 'When an image is loaded into an \nImage object, its width and height \ndimensions are stored as a two-integer tuple in the \nsize attribute.', 'Objects of the \nImage data type also have methods for common image manipulations: \ncrop(), copy(), paste(), resize(), rotate(), and \ntranspose().', 'To save the \nImage object to \nan image ˜le, call the \nsave() method.', 'If you want your program to draw shapes onto an image, use \nImageDraw methods to draw points, lines, rectangles, ellipses, and polygons.', 'The mod-\nule also provides methods for drawing text in a typeface and font size of \nyour choosing.', 'Although advanced (and expensive) applications such as Photoshop \nprovide automatic batch processing features, you can use Python scripts to \ndo many of the same modi˜cations for free.', 'In the previous chapters, you \nwrote Python programs to deal with plaintext ˜les, spreadsheets, PDFs, and \nother formats.', 'With the \npillow module, you™ve extended your programming \npowers to processing images as well!', 'Practice Questions\n1.', 'What is an RGBA value?', '2.', ""Ho\nw can you get the RGBA value of \n'CornflowerBlue' from the \nPillow module?"", '3.', 'Wh\nat is a box tuple?', '4.', 'Wh\nat function returns an \nImage object for, say, an image ˜le named \nzophie.png\n?Figure 17-15: The resulting \ntext\n.png\n image\n Manipulating Images\n   411\n5.', 'How can you ˜nd out the width and height of an \nImage object™s image?', '6.', 'Wh\nat method would you call to get \nImage object for a 100×100 image, \nexcluding the lower left quarter of it?', '7.', 'Af\nter making changes to an \nImage object, how could you save it as an \nimage ˜le?', '8.', 'Wh\nat module contains Pillow™s shape-drawing code?', '9.', 'Image objects do not have drawing methods.', 'What kind of object does?', 'How do you get this kind of object?', 'Practice Projects\nFor practice, write programs that do the following.', 'Extending and Fixing the Chapter Project Programs\nThe \nresizeAndAddLogo.py\n program in this chapter works with PNG and JPEG \n˜les, but Pillow supports many more formats than just these two.', 'Extend \nresizeAndAddLogo.py\n to process GIF \nand BMP images as well.', 'Another small issue is that the \nprogram modi˜es PNG and JPEG \n˜les only if their ˜le extensions are \nset in lowercase.', 'For example, it will \nprocess \nzophie.png\n but not \nzophie.PNG\n.', 'Change the code so that the ˜le \nextension check is case insensitive.', 'Finally, the logo added to the \nbottom-right corner is meant to be \njust a small mark, but if the image is \nabout the same size as the logo itself, \nthe result will look like Figure 17-16.', 'Modify \nresizeAndAddLogo.py\n so that \nthe image must be at least twice the \nwidth and height of the logo image \nbefore the logo is pasted.', 'Other\n wi\nse, \nit should skip adding the logo.', 'Identifying Photo Folders on the Hard Drive\nI have a bad habit of transferring ˜les from my digital camera to temporary \nfolders somewhere on the hard drive and then forgetting about these fold-\ners.', 'It would be nice to write a program that could scan the entire hard \ndrive and ˜nd these leftover ﬁphoto folders.ﬂ\nWrite a program that goes through every folder on your hard drive and \n˜nds potential photo folders.', 'Of course, ˜rst you™ll have to de˜ne what you \nconsider a ﬁphoto folderﬂ to be; let™s say that it™s any folder where more than \nhalf of the ˜les are photos.', 'And how do you de˜ne what ˜les are photos?', 'Figure 17-16: When the image isn™t much \nlarger than the logo, the results look ugly.', '412   Chapter 17\nFirst, a photo ˜le must have the ˜le extension \n.png\n or \n.jpg\n.', 'Also, photos \nare large images; a photo ˜le™s width and height must both be larger than \n500\n pixels.', 'This is a safe bet, since most digital camera photos are several \nthousand pixels in width and height.', 'As a hint, here™s a rough skeleton of what this program might look like:\n#!', ""python3# Import modules and write comments to describe this program.for foldername, subfolders, filenames in os.walk('C:\\\\'):    numPhotoFiles = 0    numNonPhotoFiles = 0    for filename in filenames:        # Check if file extension isn't .png or .jpg."", 'if TODO:            numNonPhotoFiles += 1            continue    # skip to next filename        # Open image file using Pillow.', '# Check if width & height are larger than 500.        if TODO:            # Image is large enough to be considered a photo.', 'numPhotoFiles += 1        else:            # Image is too small to be a photo.', 'numNonPhotoFiles += 1    # If more than half of files were photos,    # print the absolute path of the folder.', 'if TODO:        print(TODO)When the program runs, it should print the absolute path of any photo \nfolders to the screen.', 'Custom Seating Cards\nChapter 13 included a practice project to create custom invitations from \na list of guests in a plaintext ˜le.', 'As an additional project, use the \n pillow module to create images for custom seating cards for your guests.', 'For \neach of the guests listed in the \nguests.txt\n ˜le from the resources at \nhttp://\nnostarch.com/automatestuff/\n, generate an image ˜le with the guest name and \nsome ˚owery decoration.', 'A public domain ˚ower image is available in the \nresources at \nhttp://nostarch.com/automatestuff/\n.To ensure that each seating card is the same size, add a black rectangle \non the edges of the invitation image so that when the image is printed out, \nthere will be a guideline for cutting.', 'The PNG ˜les that Pillow produces are \nset to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel \nimage.']","[array([ 0.06431493,  0.07472365,  0.13672064, ..., -0.00063823,
       -0.01190728,  0.07100931], dtype=float32), array([ 0.04919231,  0.10589863,  0.17439698, ..., -0.01807923,
       -0.01424596,  0.1708832 ], dtype=float32), array([ 0.03134285,  0.13994716,  0.10458682, ...,  0.06309756,
       -0.03814263,  0.01076107], dtype=float32), array([ 0.07025885, -0.07810354,  0.07427086, ..., -0.03926745,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.10038307,  0.05489067,  0.08221222, ...,  0.00547489,
       -0.0161816 ,  0.06513822], dtype=float32), array([ 0.03190372,  0.10793203,  0.17926428, ...,  0.06401385,
       -0.00772988,  0.07980725], dtype=float32), array([ 0.0428622 ,  0.10350282,  0.17385212, ...,  0.08631015,
       -0.03814263,  0.18071286], dtype=float32), array([ 0.06839821,  0.1490474 ,  0.1313635 , ...,  0.05056475,
       -0.00956214,  0.04912522], dtype=float32), array([ 0.01748219,  0.05110446,  0.05769224, ...,  0.00754203,
        0.03886375, -0.00375294], dtype=float32), array([0.05410789, 0.10346806, 0.07110669, ..., 0.05874321, 0.04942713,
       0.02936727], dtype=float32), array([ 0.0795623 ,  0.1613074 ,  0.11413529, ..., -0.00412017,
        0.00263271, -0.00199845], dtype=float32), array([ 0.05512173,  0.28224882,  0.10825451, ...,  0.06364432,
       -0.00427722,  0.05690479], dtype=float32), array([ 0.05155294,  0.1040457 ,  0.05265638, ...,  0.03801778,
       -0.01966181,  0.0069375 ], dtype=float32), array([ 0.08668395,  0.11782444,  0.07733955, ...,  0.04684611,
       -0.02056096,  0.04767893], dtype=float32), array([ 0.03652222,  0.18587695,  0.1017595 , ...,  0.01768744,
       -0.03092445,  0.00832239], dtype=float32), array([ 0.0766842 ,  0.05648223,  0.04913316, ...,  0.08015788,
       -0.03339547,  0.05370966], dtype=float32), array([ 0.0884609 ,  0.09367552,  0.13224152, ...,  0.0396965 ,
       -0.00664936,  0.04567108], dtype=float32), array([ 0.08815295,  0.20815228,  0.04659249, ...,  0.2278997 ,
       -0.03814263,  0.04382882], dtype=float32), array([ 0.05647859,  0.18485475,  0.0872967 , ..., -0.02970623,
       -0.03814263, -0.00539271], dtype=float32), array([ 0.07426149,  0.24892826,  0.08237553, ...,  0.04701482,
       -0.0114199 ,  0.04223397], dtype=float32), array([ 0.0815654 ,  0.23499411, -0.00230788, ..., -0.02798165,
       -0.03814263, -0.00137427], dtype=float32), array([ 0.07555893,  0.18631947,  0.10038888, ...,  0.06006905,
       -0.03814263,  0.04156219], dtype=float32), array([ 0.09431896,  0.06950986,  0.18247549, ..., -0.01468437,
       -0.03814263,  0.01623263], dtype=float32), array([ 0.12310537,  0.15819417,  0.07630527, ...,  0.05431917,
       -0.01930591,  0.08596666], dtype=float32), array([ 0.08410262,  0.1613636 ,  0.06608897, ...,  0.15973775,
       -0.02996947,  0.01497513], dtype=float32), array([ 0.07497041,  0.30376154,  0.0399021 , ...,  0.05813181,
       -0.02396614,  0.11575406], dtype=float32), array([ 0.07601127,  0.189189  ,  0.07926533, ...,  0.01898011,
       -0.03814263,  0.06221076], dtype=float32), array([ 0.13192421,  0.16202052,  0.06221355, ...,  0.07390723,
       -0.02139065,  0.0726465 ], dtype=float32), array([ 0.06291844,  0.14614467,  0.07045542, ...,  0.05943317,
       -0.02541971,  0.00281954], dtype=float32), array([ 0.09908262,  0.19546968,  0.09959548, ...,  0.07306383,
       -0.03814263, -0.01029061], dtype=float32), array([ 0.09908262,  0.18108791,  0.05521824, ...,  0.1018354 ,
       -0.03814263,  0.01126568], dtype=float32), array([ 0.09108844,  0.09005644,  0.11586274, ...,  0.05389998,
       -0.03814263,  0.02155964], dtype=float32), array([ 0.09132136,  0.05355069,  0.19315279, ...,  0.01418866,
       -0.03814263,  0.01205983], dtype=float32), array([ 0.07584792,  0.09565926,  0.05043862, ...,  0.07396578,
       -0.03814263,  0.08955199], dtype=float32), array([0.05604194, 0.2505204 , 0.12394767, ..., 0.05191016, 0.03132453,
       0.11792186], dtype=float32), array([ 0.08328244,  0.16949087,  0.07205911, ..., -0.03676178,
        0.02532842,  0.05890804], dtype=float32), array([0.08251766, 0.23041785, 0.06506254, ..., 0.01244497, 0.01881933,
       0.07830486], dtype=float32), array([0.05864831, 0.27385154, 0.06457938, ..., 0.00694726, 0.0142929 ,
       0.00520571], dtype=float32), array([ 0.09008251,  0.1694472 ,  0.04357214, ...,  0.06230665,
       -0.00557761, -0.02892259], dtype=float32), array([ 0.0469289 ,  0.15258512,  0.10880781, ..., -0.00311054,
       -0.03814263,  0.03585216], dtype=float32), array([ 0.06972891,  0.06344406,  0.12414273, ...,  0.04784884,
       -0.00577933,  0.03239757], dtype=float32), array([ 0.08484852,  0.11077435,  0.05747169, ...,  0.03774838,
       -0.0189133 ,  0.03788872], dtype=float32), array([ 0.04597238,  0.09253366,  0.02181988, ..., -0.01880834,
        0.000175  ,  0.04085216], dtype=float32), array([ 0.0987749 ,  0.22696021,  0.13155022, ...,  0.21145338,
       -0.03814263,  0.07955025], dtype=float32), array([ 0.11282833,  0.18747492,  0.1698302 , ...,  0.18917498,
       -0.03814263,  0.10340482], dtype=float32), array([ 0.14325023,  0.11657669,  0.13664456, ..., -0.00443025,
       -0.03814263,  0.00242573], dtype=float32), array([ 0.10914269,  0.10751404,  0.15834388, ...,  0.00731974,
       -0.03330582,  0.06314512], dtype=float32), array([ 0.05539125,  0.06336156,  0.03508229, ...,  0.04825284,
       -0.03814263,  0.05771172], dtype=float32), array([ 0.08592106,  0.12174107,  0.14306319, ...,  0.01189961,
       -0.03814263, -0.00048587], dtype=float32), array([ 0.0762489 ,  0.08972747,  0.055613  , ...,  0.0550131 ,
       -0.03814263, -0.02239605], dtype=float32), array([ 0.09268093,  0.08560064,  0.0783288 , ...,  0.07938202,
       -0.0276427 ,  0.07191494], dtype=float32), array([ 0.10484756,  0.19048157,  0.15853176, ...,  0.0422199 ,
       -0.0284193 ,  0.04555564], dtype=float32), array([ 0.06532189,  0.12963194,  0.11500832, ...,  0.01100447,
       -0.01500341,  0.10252608], dtype=float32), array([ 0.08484852,  0.1339228 ,  0.11774598, ...,  0.07299631,
       -0.02273563, -0.01071598], dtype=float32), array([ 0.12196464,  0.17711058,  0.12711327, ...,  0.04408975,
       -0.0075088 ,  0.07370084], dtype=float32), array([ 0.03468516,  0.1643938 ,  0.02923469, ...,  0.08504628,
       -0.03814263, -0.00667095], dtype=float32), array([ 0.06254705,  0.13793936,  0.10868441, ..., -0.0014915 ,
       -0.01154051,  0.06892794], dtype=float32), array([ 0.1138211 ,  0.09639519,  0.10973511, ..., -0.00190814,
       -0.03814263,  0.0275734 ], dtype=float32), array([ 0.053032  ,  0.11074784,  0.09696858, ...,  0.03051257,
       -0.03205256,  0.10812411], dtype=float32), array([ 0.06921297,  0.10593355,  0.13726062, ...,  0.07854313,
       -0.02406617,  0.02984594], dtype=float32), array([ 0.16400862,  0.13829261,  0.10736371, ..., -0.00385956,
       -0.02397317,  0.07548179], dtype=float32), array([ 0.09908262,  0.16447695,  0.10241293, ...,  0.03321312,
       -0.01690692,  0.03341848], dtype=float32), array([ 0.03017557,  0.15713537,  0.11954287, ...,  0.02369552,
       -0.03814263,  0.05558089], dtype=float32), array([ 0.05919995,  0.11622321,  0.09347131, ...,  0.02439196,
       -0.01830894,  0.11239936], dtype=float32), array([0.08492061, 0.14534067, 0.1596853 , ..., 0.02915582, 0.0098824 ,
       0.05401831], dtype=float32), array([ 0.06565915,  0.07196098,  0.06938813, ..., -0.01203438,
       -0.01709725,  0.03730565], dtype=float32), array([ 0.04315702,  0.04594978,  0.10787593, ...,  0.04835742,
       -0.03332894,  0.07196068], dtype=float32), array([ 0.03294341,  0.15110986,  0.15582006, ...,  0.07239477,
       -0.01532549,  0.03666712], dtype=float32), array([ 0.15458897,  0.15147555,  0.13180758, ...,  0.1150566 ,
       -0.03382928,  0.07235524], dtype=float32), array([0.09785706, 0.06781045, 0.14420474, ..., 0.05685432, 0.0392192 ,
       0.03723843], dtype=float32), array([ 0.00407089,  0.04318504,  0.18532565, ...,  0.06408114,
       -0.03814263,  0.03431991], dtype=float32), array([ 0.02999814,  0.09007732,  0.14169167, ...,  0.00650641,
       -0.03814263,  0.01217429], dtype=float32), array([ 0.02856491,  0.09871047,  0.11916202, ...,  0.01401717,
       -0.02066692,  0.0783575 ], dtype=float32), array([ 0.07696597,  0.05040507,  0.13137537, ...,  0.02818248,
       -0.02639731,  0.0813982 ], dtype=float32), array([ 0.06629205,  0.10216536,  0.04359767, ...,  0.14283869,
       -0.03814263,  0.02500696], dtype=float32), array([ 0.10163038,  0.11402921,  0.11492375, ...,  0.16274576,
       -0.03814263, -0.02100274], dtype=float32), array([ 0.0820093 ,  0.13661276,  0.06736468, ..., -0.01575326,
       -0.03814263,  0.08192919], dtype=float32), array([ 0.03717984,  0.14028804,  0.08433895, ..., -0.01739916,
       -0.02203202,  0.06319594], dtype=float32), array([ 0.04133011,  0.04021337,  0.02348235, ..., -0.00078594,
       -0.03438281, -0.00024225], dtype=float32), array([ 0.05964039,  0.10480724,  0.13325876, ...,  0.03592529,
       -0.02996356, -0.01512743], dtype=float32), array([ 0.04544538,  0.1572944 ,  0.10156279, ...,  0.01588498,
       -0.02942418,  0.02342934], dtype=float32), array([ 0.09908262,  0.1357489 ,  0.05521824, ..., -0.02593606,
       -0.01160208,  0.04085216], dtype=float32), array([ 0.03255493,  0.12876712,  0.06845186, ...,  0.06596559,
       -0.03814263,  0.02868678], dtype=float32), array([ 0.12154306,  0.2033798 ,  0.11413283, ...,  0.07607315,
       -0.03814263,  0.08925153], dtype=float32), array([ 0.09384128,  0.05830499,  0.11598927, ..., -0.0172186 ,
       -0.03814263, -0.00220324], dtype=float32), array([ 0.02689293,  0.14510855,  0.06917116, ...,  0.05472209,
       -0.02830765,  0.05434654], dtype=float32), array([ 0.10901388,  0.1604867 ,  0.13969009, ...,  0.10254557,
       -0.03558253,  0.06095471], dtype=float32), array([ 0.07063144,  0.15672386,  0.20497473, ...,  0.0333605 ,
       -0.02996932,  0.11042392], dtype=float32), array([ 0.06728207,  0.12997417,  0.11232853, ...,  0.04312448,
       -0.01229055,  0.09644004], dtype=float32), array([ 0.09518945,  0.10605255,  0.19963583, ...,  0.03025993,
       -0.03644376,  0.07692333], dtype=float32), array([ 0.12266903,  0.14528875,  0.21364893, ...,  0.07520053,
       -0.01086655,  0.0737415 ], dtype=float32), array([ 0.09125844,  0.09060758,  0.1349284 , ...,  0.00209236,
       -0.03814263,  0.00621413], dtype=float32), array([ 0.06471973,  0.14853401,  0.23777397, ...,  0.05840423,
       -0.0311471 ,  0.02999379], dtype=float32), array([ 0.07507648,  0.13563634,  0.08668978, ...,  0.01369246,
       -0.03191522,  0.0931455 ], dtype=float32), array([ 0.08251766,  0.1198255 ,  0.13434851, ...,  0.05846797,
       -0.01145691, -0.02892259], dtype=float32), array([0.11941897, 0.1375211 , 0.09735018, ..., 0.16794951, 0.00441317,
       0.06569751], dtype=float32), array([ 0.05759674,  0.16067146,  0.15380898, ...,  0.02495824,
       -0.03049271,  0.03353409], dtype=float32), array([0.03225759, 0.07841156, 0.19383271, ..., 0.04851587, 0.00350747,
       0.05558089], dtype=float32), array([ 0.12009132,  0.13552384,  0.17115943, ...,  0.01222819,
       -0.02045619,  0.0890739 ], dtype=float32), array([ 0.12021046,  0.16263837,  0.13484308, ...,  0.07035965,
       -0.02663636,  0.09721249], dtype=float32), array([ 0.08407063,  0.15360038,  0.13138266, ...,  0.01101957,
       -0.03814263,  0.06145175], dtype=float32), array([ 0.13411011,  0.05148633,  0.18207139, ...,  0.02516072,
       -0.00422684,  0.07275313], dtype=float32), array([ 0.11272831,  0.14886023,  0.20925687, ...,  0.13447265,
       -0.00679452,  0.0911947 ], dtype=float32), array([ 0.0886748 ,  0.11898074,  0.13820948, ...,  0.03046061,
       -0.03431615,  0.09789579], dtype=float32), array([ 0.12209295,  0.06761865,  0.17731825, ...,  0.02968191,
       -0.01811283,  0.02343927], dtype=float32), array([ 0.0344221 ,  0.08293164,  0.01921652, ..., -0.03926745,
       -0.01775976,  0.05095374], dtype=float32), array([ 0.0740501 ,  0.13278848,  0.17269763, ...,  0.01166298,
       -0.03814263,  0.01547249], dtype=float32), array([ 0.08484852,  0.12184973,  0.20840648, ...,  0.13252255,
       -0.00774061,  0.05438839], dtype=float32), array([ 0.07619177,  0.14730285,  0.17102869, ...,  0.03953595,
       -0.01812584,  0.05841321], dtype=float32), array([0.06917181, 0.121247  , 0.16241816, ..., 0.02417245, 0.01957346,
       0.04547926], dtype=float32), array([0.12611476, 0.09428305, 0.13693468, ..., 0.01625642, 0.04810876,
       0.02558648], dtype=float32), array([ 0.09908262,  0.06609358,  0.07902504, ...,  0.0189566 ,
       -0.03814263, -0.01245891], dtype=float32), array([ 0.13374858,  0.1841396 ,  0.10796802, ...,  0.04349609,
       -0.02506283,  0.0853021 ], dtype=float32), array([ 0.05289273,  0.11165794,  0.03082561, ..., -0.00171907,
       -0.01781811,  0.02216664], dtype=float32), array([0.09508916, 0.03013258, 0.20402734, ..., 0.02516072, 0.0217618 ,
       0.05724372], dtype=float32), array([ 0.0603642 ,  0.09901319,  0.05873497, ...,  0.0401301 ,
       -0.03814263,  0.07555892], dtype=float32), array([ 0.106552  ,  0.11546758,  0.0734043 , ...,  0.04203333,
       -0.03814263,  0.02190967], dtype=float32), array([ 0.09390419,  0.10877089,  0.19905445, ...,  0.09362932,
       -0.00435316,  0.09912835], dtype=float32), array([ 0.10177204,  0.04581835,  0.08093712, ...,  0.08422121,
       -0.03814263,  0.08002698], dtype=float32), array([0.0422437 , 0.07209808, 0.19102424, ..., 0.03461203, 0.00255332,
       0.05298198], dtype=float32), array([ 0.0469295 ,  0.17108525,  0.11133605, ...,  0.02842859,
       -0.0226238 ,  0.08718503], dtype=float32), array([ 0.03638206,  0.12132214,  0.1182116 , ...,  0.0505824 ,
       -0.03814263, -0.00734588], dtype=float32), array([0.12314076, 0.12643191, 0.18921812, ..., 0.16726926, 0.01268523,
       0.07410345], dtype=float32), array([ 0.03902647,  0.12817244,  0.11943574, ...,  0.05587655,
       -0.02958397,  0.07828651], dtype=float32), array([ 0.04902211,  0.13985303,  0.11855579, ...,  0.08246176,
       -0.03814263,  0.05424957], dtype=float32), array([ 0.05837161,  0.1159235 ,  0.11560156, ...,  0.04262975,
       -0.03814263,  0.07371103], dtype=float32), array([ 0.05539125,  0.0535978 ,  0.11854342, ...,  0.0485049 ,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.05067483,  0.0665971 ,  0.10211878, ...,  0.05840423,
       -0.00140269, -0.00261341], dtype=float32), array([ 0.01614291,  0.14429203,  0.17536551, ...,  0.05753361,
       -0.03814263,  0.03084389], dtype=float32), array([ 0.05683771,  0.14763595,  0.10954252, ...,  0.02164799,
       -0.01229055,  0.07456639], dtype=float32), array([ 0.06308489,  0.04586183,  0.12293842, ...,  0.00492019,
       -0.03376217, -0.0054076 ], dtype=float32), array([ 0.08606111,  0.12199628,  0.17324308, ...,  0.09722406,
       -0.01435869,  0.07540414], dtype=float32), array([ 0.05539125,  0.1459951 ,  0.04237986, ..., -0.03062997,
       -0.03814263,  0.07185187], dtype=float32), array([ 0.06387018,  0.2800764 ,  0.09353468, ..., -0.00223939,
       -0.01785183,  0.03688065], dtype=float32), array([ 0.09090106,  0.05025285,  0.1909369 , ..., -0.00453762,
       -0.00661741,  0.0632493 ], dtype=float32), array([ 0.07645395,  0.13374321,  0.16346067, ..., -0.0054778 ,
       -0.00901813,  0.04409929], dtype=float32), array([ 0.07097481,  0.150297  ,  0.15004417, ...,  0.04172441,
       -0.03814263,  0.07989721], dtype=float32), array([ 0.08688521,  0.09837242,  0.16581434, ...,  0.0549456 ,
       -0.0219798 ,  0.07656853], dtype=float32), array([ 0.12266903,  0.11541417,  0.06828991, ...,  0.07372487,
       -0.03814263,  0.10602124], dtype=float32), array([ 0.07968815,  0.14016885,  0.17622335, ...,  0.08349247,
       -0.03814263,  0.03292621], dtype=float32), array([-0.0026457 ,  0.14734718,  0.03898041, ...,  0.07107062,
       -0.03814263, -0.00456351], dtype=float32), array([ 0.06568718,  0.15717657,  0.16995892, ...,  0.01446053,
       -0.02147086,  0.02677075], dtype=float32), array([ 0.08484852,  0.14296225,  0.17406972, ...,  0.09486773,
       -0.03814263,  0.10276736], dtype=float32), array([ 0.08810379,  0.09852195,  0.10595568, ...,  0.06016212,
       -0.03814263, -0.00426486], dtype=float32), array([ 0.07618097,  0.15250853,  0.12218679, ...,  0.01289228,
       -0.00404784, -0.0035625 ], dtype=float32), array([ 0.05055314,  0.08144927,  0.06404729, ...,  0.00386515,
       -0.00187516,  0.01317509], dtype=float32), array([ 0.07968815,  0.09611615,  0.1505501 , ...,  0.10767274,
       -0.01174487,  0.0861977 ], dtype=float32), array([ 0.11930001,  0.20814095,  0.11819282, ...,  0.11411989,
       -0.03814263,  0.08667768], dtype=float32), array([ 0.08222433,  0.18730518,  0.1256876 , ...,  0.13999663,
       -0.03692039,  0.03269031], dtype=float32), array([ 0.08413128,  0.21557659,  0.16499318, ...,  0.10311906,
       -0.00652752,  0.09942581], dtype=float32), array([0.05093275, 0.0641183 , 0.06017646, ..., 0.02369552, 0.02415831,
       0.05558089], dtype=float32), array([ 0.12266903,  0.12232031,  0.07503469, ...,  0.07240871,
       -0.01229055,  0.07567216], dtype=float32), array([ 0.06604335,  0.0835522 ,  0.09147093, ..., -0.03448897,
       -0.00547313,  0.08544903], dtype=float32), array([ 0.08663372,  0.08553983,  0.0935206 , ..., -0.03926745,
        0.01728244,  0.01232722], dtype=float32), array([ 0.06568718,  0.14838952,  0.16995892, ...,  0.01003419,
       -0.02037438,  0.02468636], dtype=float32), array([ 0.08484852,  0.14067313,  0.10717624, ...,  0.03677572,
       -0.00443937,  0.09766243], dtype=float32), array([ 0.04133108,  0.11461961,  0.08913898, ...,  0.05170362,
       -0.03286424,  0.07004566], dtype=float32), array([ 3.4576435e-05,  1.4969958e-01,  4.8481379e-02, ...,
        3.1990262e-03, -3.0767702e-02,  8.8042118e-02], dtype=float32), array([ 0.06803977,  0.14439298,  0.06094306, ...,  0.0483034 ,
       -0.01557093,  0.05268622], dtype=float32), array([ 0.13319767,  0.1261863 ,  0.11100655, ...,  0.07530246,
       -0.01218904,  0.07231174], dtype=float32), array([ 0.09409727,  0.09918369,  0.12665096, ...,  0.05397761,
       -0.03814263,  0.03985059], dtype=float32), array([ 0.09830193,  0.11508672,  0.11163127, ...,  0.08813065,
       -0.01654953,  0.06856177], dtype=float32), array([0.06922282, 0.21324559, 0.05655153, ..., 0.02680734, 0.02438913,
       0.08483645], dtype=float32), array([ 0.06738069,  0.20695615,  0.18171494, ...,  0.06804129,
       -0.01172918,  0.03768379], dtype=float32), array([ 0.01497781,  0.17238836,  0.05877979, ...,  0.02012765,
       -0.00932472,  0.06811247], dtype=float32), array([ 0.11442353,  0.20405318,  0.13713455, ...,  0.07981509,
       -0.01395241,  0.07036401], dtype=float32), array([ 0.09908262,  0.1336963 ,  0.07783571, ...,  0.02242696,
       -0.01643741,  0.01965758], dtype=float32), array([ 0.05425529,  0.10146609,  0.14103013, ...,  0.0604753 ,
       -0.03814263,  0.04655842], dtype=float32), array([ 0.07781169,  0.07224099,  0.09418714, ...,  0.02688501,
       -0.02306077,  0.10724844], dtype=float32), array([ 0.08484852,  0.14362624,  0.10047382, ...,  0.12401534,
       -0.01040853,  0.04817724], dtype=float32), array([ 0.04298909,  0.12364838,  0.06488124, ...,  0.02124198,
       -0.00931101,  0.04385852], dtype=float32), array([0.05397682, 0.1218297 , 0.16157588, ..., 0.09522134, 0.00207924,
       0.09651301], dtype=float32), array([ 0.00863267, -0.03231706,  0.07079056, ...,  0.00386515,
       -0.01564542, -0.02892259], dtype=float32), array([ 0.15207008,  0.18805444,  0.18980092, ...,  0.03476132,
       -0.00496622,  0.02350498], dtype=float32), array([ 0.04609222,  0.06923828,  0.12757653, ..., -0.00959294,
        0.01295492,  0.01748845], dtype=float32), array([ 0.09763924,  0.05746246,  0.05792426, ...,  0.05107833,
       -0.02825841,  0.03519984], dtype=float32), array([ 0.06251205,  0.10054954,  0.16081947, ...,  0.07371749,
       -0.03814263,  0.00915436], dtype=float32), array([ 0.03891615,  0.09373395,  0.1267109 , ...,  0.00547664,
       -0.00806283,  0.00054569], dtype=float32), array([ 0.12423974,  0.084867  ,  0.13463248, ...,  0.03092972,
       -0.03814263,  0.03523901], dtype=float32), array([ 0.04081186,  0.07045457,  0.14754367, ...,  0.03005495,
       -0.00602278,  0.05467357], dtype=float32), array([ 0.05539125,  0.1185494 ,  0.06569687, ..., -0.0126889 ,
       -0.02717856,  0.01821816], dtype=float32), array([ 0.08897324,  0.08358452,  0.03828241, ..., -0.01536987,
       -0.03814263,  0.04345903], dtype=float32), array([ 0.02397518,  0.08783503,  0.13492875, ...,  0.01956045,
       -0.03814263,  0.01226905], dtype=float32), array([ 0.04099862,  0.08105878,  0.15599033, ...,  0.03070894,
       -0.01221009, -0.00743562], dtype=float32), array([0.0476603 , 0.06832608, 0.14918222, ..., 0.01539699, 0.00155232,
       0.09900418], dtype=float32), array([0.0895773 , 0.08342616, 0.20173414, ..., 0.05565548, 0.02386798,
       0.12040439], dtype=float32), array([ 0.01726334,  0.08200432,  0.09109749, ...,  0.09244665,
       -0.00532681,  0.06985086], dtype=float32), array([0.05593292, 0.16491003, 0.13782966, ..., 0.01951506, 0.0140548 ,
       0.07569373], dtype=float32), array([ 0.10558488,  0.11066268,  0.1379118 , ...,  0.0687842 ,
       -0.00577509,  0.0545323 ], dtype=float32), array([0.08836538, 0.14637907, 0.14271678, ..., 0.06906216, 0.02298532,
       0.03930344], dtype=float32), array([ 0.126492  ,  0.08632582,  0.1535294 , ...,  0.09938528,
       -0.03814263,  0.0437573 ], dtype=float32), array([ 0.05037306,  0.130006  ,  0.06377068, ...,  0.08672179,
       -0.03814263, -0.021808  ], dtype=float32), array([ 0.08750732,  0.05459988,  0.07395696, ...,  0.06436399,
       -0.03814263,  0.05085603], dtype=float32), array([ 0.11112016,  0.08601151,  0.07362539, ...,  0.08788154,
        0.01315315, -0.01443818], dtype=float32), array([ 0.03705068,  0.0747446 ,  0.10962265, ...,  0.08143803,
       -0.03584339, -0.00300805], dtype=float32), array([ 0.07149883,  0.14068954,  0.09428232, ..., -0.03926745,
       -0.03814263,  0.02006691], dtype=float32), array([0.02888144, 0.07930851, 0.13207573, ..., 0.02286668, 0.01298954,
       0.04474702], dtype=float32), array([ 0.10213376,  0.15400352,  0.08169454, ...,  0.04951099,
       -0.02681514,  0.06505787], dtype=float32), array([ 0.06149058,  0.09777215,  0.14244075, ..., -0.0005809 ,
       -0.00232458,  0.02774355], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.02420845, 0.06133142,
       0.01927945], dtype=float32), array([ 0.10558488,  0.12753703,  0.13316141, ...,  0.06907871,
       -0.01698992,  0.04691799], dtype=float32), array([ 0.11386558,  0.06699391,  0.0811441 , ..., -0.0151084 ,
       -0.03785231, -0.00476625], dtype=float32), array([ 0.05477499,  0.09630794,  0.13325566, ...,  0.08282485,
       -0.03814263,  0.03319826], dtype=float32), array([ 0.0448198 ,  0.06367143,  0.0836594 , ..., -0.03735045,
       -0.03814263,  0.06795873], dtype=float32), array([ 0.08645787,  0.07626364,  0.06793384, ...,  0.03923167,
       -0.03814263,  0.01290722], dtype=float32), array([ 0.02968117,  0.06116974,  0.01308713, ...,  0.04174259,
       -0.03514061,  0.01348449], dtype=float32), array([ 0.03507475,  0.08063287,  0.12374018, ...,  0.00621569,
        0.01357782, -0.00172263], dtype=float32), array([ 0.03755124,  0.14294566,  0.13777377, ...,  0.08175949,
       -0.01381669,  0.03261644], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.04549165, 0.06356134,
       0.01927945], dtype=float32), array([ 0.10558488,  0.07531881,  0.13316141, ...,  0.06899203,
       -0.01507561,  0.02357434], dtype=float32), array([0.08576518, 0.09175964, 0.13286252, ..., 0.01686598, 0.00403882,
       0.04984888], dtype=float32), array([ 0.07564398,  0.08293092,  0.09937647, ...,  0.03170902,
       -0.03814263,  0.02904022], dtype=float32), array([ 0.05906034,  0.18836679,  0.11147571, ...,  0.11908688,
       -0.03814263,  0.02796097], dtype=float32), array([ 0.05275091,  0.05900305,  0.12291861, ...,  0.02106831,
       -0.03814263, -0.02597314], dtype=float32), array([ 0.05770893,  0.10826097,  0.15755324, ...,  0.09877717,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.04755114,  0.04293785,  0.16898394, ...,  0.10194157,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.05907818,  0.08778394,  0.10399102, ...,  0.02131721,
       -0.00375033,  0.02984594], dtype=float32), array([0.09251843, 0.11944682, 0.19563341, ..., 0.09492623, 0.0266855 ,
       0.09403542], dtype=float32), array([ 0.05681719,  0.11070909,  0.14975175, ..., -0.00154413,
       -0.03814263, -0.00265169], dtype=float32), array([ 0.10509405,  0.13962108,  0.169213  , ...,  0.07598452,
        0.02138352, -0.00464084], dtype=float32), array([0.07908751, 0.05217166, 0.17863894, ..., 0.08349832, 0.00458443,
       0.07001193], dtype=float32), array([ 0.11154329,  0.05710877,  0.18487258, ...,  0.09665303,
       -0.03015057,  0.0822835 ], dtype=float32), array([ 0.0823365 ,  0.12936299,  0.15787415, ...,  0.04216639,
       -0.01021465,  0.02825012], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.02917957, 0.0536803 ,
       0.01927945], dtype=float32), array([ 0.10558488,  0.1201973 ,  0.13316141, ...,  0.06920481,
       -0.01899147,  0.04748207], dtype=float32), array([ 0.08682314,  0.16035514,  0.1100895 , ..., -0.00154413,
        0.02621263,  0.01877964], dtype=float32), array([ 0.07403149,  0.09029793,  0.08301459, ...,  0.11682858,
       -0.03814263,  0.02783682], dtype=float32), array([0.10085865, 0.05052872, 0.1337799 , ..., 0.0410377 , 0.01193772,
       0.07479349], dtype=float32), array([ 0.06883658,  0.13256311,  0.15614396, ...,  0.03050616,
       -0.03796535,  0.02588757], dtype=float32), array([ 8.3649792e-02,  1.4003788e-01,  1.7129116e-01, ...,
       -1.3513051e-02, -1.5475271e-04,  1.0177702e-01], dtype=float32), array([ 0.07026334,  0.10021541,  0.1792656 , ...,  0.09151173,
       -0.01143347, -0.00746236], dtype=float32), array([ 0.08484852,  0.14861953,  0.13358425, ..., -0.02230265,
       -0.03400671,  0.09014373], dtype=float32), array([ 0.04288212,  0.1628584 ,  0.09275819, ..., -0.01764143,
       -0.01918232,  0.06219047], dtype=float32), array([0.08735228, 0.15583171, 0.19333015, ..., 0.05846209, 0.00358031,
       0.03479525], dtype=float32), array([0.04276007, 0.08276037, 0.17760321, ..., 0.05306668, 0.09249227,
       0.02453583], dtype=float32), array([ 0.08416519,  0.04313573,  0.09093276, ...,  0.05306668,
        0.08328475, -0.02892259], dtype=float32), array([ 0.1050837 ,  0.06639223,  0.05494513, ...,  0.16259326,
       -0.03359268, -0.01302203], dtype=float32), array([ 0.08416519,  0.10077269,  0.10776243, ..., -0.00511506,
        0.03358733,  0.00067339], dtype=float32), array([ 0.07698821,  0.07803591,  0.12519787, ...,  0.06256687,
       -0.03814263,  0.08664464], dtype=float32), array([ 0.1321928 ,  0.12199464,  0.08273163, ...,  0.05742363,
       -0.0352064 ,  0.07566879], dtype=float32), array([ 0.0727778 ,  0.11961918,  0.11823579, ...,  0.03910372,
       -0.03120779,  0.05618702], dtype=float32), array([ 0.05171424,  0.15255061,  0.11985284, ..., -0.03926745,
        0.02933659,  0.06703546], dtype=float32), array([0.06617619, 0.10987964, 0.12570724, ..., 0.15175486, 0.01547175,
       0.07986686], dtype=float32), array([ 0.126351  ,  0.06151816,  0.10512231, ...,  0.07269067,
       -0.03814263,  0.04677429], dtype=float32), array([ 0.10897681,  0.09221081,  0.1879899 , ...,  0.07132967,
       -0.03814263,  0.1131511 ], dtype=float32), array([0.05499169, 0.04926322, 0.12104923, ..., 0.10288468, 0.01271343,
       0.06074053], dtype=float32), array([ 0.00175595,  0.07239655,  0.04122206, ...,  0.04429375,
       -0.03814263,  0.08230809], dtype=float32), array([ 0.0709524 ,  0.10243204,  0.07676063, ...,  0.05092203,
       -0.0249857 ,  0.05649034], dtype=float32), array([ 0.10758625,  0.12115274,  0.11326398, ...,  0.02855678,
       -0.02299648,  0.05549686], dtype=float32), array([ 0.05942245,  0.16220392,  0.06513431, ...,  0.00403842,
       -0.03814263,  0.00100973], dtype=float32), array([ 0.03462343,  0.06569002, -0.02357255, ..., -0.00891066,
       -0.03814263,  0.05719043], dtype=float32), array([ 0.02367993,  0.11731327,  0.07070098, ...,  0.03282117,
       -0.03814263,  0.07505313], dtype=float32), array([ 0.09139451,  0.1213074 ,  0.05202517, ...,  0.02046514,
       -0.0224293 ,  0.05549686], dtype=float32), array([ 0.06669892,  0.13002424,  0.09472754, ...,  0.07852342,
       -0.03814263,  0.05200857], dtype=float32), array([ 0.03085979,  0.16411139,  0.06656723, ..., -0.01190574,
       -0.0338017 ,  0.05825324], dtype=float32), array([ 0.04635181,  0.10974585,  0.09589692, ...,  0.00692286,
       -0.00765106,  0.0675621 ], dtype=float32), array([ 0.04339209,  0.05579249,  0.15450527, ...,  0.06967559,
       -0.01591625,  0.09143331], dtype=float32), array([ 0.09588628,  0.07439008,  0.09082685, ...,  0.04633462,
       -0.03814263,  0.08856498], dtype=float32), array([ 0.12232597,  0.07158332,  0.19603007, ...,  0.08739604,
       -0.0122683 ,  0.07326163], dtype=float32), array([ 0.02275919,  0.16411139,  0.12680823, ...,  0.06967559,
       -0.03814263,  0.06621873], dtype=float32), array([0.02369446, 0.15547168, 0.05551006, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.0260329 ,  0.03256358,  0.12072678, ...,  0.04663035,
       -0.01261347,  0.0841902 ], dtype=float32), array([ 0.01879253,  0.09798218,  0.09400927, ...,  0.03735862,
       -0.03814263,  0.09626605], dtype=float32), array([ 0.10328865,  0.08509537,  0.11506584, ...,  0.13104549,
       -0.03095129,  0.086454  ], dtype=float32), array([0.02275919, 0.16411139, 0.08834323, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.02624963,  0.03902737,  0.08861776, ...,  0.05177592,
       -0.01070801,  0.06792269], dtype=float32), array([ 0.05993937,  0.12343464,  0.10228015, ...,  0.05745545,
       -0.02224926,  0.05955847], dtype=float32), array([ 0.04551202,  0.176287  ,  0.14430583, ..., -0.03546636,
       -0.03029229, -0.00345806], dtype=float32), array([0.02275919, 0.16411139, 0.05573709, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.13070847,  0.15192609,  0.13666603, ...,  0.07619821,
       -0.01792219,  0.11983014], dtype=float32), array([ 0.09290419,  0.29323062,  0.1735278 , ...,  0.12908745,
       -0.02502481,  0.08008031], dtype=float32), array([ 0.06262758,  0.16934994,  0.16380714, ..., -0.02907247,
       -0.03814263, -0.0072329 ], dtype=float32), array([ 0.08484852,  0.16080168,  0.19612622, ...,  0.11275941,
       -0.02544033,  0.05149617], dtype=float32), array([ 0.06295563,  0.04761947,  0.16176738, ...,  0.10301219,
       -0.02559451,  0.10130759], dtype=float32), array([ 0.06540383,  0.19954015,  0.20175566, ...,  0.19391568,
       -0.02076216,  0.10526532], dtype=float32), array([ 0.03445043,  0.10518062,  0.0762269 , ...,  0.00779483,
       -0.01040095,  0.07078829], dtype=float32), array([ 0.02275919,  0.16411139,  0.06380051, ...,  0.03424048,
       -0.03018341,  0.06506533], dtype=float32), array([0.0416098 , 0.11082976, 0.12002824, ..., 0.03424048, 0.01652382,
       0.04823881], dtype=float32), array([ 0.08251766,  0.09600144,  0.09609004, ...,  0.03167634,
       -0.03814263, -0.01258131], dtype=float32), array([ 0.09196821,  0.10986441,  0.09943554, ...,  0.02369552,
       -0.02460027,  0.05558089], dtype=float32), array([0.0590032 , 0.11724192, 0.05512537, ..., 0.0118496 , 0.00709948,
       0.06796276], dtype=float32), array([ 0.07325102,  0.09853196,  0.13581274, ...,  0.01939702,
       -0.02669174,  0.10291215], dtype=float32), array([0.09908262, 0.0427498 , 0.14529076, ..., 0.05576538, 0.01908024,
       0.00908458], dtype=float32), array([-0.00823845,  0.16543354,  0.0926383 , ...,  0.19430181,
       -0.03814263,  0.06369505], dtype=float32), array([ 0.04700416,  0.1867569 ,  0.1533788 , ..., -0.01604737,
       -0.03164654,  0.06967777], dtype=float32), array([ 0.03834976,  0.07844851,  0.02640763, ...,  0.14640708,
       -0.02662517,  0.0495082 ], dtype=float32), array([ 0.11396881,  0.12684081,  0.07989192, ...,  0.16777962,
       -0.00323444,  0.06154715], dtype=float32), array([ 0.066962  ,  0.05806724,  0.14420737, ...,  0.044401  ,
       -0.03814263, -0.02581211], dtype=float32), array([0.0956309 , 0.11493645, 0.13144323, ..., 0.1011124 , 0.02415242,
       0.06114484], dtype=float32), array([ 0.06095172,  0.03615721,  0.07997877, ..., -0.02789195,
       -0.01160106, -0.02583642], dtype=float32), array([ 0.0589449 ,  0.10606927,  0.07807285, ..., -0.01849896,
       -0.03814263,  0.06512162], dtype=float32), array([ 0.0844486 ,  0.0841589 ,  0.06161225, ...,  0.03640024,
       -0.03814263,  0.07459302], dtype=float32), array([ 0.134728  ,  0.11687581,  0.12617205, ...,  0.08913621,
       -0.03216092,  0.0723759 ], dtype=float32), array([ 0.16400862,  0.15277007,  0.12280588, ...,  0.0150814 ,
       -0.00234766,  0.07265441], dtype=float32), array([ 0.10703056,  0.21124204,  0.06328084, ...,  0.04985657,
       -0.03814263,  0.0680062 ], dtype=float32), array([ 0.04762009,  0.2148328 ,  0.12129717, ...,  0.09092029,
       -0.0280107 ,  0.06125292], dtype=float32), array([ 0.06122737,  0.15811527,  0.07833301, ...,  0.00608845,
       -0.01241929,  0.04891423], dtype=float32), array([ 0.04544741,  0.10757673,  0.09371583, ...,  0.0254949 ,
       -0.03814263,  0.03512625], dtype=float32), array([0.11781666, 0.08178487, 0.09739185, ..., 0.01551077, 0.02116443,
       0.05504657], dtype=float32), array([ 0.07898492,  0.19872767,  0.07664378, ...,  0.08607066,
       -0.03814263,  0.08829124], dtype=float32), array([ 0.06262758,  0.17327708,  0.16380714, ..., -0.00763996,
       -0.03814263, -0.00437824], dtype=float32), array([ 0.0687221 ,  0.15380453,  0.06845457, ...,  0.09097259,
       -0.01556588,  0.00268409], dtype=float32), array([ 0.09737398,  0.0999466 ,  0.14459905, ..., -0.01693236,
       -0.03814263,  0.01309632], dtype=float32), array([ 0.05296021,  0.10155625,  0.11370152, ...,  0.02296354,
       -0.03663985,  0.02748565], dtype=float32), array([ 0.0550718 ,  0.14639288,  0.13693388, ...,  0.04519892,
       -0.01408176,  0.01908418], dtype=float32), array([0.06544938, 0.15666927, 0.17677858, ..., 0.00251395, 0.02656142,
       0.09256226], dtype=float32), array([ 0.0576892 ,  0.16017109,  0.10239063, ...,  0.02369552,
       -0.01513251,  0.05558089], dtype=float32), array([ 0.07149454,  0.07738895,  0.15472275, ...,  0.09967072,
       -0.00713429,  0.06205224], dtype=float32), array([ 0.05096561,  0.09975405,  0.13829494, ...,  0.0646703 ,
       -0.02517674,  0.06416072], dtype=float32), array([ 0.04118737,  0.12353454,  0.13936837, ...,  0.03409924,
       -0.00088844,  0.09719422], dtype=float32), array([0.04404324, 0.12720762, 0.04472166, ..., 0.12733658, 0.01497925,
       0.00194292], dtype=float32), array([ 0.04077566,  0.10007277,  0.10812829, ...,  0.02981298,
       -0.01748167,  0.06674401], dtype=float32), array([-0.01550015,  0.13553892, -0.03044511, ..., -0.03926745,
       -0.01199068,  0.08443667], dtype=float32), array([ 0.0711433 ,  0.05201079, -0.00176563, ..., -0.01201542,
       -0.03814263, -0.01678034], dtype=float32), array([ 0.02019117,  0.08796927, -0.03044511, ...,  0.01277419,
       -0.03814263,  0.02286086], dtype=float32), array([ 0.09262701,  0.12603025,  0.01500361, ...,  0.0041425 ,
       -0.01721946,  0.0652359 ], dtype=float32), array([ 0.01476154,  0.1353471 , -0.03044511, ...,  0.03261454,
       -0.03814263, -0.00274784], dtype=float32), array([ 0.05228613,  0.03384677,  0.00069748, ..., -0.00567655,
       -0.03814263,  0.00800889], dtype=float32), array([ 0.02378257,  0.1498467 , -0.03044511, ...,  0.0377831 ,
       -0.03814263, -0.00776624], dtype=float32), array([ 0.06511424,  0.18149021,  0.19843793, ...,  0.07084002,
       -0.03814263,  0.04690739], dtype=float32), array([ 0.09307673,  0.13291141,  0.12382974, ...,  0.02287332,
       -0.02336534,  0.04156443], dtype=float32), array([ 0.01654708,  0.13481121, -0.03044511, ...,  0.05909277,
       -0.03814263, -0.01365289], dtype=float32), array([ 0.02481831,  0.1392735 ,  0.10759261, ...,  0.04995108,
       -0.03549791,  0.08868442], dtype=float32), array([ 0.01279654,  0.12855001, -0.03044511, ...,  0.05229145,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.01591492,  0.15715592,  0.11737266, ..., -0.02002032,
       -0.02962212,  0.02767854], dtype=float32), array([ 0.02435273,  0.11231264, -0.03044511, ...,  0.05992391,
       -0.03814263, -0.02892259], dtype=float32), array([0.02376635, 0.03556767, 0.02646068, ..., 0.10632691, 0.03840991,
       0.02400864], dtype=float32), array([ 0.01860841,  0.10220166, -0.02707466, ...,  0.05086929,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.06252009,  0.09052779,  0.05622405, ...,  0.08277726,
       -0.03814263,  0.03610033], dtype=float32), array([ 0.03907557,  0.11429281,  0.00819061, ..., -0.03926745,
       -0.03814263, -0.00854429], dtype=float32), array([ 0.02979692,  0.12859468,  0.03009896, ..., -0.03926745,
       -0.01437241, -0.00642798], dtype=float32), array([-0.01988107,  0.07600649,  0.06797623, ...,  0.05777366,
        0.00432163,  0.04035112], dtype=float32), array([0.00699613, 0.13168575, 0.03224277, ..., 0.13432212, 0.00333977,
       0.06121249], dtype=float32), array([0.0574318 , 0.09437264, 0.07642394, ..., 0.03463751, 0.0022449 ,
       0.0418727 ], dtype=float32), array([ 0.08064809,  0.07947964,  0.12770635, ...,  0.13230087,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.01680276,  0.07526043,  0.04323175, ..., -0.03926745,
       -0.03814263, -0.01049163], dtype=float32), array([ 0.07598264,  0.13567737,  0.09173384, ..., -0.02745138,
        0.0189583 , -0.01430729], dtype=float32), array([ 0.10726005,  0.13412085,  0.18488626, ..., -0.00683629,
       -0.03814263,  0.06642674], dtype=float32), array([ 0.06037651,  0.08202238,  0.16370231, ...,  0.07647158,
       -0.02899953, -0.01229508], dtype=float32), array([ 0.0475829 ,  0.10219084,  0.11584309, ...,  0.08701865,
       -0.01801323,  0.0470693 ], dtype=float32), array([ 0.08847661,  0.11759412,  0.09194948, ...,  0.08651745,
       -0.03645133,  0.04095907], dtype=float32), array([0.05017384, 0.07326708, 0.11727326, ..., 0.10945997, 0.00233977,
       0.04391011], dtype=float32), array([ 0.02688095,  0.13716653,  0.07401535, ...,  0.09344514,
       -0.03814263,  0.00644236], dtype=float32), array([ 0.03481552,  0.02988851,  0.05987809, ..., -0.00465294,
       -0.03452516,  0.00991839], dtype=float32), array([ 0.08484852,  0.14766107,  0.27925816, ...,  0.03168964,
       -0.01966913,  0.01738691], dtype=float32), array([ 0.02650172,  0.13412185,  0.09889919, ..., -0.01119425,
       -0.0295766 ,  0.02892657], dtype=float32), array([ 0.05603222,  0.08225174,  0.18120885, ...,  0.083465  ,
       -0.03814263, -0.00353423], dtype=float32), array([ 0.08251766,  0.05517632,  0.13356145, ...,  0.18673562,
       -0.03814263,  0.00029763], dtype=float32), array([ 0.03920261,  0.11786988,  0.1530823 , ..., -0.03926745,
       -0.01379242,  0.01927945], dtype=float32), array([0.09510153, 0.08081179, 0.10897003, ..., 0.03460962, 0.03959017,
       0.06485603], dtype=float32), array([ 0.07874823,  0.17884706,  0.10298396, ...,  0.05464249,
       -0.02257323,  0.06351391], dtype=float32), array([ 0.08179848,  0.17447859,  0.12401593, ...,  0.01387853,
       -0.03814263,  0.02328598], dtype=float32), array([ 0.09509943,  0.19236717,  0.11837321, ..., -0.031828  ,
       -0.03697804,  0.03233077], dtype=float32), array([ 0.090388  ,  0.16259365,  0.08466899, ...,  0.09872125,
       -0.03771278,  0.05611002], dtype=float32), array([ 0.02205419,  0.13974047,  0.09178976, ...,  0.02815794,
       -0.01414806,  0.01840639], dtype=float32), array([0.08692412, 0.15785149, 0.0825119 , ..., 0.08707576, 0.04993172,
       0.11586791], dtype=float32), array([0.02150635, 0.10912733, 0.11644456, ..., 0.08746654, 0.02481652,
       0.01750685], dtype=float32), array([ 0.09794389,  0.13877003,  0.12107924, ...,  0.0783311 ,
       -0.03814263,  0.03761261], dtype=float32), array([ 0.07914004,  0.08628422,  0.17773359, ...,  0.07728365,
       -0.02109174,  0.06041912], dtype=float32), array([ 0.07771505,  0.09564464,  0.108064  , ...,  0.01213985,
       -0.03814263,  0.08720908], dtype=float32)]","[[ 0.05594638  0.16205376  0.10937195 ...  0.03669084 -0.00016758
  -0.01874486]]","[0.3783939480781555, 0.31420671939849854, 0.3819811940193176, 0.7413264214992523, 0.38300538063049316, 0.3586275577545166, 0.336714506149292, 0.3149257302284241, 0.4904508590698242, 0.3966149091720581, 0.2286093831062317, 0.35741204023361206, 0.4185914397239685, 0.28649622201919556, 0.34872788190841675, 0.3912721276283264, 0.275829553604126, 0.43112027645111084, 0.43348002433776855, 0.4155895709991455, 0.5218192338943481, 0.38914114236831665, 0.4772804379463196, 0.37484920024871826, 0.37188154458999634, 0.4060269594192505, 0.38107138872146606, 0.38206666707992554, 0.4107643961906433, 0.36136841773986816, 0.323015034198761, 0.3806290030479431, 0.4291822910308838, 0.4734901189804077, 0.38968485593795776, 0.40055954456329346, 0.349920392036438, 0.31257957220077515, 0.1770668625831604, 0.5104075074195862, 0.393974244594574, 0.41906481981277466, 0.4036816358566284, 0.39069753885269165, 0.42964911460876465, 0.4992494583129883, 0.4244857430458069, 0.550903856754303, 0.45512843132019043, 0.5258860886096954, 0.42658936977386475, 0.4037013053894043, 0.3679403066635132, 0.36797285079956055, 0.3737274408340454, 0.44463902711868286, 0.39072316884994507, 0.35755670070648193, 0.3784235715866089, 0.3542580008506775, 0.3523595929145813, 0.34924954175949097, 0.3564661145210266, 0.3489535450935364, 0.3335918188095093, 0.41862577199935913, 0.44849324226379395, 0.3384341597557068, 0.3492388129234314, 0.3955761790275574, 0.5438974499702454, 0.3726651072502136, 0.3898768424987793, 0.3796955943107605, 0.40351587533950806, 0.35726773738861084, 0.4080126881599426, 0.3567034602165222, 0.42093008756637573, 0.48558324575424194, 0.3288455009460449, 0.44245636463165283, 0.38896501064300537, 0.3556363582611084, 0.49963635206222534, 0.3580027222633362, 0.36026090383529663, 0.3472227454185486, 0.3847157955169678, 0.39483892917633057, 0.36706793308258057, 0.4233366847038269, 0.42748886346817017, 0.3761773705482483, 0.39107948541641235, 0.34884607791900635, 0.38360172510147095, 0.4345778822898865, 0.3637464642524719, 0.38901323080062866, 0.35801994800567627, 0.5411753058433533, 0.369464635848999, 0.4616696834564209, 0.4555196166038513, 0.6167721748352051, 0.5137306153774261, 0.39995115995407104, 0.3675299286842346, 0.39198732376098633, 0.3916369080543518, 0.45642709732055664, 0.411396861076355, 0.44094204902648926, 0.4280298948287964, 0.5022260546684265, 0.4627966284751892, 0.36027437448501587, 0.42985230684280396, 0.4261088967323303, 0.36429131031036377, 0.40113967657089233, 0.3821118474006653, 0.40497052669525146, 0.3955546021461487, 0.3985093832015991, 0.4684428572654724, 0.3915119171142578, 0.38492047786712646, 0.37348121404647827, 0.44780194759368896, 0.34465163946151733, 0.47636979818344116, 0.39467954635620117, 0.40671318769454956, 0.33695322275161743, 0.3769228458404541, 0.3851880431175232, 0.3829132914543152, 0.3864791989326477, 0.49626076221466064, 0.5486970543861389, 0.4211670160293579, 0.35480231046676636, 0.3592294454574585, 0.347495436668396, 0.36163508892059326, 0.388438880443573, 0.408786416053772, 0.3878275156021118, 0.47862809896469116, 0.37237226963043213, 0.4358595013618469, 0.429848313331604, 0.5444670915603638, 0.3651338815689087, 0.3775983452796936, 0.36672860383987427, 0.4017871618270874, 0.3779098391532898, 0.3821257948875427, 0.31852585077285767, 0.4172636866569519, 0.36733072996139526, 0.342165470123291, 0.3919706344604492, 0.3168744444847107, 0.3516882658004761, 0.41306614875793457, 0.35837340354919434, 0.316622793674469, 0.3363596796989441, 0.5049313902854919, 0.36183851957321167, 0.2930852770805359, 0.4706037640571594, 0.3957722783088684, 0.41506391763687134, 0.45492058992385864, 0.38345909118652344, 0.3570738434791565, 0.5683101415634155, 0.44291919469833374, 0.42203038930892944, 0.3845868706703186, 0.42513400316238403, 0.43202489614486694, 0.36671876907348633, 0.3721854090690613, 0.3777163028717041, 0.3664194941520691, 0.35373711585998535, 0.39825505018234253, 0.3682171702384949, 0.36765730381011963, 0.4616019129753113, 0.3533617854118347, 0.394436776638031, 0.31280773878097534, 0.45577389001846313, 0.3611653447151184, 0.5859265029430389, 0.3807463049888611, 0.4704780578613281, 0.43004608154296875, 0.5138879418373108, 0.39564478397369385, 0.3457179069519043, 0.3834717869758606, 0.3593119978904724, 0.422329306602478, 0.4321489930152893, 0.38393187522888184, 0.5196233093738556, 0.5118536949157715, 0.5151770114898682, 0.3605615496635437, 0.37836557626724243, 0.36680787801742554, 0.4320271611213684, 0.3769910931587219, 0.40641433000564575, 0.353748083114624, 0.40806496143341064, 0.3607707619667053, 0.4987261891365051, 0.4248003363609314, 0.371192991733551, 0.3381733298301697, 0.3936665654182434, 0.34523653984069824, 0.4461468458175659, 0.3593762516975403, 0.31317824125289917, 0.28780698776245117, 0.4943210482597351, 0.32769155502319336, 0.37111425399780273, 0.3849131464958191, 0.4130772352218628, 0.3260940909385681, 0.4317532181739807, 0.32177460193634033, 0.4281964898109436, 0.39221030473709106, 0.3887695074081421, 0.38704073429107666, 0.42114365100860596, 0.41285598278045654, 0.3655439019203186, 0.6079523861408234, 0.4013279676437378, 0.4183429479598999, 0.3985634446144104, 0.3777156472206116, 0.47765642404556274, 0.4335275888442993, 0.45765477418899536, 0.45957833528518677, 0.3968876600265503, 0.4013860821723938, 0.4357384443283081, 0.4041284918785095, 0.42526620626449585, 0.36777031421661377, 0.4257799983024597, 0.40467703342437744, 0.4609670042991638, 0.37477195262908936, 0.3799949884414673, 0.3884800672531128, 0.5440385639667511, 0.4009936451911926, 0.35372740030288696, 0.3869321942329407, 0.4268781542778015, 0.3792910575866699, 0.37884950637817383, 0.4564305543899536, 0.38721799850463867, 0.3971593976020813, 0.382183313369751, 0.35286492109298706, 0.4700068235397339, 0.3558473587036133, 0.4298919439315796, 0.3668786287307739, 0.38616758584976196, 0.35529786348342896, 0.3941834568977356, 0.39050573110580444, 0.3701317310333252, 0.3808494806289673, 0.39863574504852295, 0.4108268618583679, 0.3788376450538635, 0.3960961103439331, 0.4076823592185974, 0.3847629427909851, 0.4232402443885803, 0.5446997284889221, 0.34007954597473145, 0.39369481801986694, 0.3890429139137268, 0.36289602518081665, 0.35286152362823486, 0.3746313452720642, 0.3553834557533264, 0.34321337938308716, 0.35184985399246216, 0.3584444522857666, 0.34871453046798706, 0.6724527776241302, 0.48228609561920166, 1.0796626582741737, 0.3952412009239197, 1.0775877237319946, 0.4591321349143982, 1.064393699169159, 0.3611997365951538, 0.323050856590271, 1.0251314789056778, 0.3648446798324585, 1.02236720174551, 0.3374294638633728, 1.0259409341961145, 0.4016343951225281, 1.0280795954167843, 0.41211432218551636, 0.520624965429306, 0.4267253875732422, 0.3873475193977356, 0.36636143922805786, 0.4043286442756653, 0.36667340993881226, 0.5455829501152039, 0.4647883176803589, 0.4133474826812744, 0.36756861209869385, 0.42800289392471313, 0.37038350105285645, 0.3467586040496826, 0.36882972717285156, 0.4476723074913025, 0.4177236557006836, 0.4296616315841675, 0.38450348377227783, 0.34944361448287964, 0.3597281575202942, 0.4103606343269348, 0.4173755645751953, 0.4133877754211426, 0.42967259883880615, 0.38419777154922485, 0.3397356867790222, 0.3792080879211426, 0.36226886510849, 0.34849393367767334, 0.33220839500427246, 0.3701857924461365]",38
"17MA
NI
PUL
ATING
 IMAGE
SIf you have a digital camera or even if 
you
 just upload photos from your phone 
to
 Facebook, you probably cross paths with 
digital image ˜les all the time. You may know 
how to use basic graphics software, such as Microsoft 
Paint or Paintbrush, or even more advanced applica
-tions such as Adobe Photoshop. But if you need to 
edit a massive number of images, editing them by 
hand can be a lengthy, boring job.
Enter Python. Pillow is a third-party Python module for interacting 
with image ˜les. The module has several functions that make it easy to 
crop, resize, and edit the content of an image. With the power to manipu
-late images the same way you would with software such as Microsoft Paint 
or Adobe Photoshop, Python can automatically edit hundreds or thousands 
of images with ease.
 388
   Chapter 17
Computer 
Ima
ge 
Fun
damentals
In order to manipulate an image, you need to understand the basics of how 
computers deal with colors and coordinates in images and how you can 
work with colors and coordinates in Pillow. But before you continue, install 
the 
pillow module. See Appendix A for help installing third-party modules.
Colors and RGBA Values
Computer programs often represent a color in an image as an 
RGBA value
. An RGBA value is a group of numbers that specify the amount of red, green, 
blue, and 
alpha
 (or transparency) in a color. Each of these component values 
is an integer from 
0 (none at all) to 
255 (the maximum). These RGBA values 
are assigned to individual 
pixel
s; a pixel is the smallest dot of a single color 
the computer screen can show (as you can imagine, there are millions of 
pixels on a screen). A pixel™s RGB setting tells it precisely what shade of 
color it should display. Images also have an alpha value to create RGBA 
values. If an image is displayed on the screen over a background image 
or desktop wallpaper, the alpha value determines how much of the back-
ground you can ﬁsee throughﬂ the image™s pixel.
In Pillow, RGBA values are represented by a tuple of four integer values. 
For example, the color red is represented by 
(255, 0, 0, 255). This color has 
the maximum amount of red, no green or blue, and the maximum alpha 
value, meaning it is fully opaque. Green is represented by 
(0, 255, 0, 255), and blue is 
(0, 0, 255, 255). White, the combination of all colors, is 
(255, 255, 255, 255), while black, which has no color at all, is 
(0, 0, 0, 255).If a color has an alpha value of 
0, it is invisible, and it doesn™t really mat-
ter what the RGB values are. After all, invisible red looks the same as invis-
ible black. 
Pillow uses the standard color names that HTML uses. Table 17-1 lists a 
selection of standard color names and their values.
Table 17-1: 
Standard Color Names and Their RGBA Values
Name
RG
BA v
alue
Name
RG
BA v
alue
White
(255, 255, 255, 255)Red
(255, 0, 0, 255)Green
(0, 128, 0, 255)Blue
(0, 0, 255, 255)Gray
(128, 128, 128, 255)Yellow
(255, 255, 0, 255)Black
(0, 0, 0, 255)Purple
(128, 0, 128, 255)Pillow offers the 
ImageColor.getcolor() function so you don™t have to 
memorize RGBA values for the colors you want to use. This function takes 
a color name string as its ˜rst argument, and the string 
'RGBA' as its second 
argument, and it returns an RGBA tuple. 
 Manipulating Images
   389
To see how this function works, enter the following into the interactive 
shell:
 >>> from PIL import ImageColor >>> ImageColor.getcolor('red', 'RGBA')(255, 0, 0, 255) >>> ImageColor.getcolor('RED', 'RGBA')(255, 0, 0, 255)>>> ImageColor.getcolor('Black', 'RGBA')(0, 0, 0, 255)>>> ImageColor.getcolor('chocolate', 'RGBA')(210, 105, 30, 255)>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')(100, 149, 237, 255)First, you need to import the 
ImageColor module from PIL 
 (not 
from
 Pillow; you™ll see why in a moment). The color name string you pass 
to
 ImageColor.getcolor() is case insensitive, so passing 
'red'  and passing 
'RED'  give you the same RGBA tuple. You can also pass more unusual 
color names, like 
'chocolate' and 
'Cornflower Blue'.Pillow supports a huge number of color names, from 
'aliceblue' to 
'whitesmoke'. You can ˜nd the full list of more than 100 standard color 
names in the resources at 
http://nostarch.com/automatestuff/
. Coordinates and Box Tuples
Image pixels are addressed with x- and y-coordinates, which respectively 
specify a pixel™s horizontal and vertical location in an image. The 
origin
 is 
the pixel at the top-left corner of the image and is speci˜ed with the nota-
tion (0, 0). The ˜rst zero represents the x-coordinate, which starts at zero 
at the origin and increases going from left to right. The second zero repre-
sents the y-coordinate, which starts at zero at the origin and increases going 
CMYK
 AND RGB COL
ORING
In grade school you learned that mixing red, yellow, and blue paints can 
form other colors; for example, you can mix blue and yellow to make green 
paint
. This is known as the 
subtractive color model
, and it applies to dyes, inks, 
and pigments
. This is why color printers have 
CMYK
 ink cartridges: the 
Cyan
 (blue), 
Magenta
 (red), 
Yellow
, and 
blacK
 ink can be mixed together to form any 
color
.Ho
wever, the physics of light uses what™s called an 
additive color model
. Wh
en combining light (such as the light given off by your computer screen), 
red, green, and blue light can be combined to form any other color
. This is why 
RGB
 values represent color in computer programs
. 390
   Chapter 17
down the image. This bears repeating: 
y-coordinates increase going downward, 
which is the opposite of how you may 
remember y-coordinates being used in 
math class. Figure 17-1 demonstrates how 
this coordinate system works.
Many of Pillow™s functions and 
 me
thods take a 
box tuple
 argument. This 
means Pillow is expecting a tuple of four 
integer coordinates that represent a rect-
angular region in an image. The four 
integers are, in order, as follows:
Left
: The x-coordinate of the leftmost 
edge of the box.
Top
: The y-coordinate of the top edge 
of the box.
Right
: The x-coordinate of one pixel 
to the right of the rightmost edge of 
the box. This integer must be greater 
than the left integer.
Bottom
: The y-coordinate of one pixel 
lower than the bottom edge of the 
box. This integer must be greater 
than the top integer.
Note that the box includes the left 
and top coordinates and goes up to but 
does not include the right and bottom 
coordinates. For example, the box tuple  
(3, 1, 9, 6) represents all the pixels in 
the
 black box in Figure 17-2.
Manipulating 
Ima
ges with Pillow
Now that you know how colors and coordinates work in Pillow, let™s use 
Pillow to manipulate an image. Figure 17-3 is the image that will be used 
for all the interactive shell examples in this chapter. You can download it 
from 
http://nostarch.com/automatestuff/
.Once you have the image ˜le 
Zophie.png
 in your current working direc-
tory, you™ll be ready to load the image of Zophie into Python, like so:
>>> from PIL import Image>>> catIm = Image.open('zophie.png')Figure 17-2: 
The area represented 
by the box tuple 
(3, 1, 9, 6)x increasesy increases(0,0)(27,26)Figure 17-1: The x- and y-coordinates 
of a 27×26 image of some sort of 
ancient data storage device
 Manipulating Images
   391
Figure 17-3: My cat Zophie. The camera  
adds 10 pounds (which is a lot for a cat).
To load the image, you import the 
Image module from Pillow and call 
Image.open(), passing it the image™s ˜lename. You can then store the loaded 
image in a variable like 
CatIm. The module name of Pillow is 
PIL to make it 
backward compatible with an older module called Python Imaging Library, 
which is why you must run 
from PIL import Image instead of 
from Pillow import Image. Because of the way Pillow™s creators set up the 
pillow module, you must 
use the 
from PIL import Image form of 
import statement, rather than simply 
import PIL.If the image ˜le isn™t in the current working directory, change the 
working directory to the folder that contains the image ˜le by calling the 
os.chdir() function.
>>> import os>>> os.chdir('C:\\folder_with_image_file')The 
Image.open() function returns a value of the 
Image object data type, 
which is how Pillow represents an image as a Python value. You can load an 
Image object from an image ˜le (of any format) by passing the 
Image.open() function a string of the ˜lename. Any changes you make to the 
Image object can be saved to an image ˜le (also of any format) with the 
save() method. All the rotations, resizing, cropping, drawing, and other image 
manipulations will be done through method calls on this 
Image object.
To shorten the examples in this chapter, I™ll assume you™ve imported 
Pillow™s 
Image module and that you have the Zophie image stored in a variable 
named 
catIm. Be sure that the 
zophie.png
 ˜le is in the current working direc-
tory so that the 
Image.open() function can ˜nd it. Otherwise, you will also have 
to specify the full absolute path in the string argument to 
Image.open(). 392
   Chapter 17
Working with the Image Data Type
An 
Image object has several useful attributes that give you basic information 
about the image ˜le it was loaded from: its width and height, the ˜lename, 
and the graphics format (such as JPEG, GIF, or PNG). 
For example, enter the following into the interactive shell:
>>> from PIL import Image>>> catIm = Image.open('zophie.png')>>> catIm.size (816, 1088) >>> width, height = catIm.size >>> width816 >>> height1088>>> catIm.filename'zophie.png'>>> catIm.format'PNG'>>> catIm.format_description'Portable network graphics' >>> catIm.save('zophie.jpg')After making an 
Image object from 
Zophie.png
 and storing the 
Image object in 
catIm, we can see that the object™s 
size attribute contains a tuple 
of the image™s width and height in pixels 
. We can assign the values in the 
tuple to 
width and 
height variables 
 in order to access with width 
 and 
height 
 individually. The 
filename attribute describes the original ˜le™s 
name. The 
format and 
format_description attributes are strings that describe 
the image format of the original ˜le (with 
format_description being a bit 
more verbose).
Finally, calling the 
save() method and passing it 
'zophie.jpg' saves a new 
image with the ˜lename 
zophie.jpg
 to your hard drive 
. Pillow sees that
 the 
˜le extension is 
.jpg
 and automatically saves the image using the JPEG image 
format. Now you should have two images, 
zophie.png
 and 
zophie.jpg
, on your 
hard drive. While these ˜les are based on the same image, they are not iden
-tical because of their different formats.
Pillow also provides the 
Image.new() function, which returns an 
Image objectŠmuch like 
Image.open(), except the image represented by 
Image.new()™s 
object will be blank. The arguments to 
Image.new() are as follows:
The string 
'RGBA', which sets the color mode to RGBA. (There are other 
modes that this book doesn™t go into.)
The size, as a two-integer tuple of the new image™s width and height.
 Manipulating Images
   393
The background color that the image should start with, as a four-
integer tuple of an RGBA value. You can use the return value of 
the
 ImageColor.getcolor() function for this argument. Alternatively, 
Image.new() also supports just passing the string of the standard 
color
 name.
For example, enter the following into the interactive shell:
>>> from PIL import Image >>> im = Image.new('RGBA', (100, 200), 'purple')>>> im.save('purpleImage.png') >>> im2 = Image.new('RGBA', (20, 20))>>> im2.save('transparentImage.png')Here we create an 
Image object for an image that™s 100 pixels wide and 
200 pixels tall, with a purple background 
. This image is then saved to 
the ˜le 
purpleImage.png
. We call 
Image.new() again to create another 
Image object, this time passing (20, 20) for the dimensions and nothing for the 
background color 
. Invisible black, 
(0, 0, 0, 0), is the default color used if 
no color argument is speci˜ed, so the second image has a transparent back-
ground; we save this 20×20 transparent square in 
transparentImage.png
.Cropping Images
Cropping
 an image means selecting a rectangular region inside an image 
and removing everything outside the rectangle. The 
crop() method on 
Image objects takes a box tuple and returns an 
Image object representing 
the cropped image. The cropping does not happen in placeŠthat is, the 
original 
Image object is left untouched, and the 
crop() method returns a 
new 
Image object. Remeber that a boxed tupleŠin this case, the cropped 
se
ctionŠincludes the left column and top row of pixels but only goes up 
to
 and does 
not include the right column and bottom row of pixels.
Enter the following into the interactive shell:
>>> croppedIm = catIm.crop((335, 345, 565, 560))>>> croppedIm.save('cropped.png')This makes a new 
Image object for the cropped image, stores the 
object
 in croppedIm, and then calls 
save() on 
croppedIm to save the cropped 
image in 
cropped.png
. The new ˜le 
cropped.png
 will be created from the ori
-gi
nal image, like in Figure 17-4.
 394
   Chapter 17
     Figure 17-4: The new image will be just the cropped  
section of the original image.
Copying and Pasting Images onto Other Images
The 
copy() method will return a new 
Image object with the same image 
as the 
Image object it was called on. This is useful if you need to make 
changes to an image but also want to keep an untouched version of the 
original. For example, enter the following into the interactive shell:
>>> catIm = Image.open('zophie.png')>>> catCopyIm = catIm.copy()The 
catIm and 
catCopyIm variables contain two separate 
Image objects, 
which both have the same image on them. Now that you have an 
Image object stored in 
catCopyIm, you can modify 
catCopyIm as you like and save 
it to
 a new ˜lename, leaving 
zophie.png
 untouched. For example, let™s try 
 modifying 
catCopyIm with the 
paste() method.
The 
paste() method is called on an 
Image object and pastes another image 
on top of it. Let™s continue the shell example by pasting a smaller image onto 
catCopyIm.>>> faceIm = catIm.crop((335, 345, 565, 560))>>> faceIm.size(230, 215)>>> catCopyIm.paste(faceIm, (0, 0))>>> catCopyIm.paste(faceIm, (400, 500))>>> catCopyIm.save('pasted.png') Manipulating Images
   395
First we pass 
crop() a box tuple for the rectangular area in 
zophie.png
 that contains Zophie™s face. This creates an 
Image object representing a 
230×215 crop, which we store in 
faceIm. Now we can paste 
faceIm onto 
 catCopyIm. The 
paste() method takes two arguments: a ﬁsourceﬂ 
Image object
 and a tuple of the x- and y-coordinates where you want to paste 
the top-left corner of the source 
Image object onto the main 
Image object. 
Here
 we call 
paste() twice on 
catCopyIm, passing (0, 0) the ˜rst time and 
(400, 500) the second time. This pastes 
faceIm onto 
catCopyIm twice: once 
with the top-left corner of 
faceIm at (0, 0) on 
catCopyIm, and once with 
the top-left corner of 
faceIm at (400, 500). Finally, we save the modi˜ed 
 catCopyIm to 
pasted.png
. The 
pasted.png
 image looks like Figure 17-5.
Figure 17-5: Zophie the cat, with her face  
pasted twice
NOTE
 Despite their names, the 
copy() and 
paste() methods in Pillow do not use your com-
puter™s clipboard.
Note that the 
paste() method modi˜es its 
Image object 
in place
; it does 
not return an 
Image object with the pasted image. If you want to call 
paste() but also keep an untouched version of the original image around, you™ll 
need to ˜rst copy the image and then call 
paste() on that copy.
Say you want to tile Zophie™s head across the entire image, as in 
Figure 17-6. You can achieve this effect with just a couple 
for loops. 
Continue the interactive shell example by entering the following:
>>> catImWidth, catImHeight = catIm.size>>> faceImWidth, faceImHeight = faceIm.size >>> catCopyTwo = catIm.copy() 396   Chapter 17
 >>> for left in range(0, catImWidth, faceImWidth):         for top in range(0, catImHeight, faceImHeight):            print(left, top)            catCopyTwo.paste(faceIm, (left, top))0 00 2150 4300 6450 8600 1075230 0230 215--snip--690 860690 1075>>> catCopyTwo.save('tiled.png')Here we store the width of height of 
catIm in 
catImWidth and 
 catImHeight. At 
 we make a copy of 
catIm and store it in 
catCopyTwo. Now 
that
 we have a copy that we can paste onto, we start looping to paste 
faceIm onto 
 catCopyTwo. The outer 
for loop™s 
left variable starts at 0 and increases by 
 faceImWidth(230) . The inner 
for loop™s 
top variable start at 0 and
 increases 
by faceImHeight(215) . These nested 
for loops
 produce values for 
left and 
top to paste a grid of 
faceIm images over the 
catCopyTwo Image object, as in 
Figure 17-6. To see our nested loops working, we print 
left and 
top. After 
the pasting is complete, we save the modi˜ed 
catCopyTwo to 
tiled.png
.Figure 17-6: Nested 
for loops used  
with 
paste() to duplicate the cat™s face  
(a dupli-cat, if you will).
 Manipulating Images
   397
Resizing an Image
The 
resize() method is called on an 
Image object and returns a new 
Image object of the speci˜ed width and height. It accepts a two-integer tuple argu-
ment, representing the new width and height of the returned image. Enter 
the following into the interactive shell:
 >>> width, height = catIm.size >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))>>> quartersizedIm.save('quartersized.png') >>> svelteIm = catIm.resize((width, height + 300))>>> svelteIm.save('svelte.png')Here we assign the two values in the 
catIm.size tuple to the variables 
width and 
height . Using 
width and 
height instead of 
catIm.size[0] and 
 catIm.size[1] makes the rest of the code more readable.
The ˜rst 
resize() call passes 
int(width / 2) for the new width and 
int(height / 2) for the new height 
, so the 
Image object returned from 
resize() will be half the length and width of the original image, or one-
quarter of the original image size overall. The 
resize() method accepts 
only integers in its tuple argument, which is why you needed to wrap both 
divisions by 
2 in an 
int() call.
This resizing keeps the same proportions for the width and height. But 
the new width and height passed to 
resize() do not have to be proportional 
to the original image. The 
svelteIm variable contains an 
Image object that 
has the original width but a height that is 300 pixels taller 
, giving Zophie 
a more slender look.
Note that the 
resize() method does not edit the 
Image object in place 
but instead returns a new 
Image object.
PAS
TING 
TRANSP
ARE
NT PIXEL
SNormally transparent pixels are pasted as white pixels
. If the image you want 
to paste has transparent pixels, pass the 
Image object as the third argument 
so that a solid rectangle isn™t pasted
. This third argument is the ﬁmaskﬂ 
Image object
. A mask is an 
Image object where the alpha value is signi˜cant, but the 
red, green, and blue values are ignored
. The mask tells the 
paste() function 
which pixels it should copy and which it should leave transparent
. Advanced 
usage of masks is beyond this book, but if you want to paste an image that has 
transparent pixels, pass the 
Image object again as the third argument
. 398
   Chapter 17
Rotating and Flipping Images
Images can be rotated with the 
rotate() method, which returns a new 
Image object of the rotated image and leaves the original 
Image object unchanged. 
The argument to 
rotate() is a single integer or ˚oat representing the num-
ber of degrees to rotate the image counterclockwise. Enter the following 
into the interactive shell:
>>> catIm.rotate(90).save('rotated90.png')>>> catIm.rotate(180).save('rotated180.png')>>> catIm.rotate(270).save('rotated270.png')Note how you can 
chain
 method calls by calling 
save() directly on the 
Image object returned from 
rotate(). The ˜rst 
rotate() and 
save() call makes 
a new 
Image object representing the image rotated counterclockwise by 
90
 degrees and saves the rotated image to 
rotated90.png
. The second and 
third calls do the same, but with 180 degress and 270 degress. The results 
look like Figure 17-7.
Figure 17-7: The original image (left) and the image rotated counterclockwise by 90, 180, 
and 270 degrees
Notice that the width and height of the image change when the image 
is rotated 90 or 270 degrees. If you rotate an image by some other amount, 
the original dimensions of the image are maintained. On Windows, a 
black background is used to ˜ll in any gaps made by the rotation, like in 
Figure
 17-8. On OS X, transparent pixels are used for the gaps instead.
The 
rotate() method has an optional 
expand keyword argument that can 
be set to 
True to enlarge the dimensions of the image to ˜t the entire rotated 
new image. For example, enter the following into the interactive shell:
>>> catIm.rotate(6).save('rotated6.png')>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')The ˜rst call rotates the image 6 degrees and saves it to 
rotate6.png
 (see 
the image on the left of Figure 17-8). The second call rotates the image 6 
degrees with 
expand set to 
True and saves it to 
rotate6_expanded.png
 (see the 
image on the right of Figure 17-8).
 Manipulating Images
   399
    Figure 17-8: The image rotated 6 degrees normally (left) and with 
expand=True (right)
You can also get a ﬁmirror ˚ipﬂ of an image with the 
transpose() method. 
You must pass either 
Image.FLIP_LEFT_RIGHT or 
Image.FLIP_TOP_BOTTOM to the 
transpose() method. Enter the following into the interactive shell:
>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')Like 
rotate(), transpose() creates a new 
Image object. Here was pass 
Image.FLIP_LEFT_RIGHT to ˚ip the image horizontally and then save the result 
to 
horizontal_˜ip.png
. To ˚ip the image vertically, we pass 
Image.FLIP_TOP_BOTTOM and save to 
vertical_˜ip.png
. The results look like Figure 17-9.
Figure 17-9: The original image (left), horizontal ˜ip (center), and vertical ˜ip (right)
 400
   Chapter 17
Changing Individual Pixels
The color of an individual pixel can be retrieved or set with the 
getpixel() and 
putpixel() methods. These methods both take a tuple representing the 
x- and y-coordinates of the pixel. The 
putpixel() method also takes an addi-
tional tuple argument for the color of the pixel. This color argument is a 
four-integer RGBA tuple or a three-integer RGB tuple. Enter the following 
into the interactive shell:
 >>> im = Image.new('RGBA', (100, 100)) >>> im.getpixel((0, 0))(0, 0, 0, 0) >>> for x in range(100):        for y in range(50):             im.putpixel((x, y), (210, 210, 210))>>> from PIL import ImageColor >>> for x in range(100):        for y in range(50, 100):             im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))>>> im.getpixel((0, 0))(210, 210, 210, 255)>>> im.getpixel((0, 50))(169, 169, 169, 255)>>> im.save('putPixel.png')At 
 we make a new image that is a 100×100 transparent square. 
Ca
lling 
getpixel() on some coordinates in this image returns 
(0, 0, 0, 0) because the image is transparent 
. To c
olor pixels in this image, we can 
use nested 
for loops to go through all the pixels in the top half of the 
image
  and color each pixel using 
putpixel() . Here we pass 
putpixel() the RGB tuple 
(210, 210, 210), a light gray.
Say we want to color the bottom half of the image dark gray but don™t 
know the RGB tuple for dark gray. The 
putpixel() method doesn™t accept a 
standard color name like 
'darkgray', so you have to use 
ImageColor.getcolor() to get a color tuple from 
'darkgray'. Loop through 
the pixels in the bottom half of the image 
 and pass 
putpixel() the return value of 
ImageColor.getcolor() , an
d you should now have an image that is light gray 
in
 its top half and dark gray in the bottom half, as 
shown in Figure 17-10. You can call 
getpixel() on some 
coordinates to con˜rm that the color at any given 
pixel is what you expect. Finally, save the image to 
 put
Pixel.png
.Of course, drawing one pixel at a time onto 
an image isn™t very convenient. If you need to draw 
shapes, use the 
ImageDraw functions explained later 
in
 this chapter.
Figure 17-10: 
The 
 putPixel
.png
 image 
 Manipulating Images
   401
Project: Adding a 
Log
oSay you have the boring job of resizing thousands 
of images and adding a small logo watermark to 
the corner of each. Doing this with a basic graph-
ics program such as Paintbrush or Paint would 
take forever. A fancier graphics application such 
as Photoshop can do batch processing, but that 
software costs hundreds of dollars. Let™s write a 
script to do it instead.
Say that Figure 17-11 is the logo you want to 
add to the bottom-right corner of each image: a 
black cat icon with a white border, with the rest 
of
 the image transparent.
At a high level, here™s what the program 
should do:
Load the logo image.
Loop over all 
.png
 and
.jpg
 ˜les in the working directory.
Check whether the image is wider or taller than 300 pixels.
If so, reduce the width or height (whichever is larger) to 300 pixels and 
scale down the other dimension proportionally.
Paste the logo image into the corner.
Save the altered images to another folder.
This means the code will need to do the following:
Open the 
catlogo.png
 ˜le as an 
Image object.
Loop over the strings returned from 
os.listdir('.').Get the width and height of the image from the 
size attribute.
Calculate the new width and height of the resized image.
Call the 
resize() method to resize the image.
Call the 
paste() method to paste the logo.
Call the 
save() method to save the changes, using the original ˜lename.
Step 1: Open the Logo Image
For this project, open a new ˜le editor window, enter the following code, 
and save it as 
resizeAndAddLogo.py
:#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.Figure 17-11: The logo to be 
added to the image.
 402
   Chapter 17
import osfrom PIL import Image SQUARE_FIT_SIZE = 300 LOGO_FILENAME = 'catlogo.png' logoIm = Image.open(LOGO_FILENAME) logoWidth, logoHeight = logoIm.size# TODO: Loop over all files in the working directory.# TODO: Check if image needs to be resized.# TODO: Calculate the new width and height to resize to.# TODO: Resize the image.# TODO: Add the logo.# TODO: Save changes.By setting up the 
SQUARE_FIT_SIZE  and 
LOGO_FILENAME  constants at the 
start of the program, we™ve made it easy to change the program later. Say 
the logo that you™re adding isn™t the cat icon, or say you™re reducing the out-
put images™ largest dimension to something other than 300 
 pi
xels. With these 
constants at the start of the program, you can just open the code, change 
those values once, and you™re done. (Or you can make it so that the values 
for these constants are taken from the command line arguments.) Without 
these constants, you™d instead have to search the code for all instances of 
300 and 
'catlogo.png' and replace them with the values for your new project. 
In short, using constants makes your program more generalized.
The logo 
Image object is returned from 
Image.open() . For readability, 
logoWidth and 
logoHeight are assigned to the values from 
logoIm.size .The rest of the program is a skeleton of 
TODO comments for now.
Step 2: Loop Over All Files and Open Images
Now you need to ˜nd every 
.png
 ˜le and 
.jpg
 ˜le in the current working 
directory. Note that you don™t want to add the logo image to the logo image 
itself, so the program should skip any image with a ˜lename that™s the same 
as 
LOGO_FILENAME. Add the following to your code:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip-- Manipulating Images
   403
os.makedirs('withLogo', exist_ok=True)# Loop over all files in the working directory. for filename in os.listdir('.'):     if not (filename.endswith('.png') or filename.endswith('.jpg')) \       or filename == LOGO_FILENAME:         continue    # skip non-image files and the logo file itself     im = Image.open(filename)    width, height = im.size--snip--First, the 
os.makedirs() call creates a 
withLogo
 folder to store the ˜n-
ished images with logos, instead of overwriting the original image ˜les. 
The 
exist_ok=True keyword argument will keep 
os.makedirs() from raising 
an exception if 
withLogo
 already exists. While looping through all the ˜les 
in the working directory with 
os.listdir('.') , the long 
if statement 
 checks whether each ˜lename doesn™t end with 
.png
 or 
.jpg
. If
 soŠor if the 
˜le is the logo image itselfŠthen the loop should skip it and use 
continue  to go to the next ˜le. If 
filename does
 end with 
'.png' or 
'.jpg' (and isn™t the 
logo ˜le), you can open it as an 
Image object 
 and set 
width and 
height.Step 3: Resize the Images
The program should resize the image only if the width or height is larger 
than 
SQUARE_FIT_SIZE (300 pixels, in this case), so put all of the resizing code 
inside an 
if statement that checks the 
width and 
height variables. Add the 
following code to your program:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip--    # Check if image needs to be resized.    if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:        # Calculate the new width and height to resize to.        if width > height:             height = int((SQUARE_FIT_SIZE / width) * height)            width = SQUARE_FIT_SIZE        else:             width = int((SQUARE_FIT_SIZE / height) * width)            height = SQUARE_FIT_SIZE        # Resize the image.        print('Resizing %s...' % (filename))         im = im.resize((width, height))--snip-- 404
   Chapter 17
If the image does need to be resized, you need to ˜nd out whether it is 
a wide or tall image. If 
width is greater than 
height, then the height should 
be reduced by the same proportion that the width would be reduced 
. This proportion is the 
SQUARE_FIT_SIZE value divided by the current width. 
The new 
height value is this proportion multiplied by the current 
height value. Since the division operator returns a ˚oat value and 
resize() requires 
the dimensions to be integers, remember to convert the result to an integer 
with the 
int() function. Finally, the new 
width value will simply be set to 
SQUARE_FIT_SIZE.If the 
height is greater than or equal to the 
width (both cases are handled 
in the 
else clause), then the same calculation is done, except with the 
height and 
width variables swapped 
.Once 
width and 
height contain the new image dimensions, pass them to 
the 
resize() method and store the returned 
Image object in 
im .Step 4: Add the Logo and Save the Changes
Whether or not the image was resized, the logo should still be pasted to the 
bottom-right corner. Where exactly the logo should be pasted depends on 
both the size of the image and the size of the logo. Figure 17-12 shows how 
to calculate the pasting position. The left coordinate for where to paste the 
logo will be the image width minus the logo width; the top coordinate for 
where to paste the logo will be the image height minus the logo height.
ImageLogo widthLogo heightLogoImage widthImage heightFigure 17-12: The left and top coordinates for 
placing the logo in the bottom-right corner 
should be the image width/height minus the 
logo width/height.
After your code pastes the logo into the image, it should save the modi-
˜ed 
Image object. Add the following to your program:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image Manipulating Images
   405
--snip--    # Check if image needs to be resized.    --snip--    # Add the logo.     print('Adding logo to %s...' % (filename))     im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)    # Save changes.     im.save(os.path.join('withLogo', filename))The new code prints a message telling the user that the logo is being 
added 
, pastes 
logoIm onto 
im at the calculated coordinates 
, and saves 
the changes to a ˜lename in the 
withLogo
 directory 
. When you run this 
program with the 
zophie.png
 ˜le as the only image in the working directory, 
the output will look like this:
Resizing zophie.png...Adding logo to zophie.png...The image 
zophie.png
 will be changed to a 225×300-pixel image that 
looks like Figure 17-13. Remember that the 
paste() method will not paste 
the transparency pixels if you do not pass the 
logoIm for the third argument 
as well. This program can automatically resize and ﬁlogo-ifyﬂ hundreds of 
images in just a couple minutes.
    Figure 17-13: The image 
zophie
.png
 resized and the logo added (left). If you forget the 
third argument, the transparent pixels in the logo will be copied as solid white pixels (right).
 406
   Chapter 17
Ideas for Similar Programs
Being able to composite images or modify image sizes in a batch can be 
useful in many applications. You could write similar programs to do the 
following:
Add text or a website URL to images.
Add timestamps to images.
Copy or move images into different folders based on their sizes.
Add a mostly transparent watermark to an image to prevent others 
from copying it.
Drawing on 
Ima
ges
If you need to draw lines, rectangles, circles, or other simple shapes on 
an
 image, use Pillow™s 
ImageDraw module. Enter the following into the inter-
active shell:
>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im)First, we import 
Image and 
ImageDraw. Then we create a new image, in this 
case, a 200×200 white image, and store the 
Image object in 
im. We pass the 
Image object to the 
ImageDraw.Draw() function to receive an 
ImageDraw object. 
This object has several methods for drawing shapes and text onto an 
Image object. Store the 
ImageDraw object in a variable like 
draw so you can use it eas-
ily in the following example.
Drawing Shapes
The following ImageDraw methods draw various kinds of shapes on the 
image. The 
fill and 
outline parameters for these methods are optional and 
will default to white if left unspeci˜ed.
Points
The 
point(xy, fill) method draws individual pixels. The 
xy argument 
represents a list of the points you want to draw. The list can be a list of 
x- and y-coordinate tuples, such as 
[(x, y), (x, y), ...], or a list of x- and 
y-
 co
ordinates without tuples, such as 
[x1, y1, x2, y2, ...]. The 
fill argu
-ment is the color of the points and is either an RGBA tuple or a string of 
a color name, such as 
'red'. The 
fill argument is optional.
Lines
The 
line(xy, fill, width) method draws a line or series of lines. 
xy is either 
a list of tuples, such as 
[(x, y), (x, y), ...], or a list of integers, such as 
[x1, y1, x2, y2, ...]. Each point is one of the connecting points on the 
 Manipulating Images
   407
lines you™re drawing. The optional 
fill argument is the color of the lines, 
as
 an RGBA tuple or color name. The optional 
width argument is the width 
of the lines and defaults to 1 if left unspeci˜ed.
Rec
tangles
The 
rectangle(xy, fill, outline) method draws a rectangle. The 
xy argu
-ment is a box tuple of the form 
(left, top, right, bottom). The 
left and 
top values specify the x- and y-coordinates of the upper-left corner of the rect-
angle, while 
right and 
bottom specify the lower-right corner. The optional 
fill argument is the color that will ˜ll the inside of the rectangle. The 
optional 
outline argument is the color of the rectangle™s outline.
Ellipses
The 
ellipse(xy, fill, outline) method draws an ellipse. If the width and 
height of the ellipse are identical, this method will draw a circle. The 
xy argument is a box tuple (
left, top, right, bottom) that represents a box that 
precisely contains the ellipse. The optional 
fill argument is the color of the 
inside of the ellipse, and the optional 
outline argument is the color of the 
ellipse™s outline.
Polygons
The 
polygon(xy, fill, outline) method draws an arbitrary polygon. The 
xy argument is a list of tuples, such as 
[(x, y), (x, y), ...], or integers, such 
as 
[x1, y1, x2, y2, ...], representing the connecting points of the polygon™s 
sides. The last pair of coordinates will be automatically connected to the 
˜rst pair. The optional 
fill argument is the color of the inside of the poly-
gon, and the optional 
outline argument is the color of the polygon™s outline.
Drawing Example
Enter the following into the interactive shell:
>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im) >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black') >>> draw.rectangle((20, 30, 60, 60), fill='blue') >>> draw.ellipse((120, 30, 160, 60), fill='red') >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown') >>> for i in range(100, 200, 10):        draw.line([(i, 0), (200, i - 100)], fill='green')>>> im.save('drawing.png')After making an 
Image object for a 200×200 white image, passing it to 
ImageDraw.Draw() to get an 
ImageDraw object, and storing the 
ImageDraw object 
in 
draw, you can call drawing methods on 
draw. Here we make a thin, black 
 408   Chapter 17
outline at the edges of the image 
, a bl
ue rectangle with its top-left corner 
at (20, 30) and bottom-right corner at (60, 60) 
, a red e
llipse de˜ned by a 
box from (120, 30) to (160, 60) 
, a bro
wn polygon with ˜ve points 
, an
d a pattern of green lines drawn with a 
for loop 
. The resulting 
drawing.png
 ˜le will look like Figure 17-14.
Figure 17-14: The resulting 
drawing
.png
  image
There are several other shape-drawing methods for 
ImageDraw objects. 
The full documentation is available at 
http://pillow.readthedocs.org/en/latest/
reference/ImageDraw.html
.Drawing Text
The 
ImageDraw object also has a 
text() method for drawing text onto an 
image. The 
text() method takes four arguments: 
xy, text, fill, and 
font.The 
xy argument is a two-integer tuple specifying the upper-left corner 
of the text box.
The 
text argument is the string of text you want to write.
The optional 
fill argument is the color of the text.
The optional 
font argument is an 
ImageFont object, used to set the type-
face and size of the text. This is described in more detail in the next 
section.
Since it™s often hard to know in advance what size a block of text will 
be in a given font, the 
ImageDraw module also offers a 
textsize() method. 
Its ˜rst argument is the string of text you want to measure, and its second 
argument is an optional 
ImageFont object. The 
textsize() method will then 
return a two-integer tuple of the width and height that the text in the given 
 Manipulating Images
   409
font would be if it were written onto the image. You can use this width and 
height to help you calculate exactly where you want to put the text on your 
image.
The ˜rst three arguments for 
text() are straightforward. Before we use 
text() to draw text onto an image, let™s look at the optional fourth argument, 
the 
ImageFont object.
Both 
text() and 
textsize() take an optional 
ImageFont object as their 
˜nal arguments. To create one of these objects, ˜rst run the following:
>>> from PIL import ImageFontNow that you™ve imported Pillow™s 
ImageFont module, you can call the 
ImageFont.truetype() function, which takes two arguments. The ˜rst argu-
ment is a string for the font™s 
TrueType ˚le
Šthis is the actual font ˜le that 
lives on your hard drive. A TrueType ˜le has the 
.ttf
 ˜le extension and can 
usually be found in the following folders:
On Windows: 
C:\Windows\Fonts
On OS X: 
/Library/Fonts
 and 
/System/Library/Fonts
On Linux: 
/usr/share/fonts/truetype
You don™t actually need to enter these paths as part of the TrueType 
˜le string because Python knows to automatically search for fonts in these 
directories. But Python will display an error if it is unable to ˜nd the font 
you speci˜ed.
The second argument to 
ImageFont.truetype() is an integer for the font 
size in 
points
 (rather than, say, pixels). Keep in mind that Pillow creates 
PNG images that are 72 pixels per inch by default, and a point is 1/72 of 
an inch.
Enter the following into the interactive shell, replacing 
FONT_FOLDER with 
the actual folder name your operating system uses:
>>> from PIL import Image, ImageDraw, ImageFont>>> import os >>> im = Image.new('RGBA', (200, 200), 'white') >>> draw = ImageDraw.Draw(im) >>> draw.text((20, 150), 'Hello', fill='purple')>>> fontsFolder = 'FONT_FOLDER' # e.g. ‚/Library/Fonts™ >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32) >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)>>> im.save('text.png')After importing 
Image, ImageDraw, ImageFont, and 
os, we make an 
Image object for a new 200×200 white image 
 and make an 
ImageDraw object from 
the 
Image object 
. We u
se 
text() to draw 
Hello
 at (20, 150) in purple
 . We 
didn™t pass the optional fourth argument in this 
text() call, so the typeface 
and size of this text aren™t customized.
 410
   Chapter 17
To set a typeface and size, we ˜rst 
store the folder name (like 
/Library/
Fonts
) in 
fontsFolder. Then we call 
ImageFont.truetype(), passing it the 
.ttf
 ˜le for the font we want, followed by 
an integer font size 
. St
ore the 
Font object you get from 
ImageFont.truetype() in a variable like 
arialFont, and then 
pass the
 variable to 
text() in the ˜nal 
keyword argument. The 
text() call at
  dr
aws 
Howdy
 at (100, 150) in gray in 
32-point Arial.
The resulting 
text.png
 ˜le will look 
like Figure 17-15.
Summary
Images consist of a collection of pixels, and each pixel has an RGBA value 
for its color and its addressable by x- and y-coordinates. Two common image 
formats are JPEG and PNG. The 
pillow module can handle both of these 
image formats and others.
When an image is loaded into an 
Image object, its width and height 
dimensions are stored as a two-integer tuple in the 
size attribute. Objects of the 
Image data type also have methods for common image manipulations: 
crop(), copy(), paste(), resize(), rotate(), and 
transpose(). To save the 
Image object to 
an image ˜le, call the 
save() method.
If you want your program to draw shapes onto an image, use 
ImageDraw methods to draw points, lines, rectangles, ellipses, and polygons. The mod-
ule also provides methods for drawing text in a typeface and font size of 
your choosing.
Although advanced (and expensive) applications such as Photoshop 
provide automatic batch processing features, you can use Python scripts to 
do many of the same modi˜cations for free. In the previous chapters, you 
wrote Python programs to deal with plaintext ˜les, spreadsheets, PDFs, and 
other formats. With the 
pillow module, you™ve extended your programming 
powers to processing images as well!
Practice Questions
1. What is an RGBA value?
2. Ho
w can you get the RGBA value of 
'CornflowerBlue' from the 
Pillow module?
3. Wh
at is a box tuple?
4.
 Wh
at function returns an 
Image object for, say, an image ˜le named 
zophie.png
?Figure 17-15: The resulting 
text
.png
 image
 Manipulating Images
   411
5. How can you ˜nd out the width and height of an 
Image object™s image?
6.
 Wh
at method would you call to get 
Image object for a 100×100 image, 
excluding the lower left quarter of it?
7. Af
ter making changes to an 
Image object, how could you save it as an 
image ˜le?
8.
 Wh
at module contains Pillow™s shape-drawing code?
9. Image objects do not have drawing methods. What kind of object does? 
How do you get this kind of object?
Practice Projects
For practice, write programs that do the following.
Extending and Fixing the Chapter Project Programs
The 
resizeAndAddLogo.py
 program in this chapter works with PNG and JPEG 
˜les, but Pillow supports many more formats than just these two. Extend 
resizeAndAddLogo.py
 to process GIF 
and BMP images as well.
Another small issue is that the 
program modi˜es PNG and JPEG 
˜les only if their ˜le extensions are 
set in lowercase. For example, it will 
process 
zophie.png
 but not 
zophie.PNG
. Change the code so that the ˜le 
extension check is case insensitive.
Finally, the logo added to the 
bottom-right corner is meant to be 
just a small mark, but if the image is 
about the same size as the logo itself, 
the result will look like Figure 17-16. 
Modify 
resizeAndAddLogo.py
 so that 
the image must be at least twice the 
width and height of the logo image 
before the logo is pasted. Other
 wi
se, 
it should skip adding the logo.
Identifying Photo Folders on the Hard Drive
I have a bad habit of transferring ˜les from my digital camera to temporary 
folders somewhere on the hard drive and then forgetting about these fold-
ers. It would be nice to write a program that could scan the entire hard 
drive and ˜nd these leftover ﬁphoto folders.ﬂ
Write a program that goes through every folder on your hard drive and 
˜nds potential photo folders. Of course, ˜rst you™ll have to de˜ne what you 
consider a ﬁphoto folderﬂ to be; let™s say that it™s any folder where more than 
half of the ˜les are photos. And how do you de˜ne what ˜les are photos? 
Figure 17-16: When the image isn™t much 
larger than the logo, the results look ugly.
 412   Chapter 17
First, a photo ˜le must have the ˜le extension 
.png
 or 
.jpg
. Also, photos 
are large images; a photo ˜le™s width and height must both be larger than 
500
 pixels. This is a safe bet, since most digital camera photos are several 
thousand pixels in width and height. 
As a hint, here™s a rough skeleton of what this program might look like:
#! python3# Import modules and write comments to describe this program.for foldername, subfolders, filenames in os.walk('C:\\'):    numPhotoFiles = 0    numNonPhotoFiles = 0    for filename in filenames:        # Check if file extension isn't .png or .jpg.        if TODO:            numNonPhotoFiles += 1            continue    # skip to next filename        # Open image file using Pillow.        # Check if width & height are larger than 500.        if TODO:            # Image is large enough to be considered a photo.            numPhotoFiles += 1        else:            # Image is too small to be a photo.            numNonPhotoFiles += 1    # If more than half of files were photos,    # print the absolute path of the folder.    if TODO:        print(TODO)When the program runs, it should print the absolute path of any photo 
folders to the screen.
Custom Seating Cards
Chapter 13 included a practice project to create custom invitations from 
a list of guests in a plaintext ˜le. As an additional project, use the 
 pillow module to create images for custom seating cards for your guests. For 
each of the guests listed in the 
guests.txt
 ˜le from the resources at 
http://
nostarch.com/automatestuff/
, generate an image ˜le with the guest name and 
some ˚owery decoration. A public domain ˚ower image is available in the 
resources at 
http://nostarch.com/automatestuff/
.To ensure that each seating card is the same size, add a black rectangle 
on the edges of the invitation image so that when the image is printed out, 
there will be a guideline for cutting. The PNG ˜les that Pillow produces are 
set to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel 
image.
",How RGBA values are represented in Pillow?,"['17MA\nNI\nPUL\nATING\n IMAGE\nSIf you have a digital camera or even if \nyou\n just upload photos from your phone \nto\n Facebook, you probably cross paths with \ndigital image ˜les all the time.', 'You may know \nhow to use basic graphics software, such as Microsoft \nPaint or Paintbrush, or even more advanced applica\n-tions such as Adobe Photoshop.', 'But if you need to \nedit a massive number of images, editing them by \nhand can be a lengthy, boring job.', 'Enter Python.', 'Pillow is a third-party Python module for interacting \nwith image ˜les.', 'The module has several functions that make it easy to \ncrop, resize, and edit the content of an image.', 'With the power to manipu\n-late images the same way you would with software such as Microsoft Paint \nor Adobe Photoshop, Python can automatically edit hundreds or thousands \nof images with ease.', '388\n   Chapter 17\nComputer \nIma\nge \nFun\ndamentals\nIn order to manipulate an image, you need to understand the basics of how \ncomputers deal with colors and coordinates in images and how you can \nwork with colors and coordinates in Pillow.', 'But before you continue, install \nthe \npillow module.', 'See Appendix A for help installing third-party modules.', 'Colors and RGBA Values\nComputer programs often represent a color in an image as an \nRGBA value\n.', 'An RGBA value is a group of numbers that specify the amount of red, green, \nblue, and \nalpha\n (or transparency) in a color.', 'Each of these component values \nis an integer from \n0 (none at all) to \n255 (the maximum).', 'These RGBA values \nare assigned to individual \npixel\ns; a pixel is the smallest dot of a single color \nthe computer screen can show (as you can imagine, there are millions of \npixels on a screen).', 'A pixel™s RGB setting tells it precisely what shade of \ncolor it should display.', 'Images also have an alpha value to create RGBA \nvalues.', 'If an image is displayed on the screen over a background image \nor desktop wallpaper, the alpha value determines how much of the back-\nground you can ﬁsee throughﬂ the image™s pixel.', 'In Pillow, RGBA values are represented by a tuple of four integer values.', 'For example, the color red is represented by \n(255, 0, 0, 255).', 'This color has \nthe maximum amount of red, no green or blue, and the maximum alpha \nvalue, meaning it is fully opaque.', 'Green is represented by \n(0, 255, 0, 255), and blue is \n(0, 0, 255, 255).', 'White, the combination of all colors, is \n(255, 255, 255, 255), while black, which has no color at all, is \n(0, 0, 0, 255).If a color has an alpha value of \n0, it is invisible, and it doesn™t really mat-\nter what the RGB values are.', 'After all, invisible red looks the same as invis-\nible black.', 'Pillow uses the standard color names that HTML uses.', 'Table 17-1 lists a \nselection of standard color names and their values.', 'Table 17-1: \nStandard Color Names and Their RGBA Values\nName\nRG\nBA v\nalue\nName\nRG\nBA v\nalue\nWhite\n(255, 255, 255, 255)Red\n(255, 0, 0, 255)Green\n(0, 128, 0, 255)Blue\n(0, 0, 255, 255)Gray\n(128, 128, 128, 255)Yellow\n(255, 255, 0, 255)Black\n(0, 0, 0, 255)Purple\n(128, 0, 128, 255)Pillow offers the \nImageColor.getcolor() function so you don™t have to \nmemorize RGBA values for the colors you want to use.', ""This function takes \na color name string as its ˜rst argument, and the string \n'RGBA' as its second \nargument, and it returns an RGBA tuple."", ""Manipulating Images\n   389\nTo see how this function works, enter the following into the interactive \nshell:\n >>> from PIL import ImageColor >>> ImageColor.getcolor('red', 'RGBA')(255, 0, 0, 255) >>> ImageColor.getcolor('RED', 'RGBA')(255, 0, 0, 255)>>> ImageColor.getcolor('Black', 'RGBA')(0, 0, 0, 255)>>> ImageColor.getcolor('chocolate', 'RGBA')(210, 105, 30, 255)>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')(100, 149, 237, 255)First, you need to import the \nImageColor module from PIL \n (not \nfrom\n Pillow; you™ll see why in a moment)."", ""The color name string you pass \nto\n ImageColor.getcolor() is case insensitive, so passing \n'red'  and passing \n'RED'  give you the same RGBA tuple."", ""You can also pass more unusual \ncolor names, like \n'chocolate' and \n'Cornflower Blue'.Pillow supports a huge number of color names, from \n'aliceblue' to \n'whitesmoke'."", 'You can ˜nd the full list of more than 100 standard color \nnames in the resources at \nhttp://nostarch.com/automatestuff/\n.', 'Coordinates and Box Tuples\nImage pixels are addressed with x- and y-coordinates, which respectively \nspecify a pixel™s horizontal and vertical location in an image.', 'The \norigin\n is \nthe pixel at the top-left corner of the image and is speci˜ed with the nota-\ntion (0, 0).', 'The ˜rst zero represents the x-coordinate, which starts at zero \nat the origin and increases going from left to right.', 'The second zero repre-\nsents the y-coordinate, which starts at zero at the origin and increases going \nCMYK\n AND RGB COL\nORING\nIn grade school you learned that mixing red, yellow, and blue paints can \nform other colors; for example, you can mix blue and yellow to make green \npaint\n.', 'This is known as the \nsubtractive color model\n, and it applies to dyes, inks, \nand pigments\n.', 'This is why color printers have \nCMYK\n ink cartridges: the \nCyan\n (blue), \nMagenta\n (red), \nYellow\n, and \nblacK\n ink can be mixed together to form any \ncolor\n.Ho\nwever, the physics of light uses what™s called an \nadditive color model\n.', 'Wh\nen combining light (such as the light given off by your computer screen), \nred, green, and blue light can be combined to form any other color\n.', 'This is why \nRGB\n values represent color in computer programs\n.', '390\n   Chapter 17\ndown the image.', 'This bears repeating: \ny-coordinates increase going downward, \nwhich is the opposite of how you may \nremember y-coordinates being used in \nmath class.', 'Figure 17-1 demonstrates how \nthis coordinate system works.', 'Many of Pillow™s functions and \n me\nthods take a \nbox tuple\n argument.', 'This \nmeans Pillow is expecting a tuple of four \ninteger coordinates that represent a rect-\nangular region in an image.', 'The four \nintegers are, in order, as follows:\nLeft\n: The x-coordinate of the leftmost \nedge of the box.', 'Top\n: The y-coordinate of the top edge \nof the box.', 'Right\n: The x-coordinate of one pixel \nto the right of the rightmost edge of \nthe box.', 'This integer must be greater \nthan the left integer.', 'Bottom\n: The y-coordinate of one pixel \nlower than the bottom edge of the \nbox.', 'This integer must be greater \nthan the top integer.', 'Note that the box includes the left \nand top coordinates and goes up to but \ndoes not include the right and bottom \ncoordinates.', 'For example, the box tuple  \n(3, 1, 9, 6) represents all the pixels in \nthe\n black box in Figure 17-2.', 'Manipulating \nIma\nges with Pillow\nNow that you know how colors and coordinates work in Pillow, let™s use \nPillow to manipulate an image.', 'Figure 17-3 is the image that will be used \nfor all the interactive shell examples in this chapter.', ""You can download it \nfrom \nhttp://nostarch.com/automatestuff/\n.Once you have the image ˜le \nZophie.png\n in your current working direc-\ntory, you™ll be ready to load the image of Zophie into Python, like so:\n>>> from PIL import Image>>> catIm = Image.open('zophie.png')Figure 17-2: \nThe area represented \nby the box tuple \n(3, 1, 9, 6)x increasesy increases(0,0)(27,26)Figure 17-1: The x- and y-coordinates \nof a 27×26 image of some sort of \nancient data storage device\n Manipulating Images\n   391\nFigure 17-3: My cat Zophie."", 'The camera  \nadds 10 pounds (which is a lot for a cat).', 'To load the image, you import the \nImage module from Pillow and call \nImage.open(), passing it the image™s ˜lename.', 'You can then store the loaded \nimage in a variable like \nCatIm.', 'The module name of Pillow is \nPIL to make it \nbackward compatible with an older module called Python Imaging Library, \nwhich is why you must run \nfrom PIL import Image instead of \nfrom Pillow import Image.', 'Because of the way Pillow™s creators set up the \npillow module, you must \nuse the \nfrom PIL import Image form of \nimport statement, rather than simply \nimport PIL.If the image ˜le isn™t in the current working directory, change the \nworking directory to the folder that contains the image ˜le by calling the \nos.chdir() function.', "">>> import os>>> os.chdir('C:\\\\folder_with_image_file')The \nImage.open() function returns a value of the \nImage object data type, \nwhich is how Pillow represents an image as a Python value."", 'You can load an \nImage object from an image ˜le (of any format) by passing the \nImage.open() function a string of the ˜lename.', 'Any changes you make to the \nImage object can be saved to an image ˜le (also of any format) with the \nsave() method.', 'All the rotations, resizing, cropping, drawing, and other image \nmanipulations will be done through method calls on this \nImage object.', 'To shorten the examples in this chapter, I™ll assume you™ve imported \nPillow™s \nImage module and that you have the Zophie image stored in a variable \nnamed \ncatIm.', 'Be sure that the \nzophie.png\n ˜le is in the current working direc-\ntory so that the \nImage.open() function can ˜nd it.', 'Otherwise, you will also have \nto specify the full absolute path in the string argument to \nImage.open().', '392\n   Chapter 17\nWorking with the Image Data Type\nAn \nImage object has several useful attributes that give you basic information \nabout the image ˜le it was loaded from: its width and height, the ˜lename, \nand the graphics format (such as JPEG, GIF, or PNG).', ""For example, enter the following into the interactive shell:\n>>> from PIL import Image>>> catIm = Image.open('zophie.png')>>> catIm.size (816, 1088) >>> width, height = catIm.size >>> width816 >>> height1088>>> catIm.filename'zophie.png'>>> catIm.format'PNG'>>> catIm.format_description'Portable network graphics' >>> catIm.save('zophie.jpg')After making an \nImage object from \nZophie.png\n and storing the \nImage object in \ncatIm, we can see that the object™s \nsize attribute contains a tuple \nof the image™s width and height in pixels \n."", 'We can assign the values in the \ntuple to \nwidth and \nheight variables \n in order to access with width \n and \nheight \n individually.', 'The \nfilename attribute describes the original ˜le™s \nname.', 'The \nformat and \nformat_description attributes are strings that describe \nthe image format of the original ˜le (with \nformat_description being a bit \nmore verbose).', ""Finally, calling the \nsave() method and passing it \n'zophie.jpg' saves a new \nimage with the ˜lename \nzophie.jpg\n to your hard drive \n."", 'Pillow sees that\n the \n˜le extension is \n.jpg\n and automatically saves the image using the JPEG image \nformat.', 'Now you should have two images, \nzophie.png\n and \nzophie.jpg\n, on your \nhard drive.', 'While these ˜les are based on the same image, they are not iden\n-tical because of their different formats.', 'Pillow also provides the \nImage.new() function, which returns an \nImage objectŠmuch like \nImage.open(), except the image represented by \nImage.new()™s \nobject will be blank.', ""The arguments to \nImage.new() are as follows:\nThe string \n'RGBA', which sets the color mode to RGBA."", '(There are other \nmodes that this book doesn™t go into.)', 'The size, as a two-integer tuple of the new image™s width and height.', 'Manipulating Images\n   393\nThe background color that the image should start with, as a four-\ninteger tuple of an RGBA value.', 'You can use the return value of \nthe\n ImageColor.getcolor() function for this argument.', 'Alternatively, \nImage.new() also supports just passing the string of the standard \ncolor\n name.', ""For example, enter the following into the interactive shell:\n>>> from PIL import Image >>> im = Image.new('RGBA', (100, 200), 'purple')>>> im.save('purpleImage.png') >>> im2 = Image.new('RGBA', (20, 20))>>> im2.save('transparentImage.png')Here we create an \nImage object for an image that™s 100 pixels wide and \n200 pixels tall, with a purple background \n."", 'This image is then saved to \nthe ˜le \npurpleImage.png\n.', 'We call \nImage.new() again to create another \nImage object, this time passing (20, 20) for the dimensions and nothing for the \nbackground color \n.', 'Invisible black, \n(0, 0, 0, 0), is the default color used if \nno color argument is speci˜ed, so the second image has a transparent back-\nground; we save this 20×20 transparent square in \ntransparentImage.png\n.Cropping Images\nCropping\n an image means selecting a rectangular region inside an image \nand removing everything outside the rectangle.', 'The \ncrop() method on \nImage objects takes a box tuple and returns an \nImage object representing \nthe cropped image.', 'The cropping does not happen in placeŠthat is, the \noriginal \nImage object is left untouched, and the \ncrop() method returns a \nnew \nImage object.', 'Remeber that a boxed tupleŠin this case, the cropped \nse\nctionŠincludes the left column and top row of pixels but only goes up \nto\n and does \nnot include the right column and bottom row of pixels.', ""Enter the following into the interactive shell:\n>>> croppedIm = catIm.crop((335, 345, 565, 560))>>> croppedIm.save('cropped.png')This makes a new \nImage object for the cropped image, stores the \nobject\n in croppedIm, and then calls \nsave() on \ncroppedIm to save the cropped \nimage in \ncropped.png\n."", 'The new ˜le \ncropped.png\n will be created from the ori\n-gi\nnal image, like in Figure 17-4.', '394\n   Chapter 17\n     Figure 17-4: The new image will be just the cropped  \nsection of the original image.', 'Copying and Pasting Images onto Other Images\nThe \ncopy() method will return a new \nImage object with the same image \nas the \nImage object it was called on.', 'This is useful if you need to make \nchanges to an image but also want to keep an untouched version of the \noriginal.', ""For example, enter the following into the interactive shell:\n>>> catIm = Image.open('zophie.png')>>> catCopyIm = catIm.copy()The \ncatIm and \ncatCopyIm variables contain two separate \nImage objects, \nwhich both have the same image on them."", 'Now that you have an \nImage object stored in \ncatCopyIm, you can modify \ncatCopyIm as you like and save \nit to\n a new ˜lename, leaving \nzophie.png\n untouched.', 'For example, let™s try \n modifying \ncatCopyIm with the \npaste() method.', 'The \npaste() method is called on an \nImage object and pastes another image \non top of it.', ""Let™s continue the shell example by pasting a smaller image onto \ncatCopyIm.>>> faceIm = catIm.crop((335, 345, 565, 560))>>> faceIm.size(230, 215)>>> catCopyIm.paste(faceIm, (0, 0))>>> catCopyIm.paste(faceIm, (400, 500))>>> catCopyIm.save('pasted.png') Manipulating Images\n   395\nFirst we pass \ncrop() a box tuple for the rectangular area in \nzophie.png\n that contains Zophie™s face."", 'This creates an \nImage object representing a \n230×215 crop, which we store in \nfaceIm.', 'Now we can paste \nfaceIm onto \n catCopyIm.', 'The \npaste() method takes two arguments: a ﬁsourceﬂ \nImage object\n and a tuple of the x- and y-coordinates where you want to paste \nthe top-left corner of the source \nImage object onto the main \nImage object.', 'Here\n we call \npaste() twice on \ncatCopyIm, passing (0, 0) the ˜rst time and \n(400, 500) the second time.', 'This pastes \nfaceIm onto \ncatCopyIm twice: once \nwith the top-left corner of \nfaceIm at (0, 0) on \ncatCopyIm, and once with \nthe top-left corner of \nfaceIm at (400, 500).', 'Finally, we save the modi˜ed \n catCopyIm to \npasted.png\n.', 'The \npasted.png\n image looks like Figure 17-5.', 'Figure 17-5: Zophie the cat, with her face  \npasted twice\nNOTE\n Despite their names, the \ncopy() and \npaste() methods in Pillow do not use your com-\nputer™s clipboard.', 'Note that the \npaste() method modi˜es its \nImage object \nin place\n; it does \nnot return an \nImage object with the pasted image.', 'If you want to call \npaste() but also keep an untouched version of the original image around, you™ll \nneed to ˜rst copy the image and then call \npaste() on that copy.', 'Say you want to tile Zophie™s head across the entire image, as in \nFigure 17-6.', 'You can achieve this effect with just a couple \nfor loops.', ""Continue the interactive shell example by entering the following:\n>>> catImWidth, catImHeight = catIm.size>>> faceImWidth, faceImHeight = faceIm.size >>> catCopyTwo = catIm.copy() 396   Chapter 17\n >>> for left in range(0, catImWidth, faceImWidth):         for top in range(0, catImHeight, faceImHeight):            print(left, top)            catCopyTwo.paste(faceIm, (left, top))0 00 2150 4300 6450 8600 1075230 0230 215--snip--690 860690 1075>>> catCopyTwo.save('tiled.png')Here we store the width of height of \ncatIm in \ncatImWidth and \n catImHeight."", 'At \n we make a copy of \ncatIm and store it in \ncatCopyTwo.', 'Now \nthat\n we have a copy that we can paste onto, we start looping to paste \nfaceIm onto \n catCopyTwo.', 'The outer \nfor loop™s \nleft variable starts at 0 and increases by \n faceImWidth(230) .', 'The inner \nfor loop™s \ntop variable start at 0 and\n increases \nby faceImHeight(215) .', 'These nested \nfor loops\n produce values for \nleft and \ntop to paste a grid of \nfaceIm images over the \ncatCopyTwo Image object, as in \nFigure 17-6.', 'To see our nested loops working, we print \nleft and \ntop.', 'After \nthe pasting is complete, we save the modi˜ed \ncatCopyTwo to \ntiled.png\n.Figure 17-6: Nested \nfor loops used  \nwith \npaste() to duplicate the cat™s face  \n(a dupli-cat, if you will).', 'Manipulating Images\n   397\nResizing an Image\nThe \nresize() method is called on an \nImage object and returns a new \nImage object of the speci˜ed width and height.', 'It accepts a two-integer tuple argu-\nment, representing the new width and height of the returned image.', ""Enter \nthe following into the interactive shell:\n >>> width, height = catIm.size >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))>>> quartersizedIm.save('quartersized.png') >>> svelteIm = catIm.resize((width, height + 300))>>> svelteIm.save('svelte.png')Here we assign the two values in the \ncatIm.size tuple to the variables \nwidth and \nheight ."", 'Using \nwidth and \nheight instead of \ncatIm.size[0] and \n catIm.size[1] makes the rest of the code more readable.', 'The ˜rst \nresize() call passes \nint(width / 2) for the new width and \nint(height / 2) for the new height \n, so the \nImage object returned from \nresize() will be half the length and width of the original image, or one-\nquarter of the original image size overall.', 'The \nresize() method accepts \nonly integers in its tuple argument, which is why you needed to wrap both \ndivisions by \n2 in an \nint() call.', 'This resizing keeps the same proportions for the width and height.', 'But \nthe new width and height passed to \nresize() do not have to be proportional \nto the original image.', 'The \nsvelteIm variable contains an \nImage object that \nhas the original width but a height that is 300 pixels taller \n, giving Zophie \na more slender look.', 'Note that the \nresize() method does not edit the \nImage object in place \nbut instead returns a new \nImage object.', 'PAS\nTING \nTRANSP\nARE\nNT PIXEL\nSNormally transparent pixels are pasted as white pixels\n.', 'If the image you want \nto paste has transparent pixels, pass the \nImage object as the third argument \nso that a solid rectangle isn™t pasted\n.', 'This third argument is the ﬁmaskﬂ \nImage object\n.', 'A mask is an \nImage object where the alpha value is signi˜cant, but the \nred, green, and blue values are ignored\n.', 'The mask tells the \npaste() function \nwhich pixels it should copy and which it should leave transparent\n.', 'Advanced \nusage of masks is beyond this book, but if you want to paste an image that has \ntransparent pixels, pass the \nImage object again as the third argument\n.', '398\n   Chapter 17\nRotating and Flipping Images\nImages can be rotated with the \nrotate() method, which returns a new \nImage object of the rotated image and leaves the original \nImage object unchanged.', 'The argument to \nrotate() is a single integer or ˚oat representing the num-\nber of degrees to rotate the image counterclockwise.', ""Enter the following \ninto the interactive shell:\n>>> catIm.rotate(90).save('rotated90.png')>>> catIm.rotate(180).save('rotated180.png')>>> catIm.rotate(270).save('rotated270.png')Note how you can \nchain\n method calls by calling \nsave() directly on the \nImage object returned from \nrotate()."", 'The ˜rst \nrotate() and \nsave() call makes \na new \nImage object representing the image rotated counterclockwise by \n90\n degrees and saves the rotated image to \nrotated90.png\n.', 'The second and \nthird calls do the same, but with 180 degress and 270 degress.', 'The results \nlook like Figure 17-7.', 'Figure 17-7: The original image (left) and the image rotated counterclockwise by 90, 180, \nand 270 degrees\nNotice that the width and height of the image change when the image \nis rotated 90 or 270 degrees.', 'If you rotate an image by some other amount, \nthe original dimensions of the image are maintained.', 'On Windows, a \nblack background is used to ˜ll in any gaps made by the rotation, like in \nFigure\n 17-8.', 'On OS X, transparent pixels are used for the gaps instead.', 'The \nrotate() method has an optional \nexpand keyword argument that can \nbe set to \nTrue to enlarge the dimensions of the image to ˜t the entire rotated \nnew image.', ""For example, enter the following into the interactive shell:\n>>> catIm.rotate(6).save('rotated6.png')>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')The ˜rst call rotates the image 6 degrees and saves it to \nrotate6.png\n (see \nthe image on the left of Figure 17-8)."", 'The second call rotates the image 6 \ndegrees with \nexpand set to \nTrue and saves it to \nrotate6_expanded.png\n (see the \nimage on the right of Figure 17-8).', 'Manipulating Images\n   399\n    Figure 17-8: The image rotated 6 degrees normally (left) and with \nexpand=True (right)\nYou can also get a ﬁmirror ˚ipﬂ of an image with the \ntranspose() method.', 'You must pass either \nImage.FLIP_LEFT_RIGHT or \nImage.FLIP_TOP_BOTTOM to the \ntranspose() method.', ""Enter the following into the interactive shell:\n>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')Like \nrotate(), transpose() creates a new \nImage object."", 'Here was pass \nImage.FLIP_LEFT_RIGHT to ˚ip the image horizontally and then save the result \nto \nhorizontal_˜ip.png\n.', 'To ˚ip the image vertically, we pass \nImage.FLIP_TOP_BOTTOM and save to \nvertical_˜ip.png\n.', 'The results look like Figure 17-9.', 'Figure 17-9: The original image (left), horizontal ˜ip (center), and vertical ˜ip (right)\n 400\n   Chapter 17\nChanging Individual Pixels\nThe color of an individual pixel can be retrieved or set with the \ngetpixel() and \nputpixel() methods.', 'These methods both take a tuple representing the \nx- and y-coordinates of the pixel.', 'The \nputpixel() method also takes an addi-\ntional tuple argument for the color of the pixel.', 'This color argument is a \nfour-integer RGBA tuple or a three-integer RGB tuple.', ""Enter the following \ninto the interactive shell:\n >>> im = Image.new('RGBA', (100, 100)) >>> im.getpixel((0, 0))(0, 0, 0, 0) >>> for x in range(100):        for y in range(50):             im.putpixel((x, y), (210, 210, 210))>>> from PIL import ImageColor >>> for x in range(100):        for y in range(50, 100):             im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))>>> im.getpixel((0, 0))(210, 210, 210, 255)>>> im.getpixel((0, 50))(169, 169, 169, 255)>>> im.save('putPixel.png')At \n we make a new image that is a 100×100 transparent square."", 'Ca\nlling \ngetpixel() on some coordinates in this image returns \n(0, 0, 0, 0) because the image is transparent \n.', 'To c\nolor pixels in this image, we can \nuse nested \nfor loops to go through all the pixels in the top half of the \nimage\n  and color each pixel using \nputpixel() .', 'Here we pass \nputpixel() the RGB tuple \n(210, 210, 210), a light gray.', 'Say we want to color the bottom half of the image dark gray but don™t \nknow the RGB tuple for dark gray.', ""The \nputpixel() method doesn™t accept a \nstandard color name like \n'darkgray', so you have to use \nImageColor.getcolor() to get a color tuple from \n'darkgray'."", 'Loop through \nthe pixels in the bottom half of the image \n and pass \nputpixel() the return value of \nImageColor.getcolor() , an\nd you should now have an image that is light gray \nin\n its top half and dark gray in the bottom half, as \nshown in Figure 17-10.', 'You can call \ngetpixel() on some \ncoordinates to con˜rm that the color at any given \npixel is what you expect.', 'Finally, save the image to \n put\nPixel.png\n.Of course, drawing one pixel at a time onto \nan image isn™t very convenient.', 'If you need to draw \nshapes, use the \nImageDraw functions explained later \nin\n this chapter.', 'Figure 17-10: \nThe \n putPixel\n.png\n image \n Manipulating Images\n   401\nProject: Adding a \nLog\noSay you have the boring job of resizing thousands \nof images and adding a small logo watermark to \nthe corner of each.', 'Doing this with a basic graph-\nics program such as Paintbrush or Paint would \ntake forever.', 'A fancier graphics application such \nas Photoshop can do batch processing, but that \nsoftware costs hundreds of dollars.', 'Let™s write a \nscript to do it instead.', 'Say that Figure 17-11 is the logo you want to \nadd to the bottom-right corner of each image: a \nblack cat icon with a white border, with the rest \nof\n the image transparent.', 'At a high level, here™s what the program \nshould do:\nLoad the logo image.', 'Loop over all \n.png\n and\n.jpg\n ˜les in the working directory.', 'Check whether the image is wider or taller than 300 pixels.', 'If so, reduce the width or height (whichever is larger) to 300 pixels and \nscale down the other dimension proportionally.', 'Paste the logo image into the corner.', 'Save the altered images to another folder.', 'This means the code will need to do the following:\nOpen the \ncatlogo.png\n ˜le as an \nImage object.', ""Loop over the strings returned from \nos.listdir('."", ""').Get the width and height of the image from the \nsize attribute."", 'Calculate the new width and height of the resized image.', 'Call the \nresize() method to resize the image.', 'Call the \npaste() method to paste the logo.', 'Call the \nsave() method to save the changes, using the original ˜lename.', 'Step 1: Open the Logo Image\nFor this project, open a new ˜le editor window, enter the following code, \nand save it as \nresizeAndAddLogo.py\n:#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.Figure 17-11: The logo to be \nadded to the image.', ""402\n   Chapter 17\nimport osfrom PIL import Image SQUARE_FIT_SIZE = 300 LOGO_FILENAME = 'catlogo.png' logoIm = Image.open(LOGO_FILENAME) logoWidth, logoHeight = logoIm.size# TODO: Loop over all files in the working directory.# TODO: Check if image needs to be resized.# TODO: Calculate the new width and height to resize to.# TODO: Resize the image.# TODO: Add the logo.# TODO: Save changes.By setting up the \nSQUARE_FIT_SIZE  and \nLOGO_FILENAME  constants at the \nstart of the program, we™ve made it easy to change the program later."", 'Say \nthe logo that you™re adding isn™t the cat icon, or say you™re reducing the out-\nput images™ largest dimension to something other than 300 \n pi\nxels.', 'With these \nconstants at the start of the program, you can just open the code, change \nthose values once, and you™re done.', '(Or you can make it so that the values \nfor these constants are taken from the command line arguments.)', ""Without \nthese constants, you™d instead have to search the code for all instances of \n300 and \n'catlogo.png' and replace them with the values for your new project."", 'In short, using constants makes your program more generalized.', 'The logo \nImage object is returned from \nImage.open() .', 'For readability, \nlogoWidth and \nlogoHeight are assigned to the values from \nlogoIm.size .The rest of the program is a skeleton of \nTODO comments for now.', 'Step 2: Loop Over All Files and Open Images\nNow you need to ˜nd every \n.png\n ˜le and \n.jpg\n ˜le in the current working \ndirectory.', 'Note that you don™t want to add the logo image to the logo image \nitself, so the program should skip any image with a ˜lename that™s the same \nas \nLOGO_FILENAME.', 'Add the following to your code:\n#!', ""python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip-- Manipulating Images\n   403\nos.makedirs('withLogo', exist_ok=True)# Loop over all files in the working directory."", ""for filename in os.listdir('."", ""'):     if not (filename.endswith('.png') or filename.endswith('.jpg')) \\       or filename == LOGO_FILENAME:         continue    # skip non-image files and the logo file itself     im = Image.open(filename)    width, height = im.size--snip--First, the \nos.makedirs() call creates a \nwithLogo\n folder to store the ˜n-\nished images with logos, instead of overwriting the original image ˜les."", 'The \nexist_ok=True keyword argument will keep \nos.makedirs() from raising \nan exception if \nwithLogo\n already exists.', ""While looping through all the ˜les \nin the working directory with \nos.listdir('.')"", ', the long \nif statement \n checks whether each ˜lename doesn™t end with \n.png\n or \n.jpg\n.', 'If\n soŠor if the \n˜le is the logo image itselfŠthen the loop should skip it and use \ncontinue  to go to the next ˜le.', ""If \nfilename does\n end with \n'.png' or \n'.jpg' (and isn™t the \nlogo ˜le), you can open it as an \nImage object \n and set \nwidth and \nheight.Step 3: Resize the Images\nThe program should resize the image only if the width or height is larger \nthan \nSQUARE_FIT_SIZE (300 pixels, in this case), so put all of the resizing code \ninside an \nif statement that checks the \nwidth and \nheight variables."", 'Add the \nfollowing code to your program:\n#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip--    # Check if image needs to be resized.', 'if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:        # Calculate the new width and height to resize to.', 'if width > height:             height = int((SQUARE_FIT_SIZE / width) * height)            width = SQUARE_FIT_SIZE        else:             width = int((SQUARE_FIT_SIZE / height) * width)            height = SQUARE_FIT_SIZE        # Resize the image.', ""print('Resizing %s...' % (filename))         im = im.resize((width, height))--snip-- 404\n   Chapter 17\nIf the image does need to be resized, you need to ˜nd out whether it is \na wide or tall image."", 'If \nwidth is greater than \nheight, then the height should \nbe reduced by the same proportion that the width would be reduced \n.', 'This proportion is the \nSQUARE_FIT_SIZE value divided by the current width.', 'The new \nheight value is this proportion multiplied by the current \nheight value.', 'Since the division operator returns a ˚oat value and \nresize() requires \nthe dimensions to be integers, remember to convert the result to an integer \nwith the \nint() function.', 'Finally, the new \nwidth value will simply be set to \nSQUARE_FIT_SIZE.If the \nheight is greater than or equal to the \nwidth (both cases are handled \nin the \nelse clause), then the same calculation is done, except with the \nheight and \nwidth variables swapped \n.Once \nwidth and \nheight contain the new image dimensions, pass them to \nthe \nresize() method and store the returned \nImage object in \nim .Step 4: Add the Logo and Save the Changes\nWhether or not the image was resized, the logo should still be pasted to the \nbottom-right corner.', 'Where exactly the logo should be pasted depends on \nboth the size of the image and the size of the logo.', 'Figure 17-12 shows how \nto calculate the pasting position.', 'The left coordinate for where to paste the \nlogo will be the image width minus the logo width; the top coordinate for \nwhere to paste the logo will be the image height minus the logo height.', 'ImageLogo widthLogo heightLogoImage widthImage heightFigure 17-12: The left and top coordinates for \nplacing the logo in the bottom-right corner \nshould be the image width/height minus the \nlogo width/height.', 'After your code pastes the logo into the image, it should save the modi-\n˜ed \nImage object.', 'Add the following to your program:\n#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image Manipulating Images\n   405\n--snip--    # Check if image needs to be resized.', '--snip--    # Add the logo.', ""print('Adding logo to %s...' % (filename))     im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)    # Save changes."", ""im.save(os.path.join('withLogo', filename))The new code prints a message telling the user that the logo is being \nadded \n, pastes \nlogoIm onto \nim at the calculated coordinates \n, and saves \nthe changes to a ˜lename in the \nwithLogo\n directory \n."", 'When you run this \nprogram with the \nzophie.png\n ˜le as the only image in the working directory, \nthe output will look like this:\nResizing zophie.png...Adding logo to zophie.png...The image \nzophie.png\n will be changed to a 225×300-pixel image that \nlooks like Figure 17-13.', 'Remember that the \npaste() method will not paste \nthe transparency pixels if you do not pass the \nlogoIm for the third argument \nas well.', 'This program can automatically resize and ﬁlogo-ifyﬂ hundreds of \nimages in just a couple minutes.', 'Figure 17-13: The image \nzophie\n.png\n resized and the logo added (left).', 'If you forget the \nthird argument, the transparent pixels in the logo will be copied as solid white pixels (right).', '406\n   Chapter 17\nIdeas for Similar Programs\nBeing able to composite images or modify image sizes in a batch can be \nuseful in many applications.', 'You could write similar programs to do the \nfollowing:\nAdd text or a website URL to images.', 'Add timestamps to images.', 'Copy or move images into different folders based on their sizes.', 'Add a mostly transparent watermark to an image to prevent others \nfrom copying it.', 'Drawing on \nIma\nges\nIf you need to draw lines, rectangles, circles, or other simple shapes on \nan\n image, use Pillow™s \nImageDraw module.', ""Enter the following into the inter-\nactive shell:\n>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im)First, we import \nImage and \nImageDraw."", 'Then we create a new image, in this \ncase, a 200×200 white image, and store the \nImage object in \nim.', 'We pass the \nImage object to the \nImageDraw.Draw() function to receive an \nImageDraw object.', 'This object has several methods for drawing shapes and text onto an \nImage object.', 'Store the \nImageDraw object in a variable like \ndraw so you can use it eas-\nily in the following example.', 'Drawing Shapes\nThe following ImageDraw methods draw various kinds of shapes on the \nimage.', 'The \nfill and \noutline parameters for these methods are optional and \nwill default to white if left unspeci˜ed.', 'Points\nThe \npoint(xy, fill) method draws individual pixels.', 'The \nxy argument \nrepresents a list of the points you want to draw.', 'The list can be a list of \nx- and y-coordinate tuples, such as \n[(x, y), (x, y), ...], or a list of x- and \ny-\n co\nordinates without tuples, such as \n[x1, y1, x2, y2, ...].', ""The \nfill argu\n-ment is the color of the points and is either an RGBA tuple or a string of \na color name, such as \n'red'."", 'The \nfill argument is optional.', 'Lines\nThe \nline(xy, fill, width) method draws a line or series of lines.', 'xy is either \na list of tuples, such as \n[(x, y), (x, y), ...], or a list of integers, such as \n[x1, y1, x2, y2, ...].', 'Each point is one of the connecting points on the \n Manipulating Images\n   407\nlines you™re drawing.', 'The optional \nfill argument is the color of the lines, \nas\n an RGBA tuple or color name.', 'The optional \nwidth argument is the width \nof the lines and defaults to 1 if left unspeci˜ed.', 'Rec\ntangles\nThe \nrectangle(xy, fill, outline) method draws a rectangle.', 'The \nxy argu\n-ment is a box tuple of the form \n(left, top, right, bottom).', 'The \nleft and \ntop values specify the x- and y-coordinates of the upper-left corner of the rect-\nangle, while \nright and \nbottom specify the lower-right corner.', 'The optional \nfill argument is the color that will ˜ll the inside of the rectangle.', 'The \noptional \noutline argument is the color of the rectangle™s outline.', 'Ellipses\nThe \nellipse(xy, fill, outline) method draws an ellipse.', 'If the width and \nheight of the ellipse are identical, this method will draw a circle.', 'The \nxy argument is a box tuple (\nleft, top, right, bottom) that represents a box that \nprecisely contains the ellipse.', 'The optional \nfill argument is the color of the \ninside of the ellipse, and the optional \noutline argument is the color of the \nellipse™s outline.', 'Polygons\nThe \npolygon(xy, fill, outline) method draws an arbitrary polygon.', 'The \nxy argument is a list of tuples, such as \n[(x, y), (x, y), ...], or integers, such \nas \n[x1, y1, x2, y2, ...], representing the connecting points of the polygon™s \nsides.', 'The last pair of coordinates will be automatically connected to the \n˜rst pair.', 'The optional \nfill argument is the color of the inside of the poly-\ngon, and the optional \noutline argument is the color of the polygon™s outline.', ""Drawing Example\nEnter the following into the interactive shell:\n>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im) >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black') >>> draw.rectangle((20, 30, 60, 60), fill='blue') >>> draw.ellipse((120, 30, 160, 60), fill='red') >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown') >>> for i in range(100, 200, 10):        draw.line([(i, 0), (200, i - 100)], fill='green')>>> im.save('drawing.png')After making an \nImage object for a 200×200 white image, passing it to \nImageDraw.Draw() to get an \nImageDraw object, and storing the \nImageDraw object \nin \ndraw, you can call drawing methods on \ndraw."", 'Here we make a thin, black \n 408   Chapter 17\noutline at the edges of the image \n, a bl\nue rectangle with its top-left corner \nat (20, 30) and bottom-right corner at (60, 60) \n, a red e\nllipse de˜ned by a \nbox from (120, 30) to (160, 60) \n, a bro\nwn polygon with ˜ve points \n, an\nd a pattern of green lines drawn with a \nfor loop \n.', 'The resulting \ndrawing.png\n ˜le will look like Figure 17-14.', 'Figure 17-14: The resulting \ndrawing\n.png\n  image\nThere are several other shape-drawing methods for \nImageDraw objects.', 'The full documentation is available at \nhttp://pillow.readthedocs.org/en/latest/\nreference/ImageDraw.html\n.Drawing Text\nThe \nImageDraw object also has a \ntext() method for drawing text onto an \nimage.', 'The \ntext() method takes four arguments: \nxy, text, fill, and \nfont.The \nxy argument is a two-integer tuple specifying the upper-left corner \nof the text box.', 'The \ntext argument is the string of text you want to write.', 'The optional \nfill argument is the color of the text.', 'The optional \nfont argument is an \nImageFont object, used to set the type-\nface and size of the text.', 'This is described in more detail in the next \nsection.', 'Since it™s often hard to know in advance what size a block of text will \nbe in a given font, the \nImageDraw module also offers a \ntextsize() method.', 'Its ˜rst argument is the string of text you want to measure, and its second \nargument is an optional \nImageFont object.', 'The \ntextsize() method will then \nreturn a two-integer tuple of the width and height that the text in the given \n Manipulating Images\n   409\nfont would be if it were written onto the image.', 'You can use this width and \nheight to help you calculate exactly where you want to put the text on your \nimage.', 'The ˜rst three arguments for \ntext() are straightforward.', 'Before we use \ntext() to draw text onto an image, let™s look at the optional fourth argument, \nthe \nImageFont object.', 'Both \ntext() and \ntextsize() take an optional \nImageFont object as their \n˜nal arguments.', 'To create one of these objects, ˜rst run the following:\n>>> from PIL import ImageFontNow that you™ve imported Pillow™s \nImageFont module, you can call the \nImageFont.truetype() function, which takes two arguments.', 'The ˜rst argu-\nment is a string for the font™s \nTrueType ˚le\nŠthis is the actual font ˜le that \nlives on your hard drive.', 'A TrueType ˜le has the \n.ttf\n ˜le extension and can \nusually be found in the following folders:\nOn Windows: \nC:\\Windows\\Fonts\nOn OS X: \n/Library/Fonts\n and \n/System/Library/Fonts\nOn Linux: \n/usr/share/fonts/truetype\nYou don™t actually need to enter these paths as part of the TrueType \n˜le string because Python knows to automatically search for fonts in these \ndirectories.', 'But Python will display an error if it is unable to ˜nd the font \nyou speci˜ed.', 'The second argument to \nImageFont.truetype() is an integer for the font \nsize in \npoints\n (rather than, say, pixels).', 'Keep in mind that Pillow creates \nPNG images that are 72 pixels per inch by default, and a point is 1/72 of \nan inch.', ""Enter the following into the interactive shell, replacing \nFONT_FOLDER with \nthe actual folder name your operating system uses:\n>>> from PIL import Image, ImageDraw, ImageFont>>> import os >>> im = Image.new('RGBA', (200, 200), 'white') >>> draw = ImageDraw.Draw(im) >>> draw.text((20, 150), 'Hello', fill='purple')>>> fontsFolder = 'FONT_FOLDER' # e.g."", ""‚/Library/Fonts™ >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32) >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)>>> im.save('text.png')After importing \nImage, ImageDraw, ImageFont, and \nos, we make an \nImage object for a new 200×200 white image \n and make an \nImageDraw object from \nthe \nImage object \n."", 'We u\nse \ntext() to draw \nHello\n at (20, 150) in purple\n .', 'We \ndidn™t pass the optional fourth argument in this \ntext() call, so the typeface \nand size of this text aren™t customized.', '410\n   Chapter 17\nTo set a typeface and size, we ˜rst \nstore the folder name (like \n/Library/\nFonts\n) in \nfontsFolder.', 'Then we call \nImageFont.truetype(), passing it the \n.ttf\n ˜le for the font we want, followed by \nan integer font size \n.', 'St\nore the \nFont object you get from \nImageFont.truetype() in a variable like \narialFont, and then \npass the\n variable to \ntext() in the ˜nal \nkeyword argument.', 'The \ntext() call at\n  dr\naws \nHowdy\n at (100, 150) in gray in \n32-point Arial.', 'The resulting \ntext.png\n ˜le will look \nlike Figure 17-15.', 'Summary\nImages consist of a collection of pixels, and each pixel has an RGBA value \nfor its color and its addressable by x- and y-coordinates.', 'Two common image \nformats are JPEG and PNG.', 'The \npillow module can handle both of these \nimage formats and others.', 'When an image is loaded into an \nImage object, its width and height \ndimensions are stored as a two-integer tuple in the \nsize attribute.', 'Objects of the \nImage data type also have methods for common image manipulations: \ncrop(), copy(), paste(), resize(), rotate(), and \ntranspose().', 'To save the \nImage object to \nan image ˜le, call the \nsave() method.', 'If you want your program to draw shapes onto an image, use \nImageDraw methods to draw points, lines, rectangles, ellipses, and polygons.', 'The mod-\nule also provides methods for drawing text in a typeface and font size of \nyour choosing.', 'Although advanced (and expensive) applications such as Photoshop \nprovide automatic batch processing features, you can use Python scripts to \ndo many of the same modi˜cations for free.', 'In the previous chapters, you \nwrote Python programs to deal with plaintext ˜les, spreadsheets, PDFs, and \nother formats.', 'With the \npillow module, you™ve extended your programming \npowers to processing images as well!', 'Practice Questions\n1.', 'What is an RGBA value?', '2.', ""Ho\nw can you get the RGBA value of \n'CornflowerBlue' from the \nPillow module?"", '3.', 'Wh\nat is a box tuple?', '4.', 'Wh\nat function returns an \nImage object for, say, an image ˜le named \nzophie.png\n?Figure 17-15: The resulting \ntext\n.png\n image\n Manipulating Images\n   411\n5.', 'How can you ˜nd out the width and height of an \nImage object™s image?', '6.', 'Wh\nat method would you call to get \nImage object for a 100×100 image, \nexcluding the lower left quarter of it?', '7.', 'Af\nter making changes to an \nImage object, how could you save it as an \nimage ˜le?', '8.', 'Wh\nat module contains Pillow™s shape-drawing code?', '9.', 'Image objects do not have drawing methods.', 'What kind of object does?', 'How do you get this kind of object?', 'Practice Projects\nFor practice, write programs that do the following.', 'Extending and Fixing the Chapter Project Programs\nThe \nresizeAndAddLogo.py\n program in this chapter works with PNG and JPEG \n˜les, but Pillow supports many more formats than just these two.', 'Extend \nresizeAndAddLogo.py\n to process GIF \nand BMP images as well.', 'Another small issue is that the \nprogram modi˜es PNG and JPEG \n˜les only if their ˜le extensions are \nset in lowercase.', 'For example, it will \nprocess \nzophie.png\n but not \nzophie.PNG\n.', 'Change the code so that the ˜le \nextension check is case insensitive.', 'Finally, the logo added to the \nbottom-right corner is meant to be \njust a small mark, but if the image is \nabout the same size as the logo itself, \nthe result will look like Figure 17-16.', 'Modify \nresizeAndAddLogo.py\n so that \nthe image must be at least twice the \nwidth and height of the logo image \nbefore the logo is pasted.', 'Other\n wi\nse, \nit should skip adding the logo.', 'Identifying Photo Folders on the Hard Drive\nI have a bad habit of transferring ˜les from my digital camera to temporary \nfolders somewhere on the hard drive and then forgetting about these fold-\ners.', 'It would be nice to write a program that could scan the entire hard \ndrive and ˜nd these leftover ﬁphoto folders.ﬂ\nWrite a program that goes through every folder on your hard drive and \n˜nds potential photo folders.', 'Of course, ˜rst you™ll have to de˜ne what you \nconsider a ﬁphoto folderﬂ to be; let™s say that it™s any folder where more than \nhalf of the ˜les are photos.', 'And how do you de˜ne what ˜les are photos?', 'Figure 17-16: When the image isn™t much \nlarger than the logo, the results look ugly.', '412   Chapter 17\nFirst, a photo ˜le must have the ˜le extension \n.png\n or \n.jpg\n.', 'Also, photos \nare large images; a photo ˜le™s width and height must both be larger than \n500\n pixels.', 'This is a safe bet, since most digital camera photos are several \nthousand pixels in width and height.', 'As a hint, here™s a rough skeleton of what this program might look like:\n#!', ""python3# Import modules and write comments to describe this program.for foldername, subfolders, filenames in os.walk('C:\\\\'):    numPhotoFiles = 0    numNonPhotoFiles = 0    for filename in filenames:        # Check if file extension isn't .png or .jpg."", 'if TODO:            numNonPhotoFiles += 1            continue    # skip to next filename        # Open image file using Pillow.', '# Check if width & height are larger than 500.        if TODO:            # Image is large enough to be considered a photo.', 'numPhotoFiles += 1        else:            # Image is too small to be a photo.', 'numNonPhotoFiles += 1    # If more than half of files were photos,    # print the absolute path of the folder.', 'if TODO:        print(TODO)When the program runs, it should print the absolute path of any photo \nfolders to the screen.', 'Custom Seating Cards\nChapter 13 included a practice project to create custom invitations from \na list of guests in a plaintext ˜le.', 'As an additional project, use the \n pillow module to create images for custom seating cards for your guests.', 'For \neach of the guests listed in the \nguests.txt\n ˜le from the resources at \nhttp://\nnostarch.com/automatestuff/\n, generate an image ˜le with the guest name and \nsome ˚owery decoration.', 'A public domain ˚ower image is available in the \nresources at \nhttp://nostarch.com/automatestuff/\n.To ensure that each seating card is the same size, add a black rectangle \non the edges of the invitation image so that when the image is printed out, \nthere will be a guideline for cutting.', 'The PNG ˜les that Pillow produces are \nset to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel \nimage.']","[array([ 0.06431493,  0.07472365,  0.13672064, ..., -0.00063823,
       -0.01190728,  0.07100931], dtype=float32), array([ 0.04919231,  0.10589863,  0.17439698, ..., -0.01807923,
       -0.01424596,  0.1708832 ], dtype=float32), array([ 0.03134285,  0.13994716,  0.10458682, ...,  0.06309756,
       -0.03814263,  0.01076107], dtype=float32), array([ 0.07025885, -0.07810354,  0.07427086, ..., -0.03926745,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.10038307,  0.05489067,  0.08221222, ...,  0.00547489,
       -0.0161816 ,  0.06513822], dtype=float32), array([ 0.03190372,  0.10793203,  0.17926428, ...,  0.06401385,
       -0.00772988,  0.07980725], dtype=float32), array([ 0.0428622 ,  0.10350282,  0.17385212, ...,  0.08631015,
       -0.03814263,  0.18071286], dtype=float32), array([ 0.06839821,  0.1490474 ,  0.1313635 , ...,  0.05056475,
       -0.00956214,  0.04912522], dtype=float32), array([ 0.01748219,  0.05110446,  0.05769224, ...,  0.00754203,
        0.03886375, -0.00375294], dtype=float32), array([0.05410789, 0.10346806, 0.07110669, ..., 0.05874321, 0.04942713,
       0.02936727], dtype=float32), array([ 0.0795623 ,  0.1613074 ,  0.11413529, ..., -0.00412017,
        0.00263271, -0.00199845], dtype=float32), array([ 0.05512173,  0.28224882,  0.10825451, ...,  0.06364432,
       -0.00427722,  0.05690479], dtype=float32), array([ 0.05155294,  0.1040457 ,  0.05265638, ...,  0.03801778,
       -0.01966181,  0.0069375 ], dtype=float32), array([ 0.08668395,  0.11782444,  0.07733955, ...,  0.04684611,
       -0.02056096,  0.04767893], dtype=float32), array([ 0.03652222,  0.18587695,  0.1017595 , ...,  0.01768744,
       -0.03092445,  0.00832239], dtype=float32), array([ 0.0766842 ,  0.05648223,  0.04913316, ...,  0.08015788,
       -0.03339547,  0.05370966], dtype=float32), array([ 0.0884609 ,  0.09367552,  0.13224152, ...,  0.0396965 ,
       -0.00664936,  0.04567108], dtype=float32), array([ 0.08815295,  0.20815228,  0.04659249, ...,  0.2278997 ,
       -0.03814263,  0.04382882], dtype=float32), array([ 0.05647859,  0.18485475,  0.0872967 , ..., -0.02970623,
       -0.03814263, -0.00539271], dtype=float32), array([ 0.07426149,  0.24892826,  0.08237553, ...,  0.04701482,
       -0.0114199 ,  0.04223397], dtype=float32), array([ 0.0815654 ,  0.23499411, -0.00230788, ..., -0.02798165,
       -0.03814263, -0.00137427], dtype=float32), array([ 0.07555893,  0.18631947,  0.10038888, ...,  0.06006905,
       -0.03814263,  0.04156219], dtype=float32), array([ 0.09431896,  0.06950986,  0.18247549, ..., -0.01468437,
       -0.03814263,  0.01623263], dtype=float32), array([ 0.12310537,  0.15819417,  0.07630527, ...,  0.05431917,
       -0.01930591,  0.08596666], dtype=float32), array([ 0.08410262,  0.1613636 ,  0.06608897, ...,  0.15973775,
       -0.02996947,  0.01497513], dtype=float32), array([ 0.07497041,  0.30376154,  0.0399021 , ...,  0.05813181,
       -0.02396614,  0.11575406], dtype=float32), array([ 0.07601127,  0.189189  ,  0.07926533, ...,  0.01898011,
       -0.03814263,  0.06221076], dtype=float32), array([ 0.13192421,  0.16202052,  0.06221355, ...,  0.07390723,
       -0.02139065,  0.0726465 ], dtype=float32), array([ 0.06291844,  0.14614467,  0.07045542, ...,  0.05943317,
       -0.02541971,  0.00281954], dtype=float32), array([ 0.09908262,  0.19546968,  0.09959548, ...,  0.07306383,
       -0.03814263, -0.01029061], dtype=float32), array([ 0.09908262,  0.18108791,  0.05521824, ...,  0.1018354 ,
       -0.03814263,  0.01126568], dtype=float32), array([ 0.09108844,  0.09005644,  0.11586274, ...,  0.05389998,
       -0.03814263,  0.02155964], dtype=float32), array([ 0.09132136,  0.05355069,  0.19315279, ...,  0.01418866,
       -0.03814263,  0.01205983], dtype=float32), array([ 0.07584792,  0.09565926,  0.05043862, ...,  0.07396578,
       -0.03814263,  0.08955199], dtype=float32), array([0.05604194, 0.2505204 , 0.12394767, ..., 0.05191016, 0.03132453,
       0.11792186], dtype=float32), array([ 0.08328244,  0.16949087,  0.07205911, ..., -0.03676178,
        0.02532842,  0.05890804], dtype=float32), array([0.08251766, 0.23041785, 0.06506254, ..., 0.01244497, 0.01881933,
       0.07830486], dtype=float32), array([0.05864831, 0.27385154, 0.06457938, ..., 0.00694726, 0.0142929 ,
       0.00520571], dtype=float32), array([ 0.09008251,  0.1694472 ,  0.04357214, ...,  0.06230665,
       -0.00557761, -0.02892259], dtype=float32), array([ 0.0469289 ,  0.15258512,  0.10880781, ..., -0.00311054,
       -0.03814263,  0.03585216], dtype=float32), array([ 0.06972891,  0.06344406,  0.12414273, ...,  0.04784884,
       -0.00577933,  0.03239757], dtype=float32), array([ 0.08484852,  0.11077435,  0.05747169, ...,  0.03774838,
       -0.0189133 ,  0.03788872], dtype=float32), array([ 0.04597238,  0.09253366,  0.02181988, ..., -0.01880834,
        0.000175  ,  0.04085216], dtype=float32), array([ 0.0987749 ,  0.22696021,  0.13155022, ...,  0.21145338,
       -0.03814263,  0.07955025], dtype=float32), array([ 0.11282833,  0.18747492,  0.1698302 , ...,  0.18917498,
       -0.03814263,  0.10340482], dtype=float32), array([ 0.14325023,  0.11657669,  0.13664456, ..., -0.00443025,
       -0.03814263,  0.00242573], dtype=float32), array([ 0.10914269,  0.10751404,  0.15834388, ...,  0.00731974,
       -0.03330582,  0.06314512], dtype=float32), array([ 0.05539125,  0.06336156,  0.03508229, ...,  0.04825284,
       -0.03814263,  0.05771172], dtype=float32), array([ 0.08592106,  0.12174107,  0.14306319, ...,  0.01189961,
       -0.03814263, -0.00048587], dtype=float32), array([ 0.0762489 ,  0.08972747,  0.055613  , ...,  0.0550131 ,
       -0.03814263, -0.02239605], dtype=float32), array([ 0.09268093,  0.08560064,  0.0783288 , ...,  0.07938202,
       -0.0276427 ,  0.07191494], dtype=float32), array([ 0.10484756,  0.19048157,  0.15853176, ...,  0.0422199 ,
       -0.0284193 ,  0.04555564], dtype=float32), array([ 0.06532189,  0.12963194,  0.11500832, ...,  0.01100447,
       -0.01500341,  0.10252608], dtype=float32), array([ 0.08484852,  0.1339228 ,  0.11774598, ...,  0.07299631,
       -0.02273563, -0.01071598], dtype=float32), array([ 0.12196464,  0.17711058,  0.12711327, ...,  0.04408975,
       -0.0075088 ,  0.07370084], dtype=float32), array([ 0.03468516,  0.1643938 ,  0.02923469, ...,  0.08504628,
       -0.03814263, -0.00667095], dtype=float32), array([ 0.06254705,  0.13793936,  0.10868441, ..., -0.0014915 ,
       -0.01154051,  0.06892794], dtype=float32), array([ 0.1138211 ,  0.09639519,  0.10973511, ..., -0.00190814,
       -0.03814263,  0.0275734 ], dtype=float32), array([ 0.053032  ,  0.11074784,  0.09696858, ...,  0.03051257,
       -0.03205256,  0.10812411], dtype=float32), array([ 0.06921297,  0.10593355,  0.13726062, ...,  0.07854313,
       -0.02406617,  0.02984594], dtype=float32), array([ 0.16400862,  0.13829261,  0.10736371, ..., -0.00385956,
       -0.02397317,  0.07548179], dtype=float32), array([ 0.09908262,  0.16447695,  0.10241293, ...,  0.03321312,
       -0.01690692,  0.03341848], dtype=float32), array([ 0.03017557,  0.15713537,  0.11954287, ...,  0.02369552,
       -0.03814263,  0.05558089], dtype=float32), array([ 0.05919995,  0.11622321,  0.09347131, ...,  0.02439196,
       -0.01830894,  0.11239936], dtype=float32), array([0.08492061, 0.14534067, 0.1596853 , ..., 0.02915582, 0.0098824 ,
       0.05401831], dtype=float32), array([ 0.06565915,  0.07196098,  0.06938813, ..., -0.01203438,
       -0.01709725,  0.03730565], dtype=float32), array([ 0.04315702,  0.04594978,  0.10787593, ...,  0.04835742,
       -0.03332894,  0.07196068], dtype=float32), array([ 0.03294341,  0.15110986,  0.15582006, ...,  0.07239477,
       -0.01532549,  0.03666712], dtype=float32), array([ 0.15458897,  0.15147555,  0.13180758, ...,  0.1150566 ,
       -0.03382928,  0.07235524], dtype=float32), array([0.09785706, 0.06781045, 0.14420474, ..., 0.05685432, 0.0392192 ,
       0.03723843], dtype=float32), array([ 0.00407089,  0.04318504,  0.18532565, ...,  0.06408114,
       -0.03814263,  0.03431991], dtype=float32), array([ 0.02999814,  0.09007732,  0.14169167, ...,  0.00650641,
       -0.03814263,  0.01217429], dtype=float32), array([ 0.02856491,  0.09871047,  0.11916202, ...,  0.01401717,
       -0.02066692,  0.0783575 ], dtype=float32), array([ 0.07696597,  0.05040507,  0.13137537, ...,  0.02818248,
       -0.02639731,  0.0813982 ], dtype=float32), array([ 0.06629205,  0.10216536,  0.04359767, ...,  0.14283869,
       -0.03814263,  0.02500696], dtype=float32), array([ 0.10163038,  0.11402921,  0.11492375, ...,  0.16274576,
       -0.03814263, -0.02100274], dtype=float32), array([ 0.0820093 ,  0.13661276,  0.06736468, ..., -0.01575326,
       -0.03814263,  0.08192919], dtype=float32), array([ 0.03717984,  0.14028804,  0.08433895, ..., -0.01739916,
       -0.02203202,  0.06319594], dtype=float32), array([ 0.04133011,  0.04021337,  0.02348235, ..., -0.00078594,
       -0.03438281, -0.00024225], dtype=float32), array([ 0.05964039,  0.10480724,  0.13325876, ...,  0.03592529,
       -0.02996356, -0.01512743], dtype=float32), array([ 0.04544538,  0.1572944 ,  0.10156279, ...,  0.01588498,
       -0.02942418,  0.02342934], dtype=float32), array([ 0.09908262,  0.1357489 ,  0.05521824, ..., -0.02593606,
       -0.01160208,  0.04085216], dtype=float32), array([ 0.03255493,  0.12876712,  0.06845186, ...,  0.06596559,
       -0.03814263,  0.02868678], dtype=float32), array([ 0.12154306,  0.2033798 ,  0.11413283, ...,  0.07607315,
       -0.03814263,  0.08925153], dtype=float32), array([ 0.09384128,  0.05830499,  0.11598927, ..., -0.0172186 ,
       -0.03814263, -0.00220324], dtype=float32), array([ 0.02689293,  0.14510855,  0.06917116, ...,  0.05472209,
       -0.02830765,  0.05434654], dtype=float32), array([ 0.10901388,  0.1604867 ,  0.13969009, ...,  0.10254557,
       -0.03558253,  0.06095471], dtype=float32), array([ 0.07063144,  0.15672386,  0.20497473, ...,  0.0333605 ,
       -0.02996932,  0.11042392], dtype=float32), array([ 0.06728207,  0.12997417,  0.11232853, ...,  0.04312448,
       -0.01229055,  0.09644004], dtype=float32), array([ 0.09518945,  0.10605255,  0.19963583, ...,  0.03025993,
       -0.03644376,  0.07692333], dtype=float32), array([ 0.12266903,  0.14528875,  0.21364893, ...,  0.07520053,
       -0.01086655,  0.0737415 ], dtype=float32), array([ 0.09125844,  0.09060758,  0.1349284 , ...,  0.00209236,
       -0.03814263,  0.00621413], dtype=float32), array([ 0.06471973,  0.14853401,  0.23777397, ...,  0.05840423,
       -0.0311471 ,  0.02999379], dtype=float32), array([ 0.07507648,  0.13563634,  0.08668978, ...,  0.01369246,
       -0.03191522,  0.0931455 ], dtype=float32), array([ 0.08251766,  0.1198255 ,  0.13434851, ...,  0.05846797,
       -0.01145691, -0.02892259], dtype=float32), array([0.11941897, 0.1375211 , 0.09735018, ..., 0.16794951, 0.00441317,
       0.06569751], dtype=float32), array([ 0.05759674,  0.16067146,  0.15380898, ...,  0.02495824,
       -0.03049271,  0.03353409], dtype=float32), array([0.03225759, 0.07841156, 0.19383271, ..., 0.04851587, 0.00350747,
       0.05558089], dtype=float32), array([ 0.12009132,  0.13552384,  0.17115943, ...,  0.01222819,
       -0.02045619,  0.0890739 ], dtype=float32), array([ 0.12021046,  0.16263837,  0.13484308, ...,  0.07035965,
       -0.02663636,  0.09721249], dtype=float32), array([ 0.08407063,  0.15360038,  0.13138266, ...,  0.01101957,
       -0.03814263,  0.06145175], dtype=float32), array([ 0.13411011,  0.05148633,  0.18207139, ...,  0.02516072,
       -0.00422684,  0.07275313], dtype=float32), array([ 0.11272831,  0.14886023,  0.20925687, ...,  0.13447265,
       -0.00679452,  0.0911947 ], dtype=float32), array([ 0.0886748 ,  0.11898074,  0.13820948, ...,  0.03046061,
       -0.03431615,  0.09789579], dtype=float32), array([ 0.12209295,  0.06761865,  0.17731825, ...,  0.02968191,
       -0.01811283,  0.02343927], dtype=float32), array([ 0.0344221 ,  0.08293164,  0.01921652, ..., -0.03926745,
       -0.01775976,  0.05095374], dtype=float32), array([ 0.0740501 ,  0.13278848,  0.17269763, ...,  0.01166298,
       -0.03814263,  0.01547249], dtype=float32), array([ 0.08484852,  0.12184973,  0.20840648, ...,  0.13252255,
       -0.00774061,  0.05438839], dtype=float32), array([ 0.07619177,  0.14730285,  0.17102869, ...,  0.03953595,
       -0.01812584,  0.05841321], dtype=float32), array([0.06917181, 0.121247  , 0.16241816, ..., 0.02417245, 0.01957346,
       0.04547926], dtype=float32), array([0.12611476, 0.09428305, 0.13693468, ..., 0.01625642, 0.04810876,
       0.02558648], dtype=float32), array([ 0.09908262,  0.06609358,  0.07902504, ...,  0.0189566 ,
       -0.03814263, -0.01245891], dtype=float32), array([ 0.13374858,  0.1841396 ,  0.10796802, ...,  0.04349609,
       -0.02506283,  0.0853021 ], dtype=float32), array([ 0.05289273,  0.11165794,  0.03082561, ..., -0.00171907,
       -0.01781811,  0.02216664], dtype=float32), array([0.09508916, 0.03013258, 0.20402734, ..., 0.02516072, 0.0217618 ,
       0.05724372], dtype=float32), array([ 0.0603642 ,  0.09901319,  0.05873497, ...,  0.0401301 ,
       -0.03814263,  0.07555892], dtype=float32), array([ 0.106552  ,  0.11546758,  0.0734043 , ...,  0.04203333,
       -0.03814263,  0.02190967], dtype=float32), array([ 0.09390419,  0.10877089,  0.19905445, ...,  0.09362932,
       -0.00435316,  0.09912835], dtype=float32), array([ 0.10177204,  0.04581835,  0.08093712, ...,  0.08422121,
       -0.03814263,  0.08002698], dtype=float32), array([0.0422437 , 0.07209808, 0.19102424, ..., 0.03461203, 0.00255332,
       0.05298198], dtype=float32), array([ 0.0469295 ,  0.17108525,  0.11133605, ...,  0.02842859,
       -0.0226238 ,  0.08718503], dtype=float32), array([ 0.03638206,  0.12132214,  0.1182116 , ...,  0.0505824 ,
       -0.03814263, -0.00734588], dtype=float32), array([0.12314076, 0.12643191, 0.18921812, ..., 0.16726926, 0.01268523,
       0.07410345], dtype=float32), array([ 0.03902647,  0.12817244,  0.11943574, ...,  0.05587655,
       -0.02958397,  0.07828651], dtype=float32), array([ 0.04902211,  0.13985303,  0.11855579, ...,  0.08246176,
       -0.03814263,  0.05424957], dtype=float32), array([ 0.05837161,  0.1159235 ,  0.11560156, ...,  0.04262975,
       -0.03814263,  0.07371103], dtype=float32), array([ 0.05539125,  0.0535978 ,  0.11854342, ...,  0.0485049 ,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.05067483,  0.0665971 ,  0.10211878, ...,  0.05840423,
       -0.00140269, -0.00261341], dtype=float32), array([ 0.01614291,  0.14429203,  0.17536551, ...,  0.05753361,
       -0.03814263,  0.03084389], dtype=float32), array([ 0.05683771,  0.14763595,  0.10954252, ...,  0.02164799,
       -0.01229055,  0.07456639], dtype=float32), array([ 0.06308489,  0.04586183,  0.12293842, ...,  0.00492019,
       -0.03376217, -0.0054076 ], dtype=float32), array([ 0.08606111,  0.12199628,  0.17324308, ...,  0.09722406,
       -0.01435869,  0.07540414], dtype=float32), array([ 0.05539125,  0.1459951 ,  0.04237986, ..., -0.03062997,
       -0.03814263,  0.07185187], dtype=float32), array([ 0.06387018,  0.2800764 ,  0.09353468, ..., -0.00223939,
       -0.01785183,  0.03688065], dtype=float32), array([ 0.09090106,  0.05025285,  0.1909369 , ..., -0.00453762,
       -0.00661741,  0.0632493 ], dtype=float32), array([ 0.07645395,  0.13374321,  0.16346067, ..., -0.0054778 ,
       -0.00901813,  0.04409929], dtype=float32), array([ 0.07097481,  0.150297  ,  0.15004417, ...,  0.04172441,
       -0.03814263,  0.07989721], dtype=float32), array([ 0.08688521,  0.09837242,  0.16581434, ...,  0.0549456 ,
       -0.0219798 ,  0.07656853], dtype=float32), array([ 0.12266903,  0.11541417,  0.06828991, ...,  0.07372487,
       -0.03814263,  0.10602124], dtype=float32), array([ 0.07968815,  0.14016885,  0.17622335, ...,  0.08349247,
       -0.03814263,  0.03292621], dtype=float32), array([-0.0026457 ,  0.14734718,  0.03898041, ...,  0.07107062,
       -0.03814263, -0.00456351], dtype=float32), array([ 0.06568718,  0.15717657,  0.16995892, ...,  0.01446053,
       -0.02147086,  0.02677075], dtype=float32), array([ 0.08484852,  0.14296225,  0.17406972, ...,  0.09486773,
       -0.03814263,  0.10276736], dtype=float32), array([ 0.08810379,  0.09852195,  0.10595568, ...,  0.06016212,
       -0.03814263, -0.00426486], dtype=float32), array([ 0.07618097,  0.15250853,  0.12218679, ...,  0.01289228,
       -0.00404784, -0.0035625 ], dtype=float32), array([ 0.05055314,  0.08144927,  0.06404729, ...,  0.00386515,
       -0.00187516,  0.01317509], dtype=float32), array([ 0.07968815,  0.09611615,  0.1505501 , ...,  0.10767274,
       -0.01174487,  0.0861977 ], dtype=float32), array([ 0.11930001,  0.20814095,  0.11819282, ...,  0.11411989,
       -0.03814263,  0.08667768], dtype=float32), array([ 0.08222433,  0.18730518,  0.1256876 , ...,  0.13999663,
       -0.03692039,  0.03269031], dtype=float32), array([ 0.08413128,  0.21557659,  0.16499318, ...,  0.10311906,
       -0.00652752,  0.09942581], dtype=float32), array([0.05093275, 0.0641183 , 0.06017646, ..., 0.02369552, 0.02415831,
       0.05558089], dtype=float32), array([ 0.12266903,  0.12232031,  0.07503469, ...,  0.07240871,
       -0.01229055,  0.07567216], dtype=float32), array([ 0.06604335,  0.0835522 ,  0.09147093, ..., -0.03448897,
       -0.00547313,  0.08544903], dtype=float32), array([ 0.08663372,  0.08553983,  0.0935206 , ..., -0.03926745,
        0.01728244,  0.01232722], dtype=float32), array([ 0.06568718,  0.14838952,  0.16995892, ...,  0.01003419,
       -0.02037438,  0.02468636], dtype=float32), array([ 0.08484852,  0.14067313,  0.10717624, ...,  0.03677572,
       -0.00443937,  0.09766243], dtype=float32), array([ 0.04133108,  0.11461961,  0.08913898, ...,  0.05170362,
       -0.03286424,  0.07004566], dtype=float32), array([ 3.4576435e-05,  1.4969958e-01,  4.8481379e-02, ...,
        3.1990262e-03, -3.0767702e-02,  8.8042118e-02], dtype=float32), array([ 0.06803977,  0.14439298,  0.06094306, ...,  0.0483034 ,
       -0.01557093,  0.05268622], dtype=float32), array([ 0.13319767,  0.1261863 ,  0.11100655, ...,  0.07530246,
       -0.01218904,  0.07231174], dtype=float32), array([ 0.09409727,  0.09918369,  0.12665096, ...,  0.05397761,
       -0.03814263,  0.03985059], dtype=float32), array([ 0.09830193,  0.11508672,  0.11163127, ...,  0.08813065,
       -0.01654953,  0.06856177], dtype=float32), array([0.06922282, 0.21324559, 0.05655153, ..., 0.02680734, 0.02438913,
       0.08483645], dtype=float32), array([ 0.06738069,  0.20695615,  0.18171494, ...,  0.06804129,
       -0.01172918,  0.03768379], dtype=float32), array([ 0.01497781,  0.17238836,  0.05877979, ...,  0.02012765,
       -0.00932472,  0.06811247], dtype=float32), array([ 0.11442353,  0.20405318,  0.13713455, ...,  0.07981509,
       -0.01395241,  0.07036401], dtype=float32), array([ 0.09908262,  0.1336963 ,  0.07783571, ...,  0.02242696,
       -0.01643741,  0.01965758], dtype=float32), array([ 0.05425529,  0.10146609,  0.14103013, ...,  0.0604753 ,
       -0.03814263,  0.04655842], dtype=float32), array([ 0.07781169,  0.07224099,  0.09418714, ...,  0.02688501,
       -0.02306077,  0.10724844], dtype=float32), array([ 0.08484852,  0.14362624,  0.10047382, ...,  0.12401534,
       -0.01040853,  0.04817724], dtype=float32), array([ 0.04298909,  0.12364838,  0.06488124, ...,  0.02124198,
       -0.00931101,  0.04385852], dtype=float32), array([0.05397682, 0.1218297 , 0.16157588, ..., 0.09522134, 0.00207924,
       0.09651301], dtype=float32), array([ 0.00863267, -0.03231706,  0.07079056, ...,  0.00386515,
       -0.01564542, -0.02892259], dtype=float32), array([ 0.15207008,  0.18805444,  0.18980092, ...,  0.03476132,
       -0.00496622,  0.02350498], dtype=float32), array([ 0.04609222,  0.06923828,  0.12757653, ..., -0.00959294,
        0.01295492,  0.01748845], dtype=float32), array([ 0.09763924,  0.05746246,  0.05792426, ...,  0.05107833,
       -0.02825841,  0.03519984], dtype=float32), array([ 0.06251205,  0.10054954,  0.16081947, ...,  0.07371749,
       -0.03814263,  0.00915436], dtype=float32), array([ 0.03891615,  0.09373395,  0.1267109 , ...,  0.00547664,
       -0.00806283,  0.00054569], dtype=float32), array([ 0.12423974,  0.084867  ,  0.13463248, ...,  0.03092972,
       -0.03814263,  0.03523901], dtype=float32), array([ 0.04081186,  0.07045457,  0.14754367, ...,  0.03005495,
       -0.00602278,  0.05467357], dtype=float32), array([ 0.05539125,  0.1185494 ,  0.06569687, ..., -0.0126889 ,
       -0.02717856,  0.01821816], dtype=float32), array([ 0.08897324,  0.08358452,  0.03828241, ..., -0.01536987,
       -0.03814263,  0.04345903], dtype=float32), array([ 0.02397518,  0.08783503,  0.13492875, ...,  0.01956045,
       -0.03814263,  0.01226905], dtype=float32), array([ 0.04099862,  0.08105878,  0.15599033, ...,  0.03070894,
       -0.01221009, -0.00743562], dtype=float32), array([0.0476603 , 0.06832608, 0.14918222, ..., 0.01539699, 0.00155232,
       0.09900418], dtype=float32), array([0.0895773 , 0.08342616, 0.20173414, ..., 0.05565548, 0.02386798,
       0.12040439], dtype=float32), array([ 0.01726334,  0.08200432,  0.09109749, ...,  0.09244665,
       -0.00532681,  0.06985086], dtype=float32), array([0.05593292, 0.16491003, 0.13782966, ..., 0.01951506, 0.0140548 ,
       0.07569373], dtype=float32), array([ 0.10558488,  0.11066268,  0.1379118 , ...,  0.0687842 ,
       -0.00577509,  0.0545323 ], dtype=float32), array([0.08836538, 0.14637907, 0.14271678, ..., 0.06906216, 0.02298532,
       0.03930344], dtype=float32), array([ 0.126492  ,  0.08632582,  0.1535294 , ...,  0.09938528,
       -0.03814263,  0.0437573 ], dtype=float32), array([ 0.05037306,  0.130006  ,  0.06377068, ...,  0.08672179,
       -0.03814263, -0.021808  ], dtype=float32), array([ 0.08750732,  0.05459988,  0.07395696, ...,  0.06436399,
       -0.03814263,  0.05085603], dtype=float32), array([ 0.11112016,  0.08601151,  0.07362539, ...,  0.08788154,
        0.01315315, -0.01443818], dtype=float32), array([ 0.03705068,  0.0747446 ,  0.10962265, ...,  0.08143803,
       -0.03584339, -0.00300805], dtype=float32), array([ 0.07149883,  0.14068954,  0.09428232, ..., -0.03926745,
       -0.03814263,  0.02006691], dtype=float32), array([0.02888144, 0.07930851, 0.13207573, ..., 0.02286668, 0.01298954,
       0.04474702], dtype=float32), array([ 0.10213376,  0.15400352,  0.08169454, ...,  0.04951099,
       -0.02681514,  0.06505787], dtype=float32), array([ 0.06149058,  0.09777215,  0.14244075, ..., -0.0005809 ,
       -0.00232458,  0.02774355], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.02420845, 0.06133142,
       0.01927945], dtype=float32), array([ 0.10558488,  0.12753703,  0.13316141, ...,  0.06907871,
       -0.01698992,  0.04691799], dtype=float32), array([ 0.11386558,  0.06699391,  0.0811441 , ..., -0.0151084 ,
       -0.03785231, -0.00476625], dtype=float32), array([ 0.05477499,  0.09630794,  0.13325566, ...,  0.08282485,
       -0.03814263,  0.03319826], dtype=float32), array([ 0.0448198 ,  0.06367143,  0.0836594 , ..., -0.03735045,
       -0.03814263,  0.06795873], dtype=float32), array([ 0.08645787,  0.07626364,  0.06793384, ...,  0.03923167,
       -0.03814263,  0.01290722], dtype=float32), array([ 0.02968117,  0.06116974,  0.01308713, ...,  0.04174259,
       -0.03514061,  0.01348449], dtype=float32), array([ 0.03507475,  0.08063287,  0.12374018, ...,  0.00621569,
        0.01357782, -0.00172263], dtype=float32), array([ 0.03755124,  0.14294566,  0.13777377, ...,  0.08175949,
       -0.01381669,  0.03261644], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.04549165, 0.06356134,
       0.01927945], dtype=float32), array([ 0.10558488,  0.07531881,  0.13316141, ...,  0.06899203,
       -0.01507561,  0.02357434], dtype=float32), array([0.08576518, 0.09175964, 0.13286252, ..., 0.01686598, 0.00403882,
       0.04984888], dtype=float32), array([ 0.07564398,  0.08293092,  0.09937647, ...,  0.03170902,
       -0.03814263,  0.02904022], dtype=float32), array([ 0.05906034,  0.18836679,  0.11147571, ...,  0.11908688,
       -0.03814263,  0.02796097], dtype=float32), array([ 0.05275091,  0.05900305,  0.12291861, ...,  0.02106831,
       -0.03814263, -0.02597314], dtype=float32), array([ 0.05770893,  0.10826097,  0.15755324, ...,  0.09877717,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.04755114,  0.04293785,  0.16898394, ...,  0.10194157,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.05907818,  0.08778394,  0.10399102, ...,  0.02131721,
       -0.00375033,  0.02984594], dtype=float32), array([0.09251843, 0.11944682, 0.19563341, ..., 0.09492623, 0.0266855 ,
       0.09403542], dtype=float32), array([ 0.05681719,  0.11070909,  0.14975175, ..., -0.00154413,
       -0.03814263, -0.00265169], dtype=float32), array([ 0.10509405,  0.13962108,  0.169213  , ...,  0.07598452,
        0.02138352, -0.00464084], dtype=float32), array([0.07908751, 0.05217166, 0.17863894, ..., 0.08349832, 0.00458443,
       0.07001193], dtype=float32), array([ 0.11154329,  0.05710877,  0.18487258, ...,  0.09665303,
       -0.03015057,  0.0822835 ], dtype=float32), array([ 0.0823365 ,  0.12936299,  0.15787415, ...,  0.04216639,
       -0.01021465,  0.02825012], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.02917957, 0.0536803 ,
       0.01927945], dtype=float32), array([ 0.10558488,  0.1201973 ,  0.13316141, ...,  0.06920481,
       -0.01899147,  0.04748207], dtype=float32), array([ 0.08682314,  0.16035514,  0.1100895 , ..., -0.00154413,
        0.02621263,  0.01877964], dtype=float32), array([ 0.07403149,  0.09029793,  0.08301459, ...,  0.11682858,
       -0.03814263,  0.02783682], dtype=float32), array([0.10085865, 0.05052872, 0.1337799 , ..., 0.0410377 , 0.01193772,
       0.07479349], dtype=float32), array([ 0.06883658,  0.13256311,  0.15614396, ...,  0.03050616,
       -0.03796535,  0.02588757], dtype=float32), array([ 8.3649792e-02,  1.4003788e-01,  1.7129116e-01, ...,
       -1.3513051e-02, -1.5475271e-04,  1.0177702e-01], dtype=float32), array([ 0.07026334,  0.10021541,  0.1792656 , ...,  0.09151173,
       -0.01143347, -0.00746236], dtype=float32), array([ 0.08484852,  0.14861953,  0.13358425, ..., -0.02230265,
       -0.03400671,  0.09014373], dtype=float32), array([ 0.04288212,  0.1628584 ,  0.09275819, ..., -0.01764143,
       -0.01918232,  0.06219047], dtype=float32), array([0.08735228, 0.15583171, 0.19333015, ..., 0.05846209, 0.00358031,
       0.03479525], dtype=float32), array([0.04276007, 0.08276037, 0.17760321, ..., 0.05306668, 0.09249227,
       0.02453583], dtype=float32), array([ 0.08416519,  0.04313573,  0.09093276, ...,  0.05306668,
        0.08328475, -0.02892259], dtype=float32), array([ 0.1050837 ,  0.06639223,  0.05494513, ...,  0.16259326,
       -0.03359268, -0.01302203], dtype=float32), array([ 0.08416519,  0.10077269,  0.10776243, ..., -0.00511506,
        0.03358733,  0.00067339], dtype=float32), array([ 0.07698821,  0.07803591,  0.12519787, ...,  0.06256687,
       -0.03814263,  0.08664464], dtype=float32), array([ 0.1321928 ,  0.12199464,  0.08273163, ...,  0.05742363,
       -0.0352064 ,  0.07566879], dtype=float32), array([ 0.0727778 ,  0.11961918,  0.11823579, ...,  0.03910372,
       -0.03120779,  0.05618702], dtype=float32), array([ 0.05171424,  0.15255061,  0.11985284, ..., -0.03926745,
        0.02933659,  0.06703546], dtype=float32), array([0.06617619, 0.10987964, 0.12570724, ..., 0.15175486, 0.01547175,
       0.07986686], dtype=float32), array([ 0.126351  ,  0.06151816,  0.10512231, ...,  0.07269067,
       -0.03814263,  0.04677429], dtype=float32), array([ 0.10897681,  0.09221081,  0.1879899 , ...,  0.07132967,
       -0.03814263,  0.1131511 ], dtype=float32), array([0.05499169, 0.04926322, 0.12104923, ..., 0.10288468, 0.01271343,
       0.06074053], dtype=float32), array([ 0.00175595,  0.07239655,  0.04122206, ...,  0.04429375,
       -0.03814263,  0.08230809], dtype=float32), array([ 0.0709524 ,  0.10243204,  0.07676063, ...,  0.05092203,
       -0.0249857 ,  0.05649034], dtype=float32), array([ 0.10758625,  0.12115274,  0.11326398, ...,  0.02855678,
       -0.02299648,  0.05549686], dtype=float32), array([ 0.05942245,  0.16220392,  0.06513431, ...,  0.00403842,
       -0.03814263,  0.00100973], dtype=float32), array([ 0.03462343,  0.06569002, -0.02357255, ..., -0.00891066,
       -0.03814263,  0.05719043], dtype=float32), array([ 0.02367993,  0.11731327,  0.07070098, ...,  0.03282117,
       -0.03814263,  0.07505313], dtype=float32), array([ 0.09139451,  0.1213074 ,  0.05202517, ...,  0.02046514,
       -0.0224293 ,  0.05549686], dtype=float32), array([ 0.06669892,  0.13002424,  0.09472754, ...,  0.07852342,
       -0.03814263,  0.05200857], dtype=float32), array([ 0.03085979,  0.16411139,  0.06656723, ..., -0.01190574,
       -0.0338017 ,  0.05825324], dtype=float32), array([ 0.04635181,  0.10974585,  0.09589692, ...,  0.00692286,
       -0.00765106,  0.0675621 ], dtype=float32), array([ 0.04339209,  0.05579249,  0.15450527, ...,  0.06967559,
       -0.01591625,  0.09143331], dtype=float32), array([ 0.09588628,  0.07439008,  0.09082685, ...,  0.04633462,
       -0.03814263,  0.08856498], dtype=float32), array([ 0.12232597,  0.07158332,  0.19603007, ...,  0.08739604,
       -0.0122683 ,  0.07326163], dtype=float32), array([ 0.02275919,  0.16411139,  0.12680823, ...,  0.06967559,
       -0.03814263,  0.06621873], dtype=float32), array([0.02369446, 0.15547168, 0.05551006, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.0260329 ,  0.03256358,  0.12072678, ...,  0.04663035,
       -0.01261347,  0.0841902 ], dtype=float32), array([ 0.01879253,  0.09798218,  0.09400927, ...,  0.03735862,
       -0.03814263,  0.09626605], dtype=float32), array([ 0.10328865,  0.08509537,  0.11506584, ...,  0.13104549,
       -0.03095129,  0.086454  ], dtype=float32), array([0.02275919, 0.16411139, 0.08834323, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.02624963,  0.03902737,  0.08861776, ...,  0.05177592,
       -0.01070801,  0.06792269], dtype=float32), array([ 0.05993937,  0.12343464,  0.10228015, ...,  0.05745545,
       -0.02224926,  0.05955847], dtype=float32), array([ 0.04551202,  0.176287  ,  0.14430583, ..., -0.03546636,
       -0.03029229, -0.00345806], dtype=float32), array([0.02275919, 0.16411139, 0.05573709, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.13070847,  0.15192609,  0.13666603, ...,  0.07619821,
       -0.01792219,  0.11983014], dtype=float32), array([ 0.09290419,  0.29323062,  0.1735278 , ...,  0.12908745,
       -0.02502481,  0.08008031], dtype=float32), array([ 0.06262758,  0.16934994,  0.16380714, ..., -0.02907247,
       -0.03814263, -0.0072329 ], dtype=float32), array([ 0.08484852,  0.16080168,  0.19612622, ...,  0.11275941,
       -0.02544033,  0.05149617], dtype=float32), array([ 0.06295563,  0.04761947,  0.16176738, ...,  0.10301219,
       -0.02559451,  0.10130759], dtype=float32), array([ 0.06540383,  0.19954015,  0.20175566, ...,  0.19391568,
       -0.02076216,  0.10526532], dtype=float32), array([ 0.03445043,  0.10518062,  0.0762269 , ...,  0.00779483,
       -0.01040095,  0.07078829], dtype=float32), array([ 0.02275919,  0.16411139,  0.06380051, ...,  0.03424048,
       -0.03018341,  0.06506533], dtype=float32), array([0.0416098 , 0.11082976, 0.12002824, ..., 0.03424048, 0.01652382,
       0.04823881], dtype=float32), array([ 0.08251766,  0.09600144,  0.09609004, ...,  0.03167634,
       -0.03814263, -0.01258131], dtype=float32), array([ 0.09196821,  0.10986441,  0.09943554, ...,  0.02369552,
       -0.02460027,  0.05558089], dtype=float32), array([0.0590032 , 0.11724192, 0.05512537, ..., 0.0118496 , 0.00709948,
       0.06796276], dtype=float32), array([ 0.07325102,  0.09853196,  0.13581274, ...,  0.01939702,
       -0.02669174,  0.10291215], dtype=float32), array([0.09908262, 0.0427498 , 0.14529076, ..., 0.05576538, 0.01908024,
       0.00908458], dtype=float32), array([-0.00823845,  0.16543354,  0.0926383 , ...,  0.19430181,
       -0.03814263,  0.06369505], dtype=float32), array([ 0.04700416,  0.1867569 ,  0.1533788 , ..., -0.01604737,
       -0.03164654,  0.06967777], dtype=float32), array([ 0.03834976,  0.07844851,  0.02640763, ...,  0.14640708,
       -0.02662517,  0.0495082 ], dtype=float32), array([ 0.11396881,  0.12684081,  0.07989192, ...,  0.16777962,
       -0.00323444,  0.06154715], dtype=float32), array([ 0.066962  ,  0.05806724,  0.14420737, ...,  0.044401  ,
       -0.03814263, -0.02581211], dtype=float32), array([0.0956309 , 0.11493645, 0.13144323, ..., 0.1011124 , 0.02415242,
       0.06114484], dtype=float32), array([ 0.06095172,  0.03615721,  0.07997877, ..., -0.02789195,
       -0.01160106, -0.02583642], dtype=float32), array([ 0.0589449 ,  0.10606927,  0.07807285, ..., -0.01849896,
       -0.03814263,  0.06512162], dtype=float32), array([ 0.0844486 ,  0.0841589 ,  0.06161225, ...,  0.03640024,
       -0.03814263,  0.07459302], dtype=float32), array([ 0.134728  ,  0.11687581,  0.12617205, ...,  0.08913621,
       -0.03216092,  0.0723759 ], dtype=float32), array([ 0.16400862,  0.15277007,  0.12280588, ...,  0.0150814 ,
       -0.00234766,  0.07265441], dtype=float32), array([ 0.10703056,  0.21124204,  0.06328084, ...,  0.04985657,
       -0.03814263,  0.0680062 ], dtype=float32), array([ 0.04762009,  0.2148328 ,  0.12129717, ...,  0.09092029,
       -0.0280107 ,  0.06125292], dtype=float32), array([ 0.06122737,  0.15811527,  0.07833301, ...,  0.00608845,
       -0.01241929,  0.04891423], dtype=float32), array([ 0.04544741,  0.10757673,  0.09371583, ...,  0.0254949 ,
       -0.03814263,  0.03512625], dtype=float32), array([0.11781666, 0.08178487, 0.09739185, ..., 0.01551077, 0.02116443,
       0.05504657], dtype=float32), array([ 0.07898492,  0.19872767,  0.07664378, ...,  0.08607066,
       -0.03814263,  0.08829124], dtype=float32), array([ 0.06262758,  0.17327708,  0.16380714, ..., -0.00763996,
       -0.03814263, -0.00437824], dtype=float32), array([ 0.0687221 ,  0.15380453,  0.06845457, ...,  0.09097259,
       -0.01556588,  0.00268409], dtype=float32), array([ 0.09737398,  0.0999466 ,  0.14459905, ..., -0.01693236,
       -0.03814263,  0.01309632], dtype=float32), array([ 0.05296021,  0.10155625,  0.11370152, ...,  0.02296354,
       -0.03663985,  0.02748565], dtype=float32), array([ 0.0550718 ,  0.14639288,  0.13693388, ...,  0.04519892,
       -0.01408176,  0.01908418], dtype=float32), array([0.06544938, 0.15666927, 0.17677858, ..., 0.00251395, 0.02656142,
       0.09256226], dtype=float32), array([ 0.0576892 ,  0.16017109,  0.10239063, ...,  0.02369552,
       -0.01513251,  0.05558089], dtype=float32), array([ 0.07149454,  0.07738895,  0.15472275, ...,  0.09967072,
       -0.00713429,  0.06205224], dtype=float32), array([ 0.05096561,  0.09975405,  0.13829494, ...,  0.0646703 ,
       -0.02517674,  0.06416072], dtype=float32), array([ 0.04118737,  0.12353454,  0.13936837, ...,  0.03409924,
       -0.00088844,  0.09719422], dtype=float32), array([0.04404324, 0.12720762, 0.04472166, ..., 0.12733658, 0.01497925,
       0.00194292], dtype=float32), array([ 0.04077566,  0.10007277,  0.10812829, ...,  0.02981298,
       -0.01748167,  0.06674401], dtype=float32), array([-0.01550015,  0.13553892, -0.03044511, ..., -0.03926745,
       -0.01199068,  0.08443667], dtype=float32), array([ 0.0711433 ,  0.05201079, -0.00176563, ..., -0.01201542,
       -0.03814263, -0.01678034], dtype=float32), array([ 0.02019117,  0.08796927, -0.03044511, ...,  0.01277419,
       -0.03814263,  0.02286086], dtype=float32), array([ 0.09262701,  0.12603025,  0.01500361, ...,  0.0041425 ,
       -0.01721946,  0.0652359 ], dtype=float32), array([ 0.01476154,  0.1353471 , -0.03044511, ...,  0.03261454,
       -0.03814263, -0.00274784], dtype=float32), array([ 0.05228613,  0.03384677,  0.00069748, ..., -0.00567655,
       -0.03814263,  0.00800889], dtype=float32), array([ 0.02378257,  0.1498467 , -0.03044511, ...,  0.0377831 ,
       -0.03814263, -0.00776624], dtype=float32), array([ 0.06511424,  0.18149021,  0.19843793, ...,  0.07084002,
       -0.03814263,  0.04690739], dtype=float32), array([ 0.09307673,  0.13291141,  0.12382974, ...,  0.02287332,
       -0.02336534,  0.04156443], dtype=float32), array([ 0.01654708,  0.13481121, -0.03044511, ...,  0.05909277,
       -0.03814263, -0.01365289], dtype=float32), array([ 0.02481831,  0.1392735 ,  0.10759261, ...,  0.04995108,
       -0.03549791,  0.08868442], dtype=float32), array([ 0.01279654,  0.12855001, -0.03044511, ...,  0.05229145,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.01591492,  0.15715592,  0.11737266, ..., -0.02002032,
       -0.02962212,  0.02767854], dtype=float32), array([ 0.02435273,  0.11231264, -0.03044511, ...,  0.05992391,
       -0.03814263, -0.02892259], dtype=float32), array([0.02376635, 0.03556767, 0.02646068, ..., 0.10632691, 0.03840991,
       0.02400864], dtype=float32), array([ 0.01860841,  0.10220166, -0.02707466, ...,  0.05086929,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.06252009,  0.09052779,  0.05622405, ...,  0.08277726,
       -0.03814263,  0.03610033], dtype=float32), array([ 0.03907557,  0.11429281,  0.00819061, ..., -0.03926745,
       -0.03814263, -0.00854429], dtype=float32), array([ 0.02979692,  0.12859468,  0.03009896, ..., -0.03926745,
       -0.01437241, -0.00642798], dtype=float32), array([-0.01988107,  0.07600649,  0.06797623, ...,  0.05777366,
        0.00432163,  0.04035112], dtype=float32), array([0.00699613, 0.13168575, 0.03224277, ..., 0.13432212, 0.00333977,
       0.06121249], dtype=float32), array([0.0574318 , 0.09437264, 0.07642394, ..., 0.03463751, 0.0022449 ,
       0.0418727 ], dtype=float32), array([ 0.08064809,  0.07947964,  0.12770635, ...,  0.13230087,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.01680276,  0.07526043,  0.04323175, ..., -0.03926745,
       -0.03814263, -0.01049163], dtype=float32), array([ 0.07598264,  0.13567737,  0.09173384, ..., -0.02745138,
        0.0189583 , -0.01430729], dtype=float32), array([ 0.10726005,  0.13412085,  0.18488626, ..., -0.00683629,
       -0.03814263,  0.06642674], dtype=float32), array([ 0.06037651,  0.08202238,  0.16370231, ...,  0.07647158,
       -0.02899953, -0.01229508], dtype=float32), array([ 0.0475829 ,  0.10219084,  0.11584309, ...,  0.08701865,
       -0.01801323,  0.0470693 ], dtype=float32), array([ 0.08847661,  0.11759412,  0.09194948, ...,  0.08651745,
       -0.03645133,  0.04095907], dtype=float32), array([0.05017384, 0.07326708, 0.11727326, ..., 0.10945997, 0.00233977,
       0.04391011], dtype=float32), array([ 0.02688095,  0.13716653,  0.07401535, ...,  0.09344514,
       -0.03814263,  0.00644236], dtype=float32), array([ 0.03481552,  0.02988851,  0.05987809, ..., -0.00465294,
       -0.03452516,  0.00991839], dtype=float32), array([ 0.08484852,  0.14766107,  0.27925816, ...,  0.03168964,
       -0.01966913,  0.01738691], dtype=float32), array([ 0.02650172,  0.13412185,  0.09889919, ..., -0.01119425,
       -0.0295766 ,  0.02892657], dtype=float32), array([ 0.05603222,  0.08225174,  0.18120885, ...,  0.083465  ,
       -0.03814263, -0.00353423], dtype=float32), array([ 0.08251766,  0.05517632,  0.13356145, ...,  0.18673562,
       -0.03814263,  0.00029763], dtype=float32), array([ 0.03920261,  0.11786988,  0.1530823 , ..., -0.03926745,
       -0.01379242,  0.01927945], dtype=float32), array([0.09510153, 0.08081179, 0.10897003, ..., 0.03460962, 0.03959017,
       0.06485603], dtype=float32), array([ 0.07874823,  0.17884706,  0.10298396, ...,  0.05464249,
       -0.02257323,  0.06351391], dtype=float32), array([ 0.08179848,  0.17447859,  0.12401593, ...,  0.01387853,
       -0.03814263,  0.02328598], dtype=float32), array([ 0.09509943,  0.19236717,  0.11837321, ..., -0.031828  ,
       -0.03697804,  0.03233077], dtype=float32), array([ 0.090388  ,  0.16259365,  0.08466899, ...,  0.09872125,
       -0.03771278,  0.05611002], dtype=float32), array([ 0.02205419,  0.13974047,  0.09178976, ...,  0.02815794,
       -0.01414806,  0.01840639], dtype=float32), array([0.08692412, 0.15785149, 0.0825119 , ..., 0.08707576, 0.04993172,
       0.11586791], dtype=float32), array([0.02150635, 0.10912733, 0.11644456, ..., 0.08746654, 0.02481652,
       0.01750685], dtype=float32), array([ 0.09794389,  0.13877003,  0.12107924, ...,  0.0783311 ,
       -0.03814263,  0.03761261], dtype=float32), array([ 0.07914004,  0.08628422,  0.17773359, ...,  0.07728365,
       -0.02109174,  0.06041912], dtype=float32), array([ 0.07771505,  0.09564464,  0.108064  , ...,  0.01213985,
       -0.03814263,  0.08720908], dtype=float32)]","[[ 0.10849061  0.08683416  0.01812891 ...  0.01047986 -0.03814263
   0.05833501]]","[0.41836631298065186, 0.4123789072036743, 0.47702574729919434, 0.7196345031261444, 0.3887515068054199, 0.4307624101638794, 0.40985023975372314, 0.31771934032440186, 0.5012294054031372, 0.5094768702983856, 0.2636876106262207, 0.3265411853790283, 0.368013858795166, 0.309082567691803, 0.3834412693977356, 0.2897469401359558, 0.3953973650932312, 0.18904167413711548, 0.40289103984832764, 0.4257654547691345, 0.4156210422515869, 0.33711493015289307, 0.5387668311595917, 0.3463035225868225, 0.3704310655593872, 0.28268706798553467, 0.3334891200065613, 0.33057212829589844, 0.33932775259017944, 0.40942877531051636, 0.3926181197166443, 0.31277889013290405, 0.4006884694099426, 0.4462552070617676, 0.37807410955429077, 0.40840625762939453, 0.3598986864089966, 0.4173632860183716, 0.32412004470825195, 0.5459225475788116, 0.3757094144821167, 0.45370352268218994, 0.45478546619415283, 0.302675724029541, 0.35567641258239746, 0.4528583288192749, 0.40931767225265503, 0.5068343281745911, 0.42046916484832764, 0.5020104646682739, 0.4604026675224304, 0.3829471468925476, 0.27581310272216797, 0.3996827006340027, 0.347689151763916, 0.4960157871246338, 0.3531208038330078, 0.46999937295913696, 0.3436192274093628, 0.3541175127029419, 0.29953956604003906, 0.4232611060142517, 0.41610658168792725, 0.40284156799316406, 0.3631928563117981, 0.4143301248550415, 0.41672778129577637, 0.3499477505683899, 0.3376796245574951, 0.3648136258125305, 0.5414279997348785, 0.39828991889953613, 0.45679599046707153, 0.3830442428588867, 0.4772958755493164, 0.41684478521347046, 0.3240206241607666, 0.310463011264801, 0.45021188259124756, 0.4767811894416809, 0.3201048970222473, 0.433615505695343, 0.4176623225212097, 0.3541879653930664, 0.5900311768054962, 0.40069663524627686, 0.35995054244995117, 0.39621502161026, 0.41029995679855347, 0.40206700563430786, 0.3641054630279541, 0.40389567613601685, 0.41687649488449097, 0.41305601596832275, 0.45038342475891113, 0.34141623973846436, 0.40194129943847656, 0.4759901165962219, 0.4178081154823303, 0.3555801510810852, 0.41533321142196655, 0.6069341897964478, 0.3840991258621216, 0.43992215394973755, 0.4219856858253479, 0.6303229629993439, 0.5315706133842468, 0.36644524335861206, 0.41724610328674316, 0.4290289878845215, 0.40180128812789917, 0.5058231055736542, 0.363109827041626, 0.5460849106311798, 0.5017425715923309, 0.468097448348999, 0.44029468297958374, 0.37100571393966675, 0.4559980034828186, 0.4060742259025574, 0.3792850971221924, 0.41035324335098267, 0.33237510919570923, 0.412559449672699, 0.3936716914176941, 0.3489874005317688, 0.5033339858055115, 0.41247862577438354, 0.40330493450164795, 0.4273058772087097, 0.41308534145355225, 0.39518243074417114, 0.5164369344711304, 0.3867102861404419, 0.4250642657279968, 0.379238486289978, 0.3717050552368164, 0.40336233377456665, 0.37438076734542847, 0.41569000482559204, 0.48249340057373047, 0.5085158944129944, 0.39475059509277344, 0.41890019178390503, 0.3897303342819214, 0.39994895458221436, 0.38748520612716675, 0.37167221307754517, 0.4050505757331848, 0.3733651638031006, 0.49476468563079834, 0.3726017475128174, 0.4866734743118286, 0.4713010787963867, 0.5001552104949951, 0.34687405824661255, 0.3931117653846741, 0.4034896492958069, 0.34611713886260986, 0.3483612537384033, 0.37386155128479004, 0.3508385419845581, 0.38618218898773193, 0.3828555941581726, 0.36510521173477173, 0.3662276864051819, 0.3787305951118469, 0.4412690997123718, 0.4071219563484192, 0.3935226798057556, 0.40594327449798584, 0.4676041007041931, 0.6336572766304016, 0.38297921419143677, 0.4179110527038574, 0.5299840271472931, 0.44967204332351685, 0.42331862449645996, 0.5391659736633301, 0.5116451680660248, 0.41857874393463135, 0.4740033745765686, 0.4499659538269043, 0.4672865867614746, 0.45831722021102905, 0.4696834087371826, 0.4594177007675171, 0.383029580116272, 0.3644210696220398, 0.35287290811538696, 0.4070570468902588, 0.3819919228553772, 0.3582916855812073, 0.39043110609054565, 0.4312780499458313, 0.4623425602912903, 0.36536622047424316, 0.40134942531585693, 0.44418519735336304, 0.4640815258026123, 0.34712374210357666, 0.5122227668762207, 0.3734588623046875, 0.4687860608100891, 0.4276140332221985, 0.5464377701282501, 0.49157410860061646, 0.3591635227203369, 0.4467955231666565, 0.3544688820838928, 0.40397876501083374, 0.3919466733932495, 0.36232054233551025, 0.48462045192718506, 0.4706389307975769, 0.47297781705856323, 0.35514897108078003, 0.3461619019508362, 0.4211517572402954, 0.44777148962020874, 0.4267500042915344, 0.3882460594177246, 0.43578290939331055, 0.46861594915390015, 0.35304611921310425, 0.49806100130081177, 0.3863469958305359, 0.36711788177490234, 0.3831539750099182, 0.43393200635910034, 0.48202598094940186, 0.40183520317077637, 0.3848450183868408, 0.37002241611480713, 0.4430811405181885, 0.5624792873859406, 0.458978533744812, 0.4626219868659973, 0.37434303760528564, 0.3646516799926758, 0.41560685634613037, 0.44468480348587036, 0.44561970233917236, 0.3941746950149536, 0.41688114404678345, 0.4299665093421936, 0.38772374391555786, 0.41288328170776367, 0.3270125985145569, 0.31645315885543823, 0.6195682287216187, 0.4033212661743164, 0.33584481477737427, 0.42482441663742065, 0.3273301124572754, 0.4409053921699524, 0.4124256372451782, 0.39648914337158203, 0.3977096676826477, 0.4468430280685425, 0.4867076277732849, 0.409423291683197, 0.4059707522392273, 0.38848602771759033, 0.42128700017929077, 0.4071347713470459, 0.3307057023048401, 0.48785126209259033, 0.4082759618759155, 0.35381799936294556, 0.37333619594573975, 0.4852829575538635, 0.4021461606025696, 0.40592068433761597, 0.38544654846191406, 0.47315096855163574, 0.4766339659690857, 0.4164758324623108, 0.4968467950820923, 0.3800540566444397, 0.4121997356414795, 0.3634430766105652, 0.4273608326911926, 0.471418559551239, 0.415848970413208, 0.4092288613319397, 0.36637723445892334, 0.4382796883583069, 0.36785733699798584, 0.46466362476348877, 0.3732154965400696, 0.31700170040130615, 0.3600098490715027, 0.3626750707626343, 0.3943011164665222, 0.397808313369751, 0.3686976432800293, 0.40062659978866577, 0.3647341728210449, 0.3954717516899109, 0.48768723011016846, 0.3083752989768982, 0.4361947178840637, 0.40367037057876587, 0.37014496326446533, 0.36733728647232056, 0.4308406710624695, 0.38748717308044434, 0.4147031307220459, 0.4399802088737488, 0.39527368545532227, 0.39008307456970215, 0.6245402097702026, 0.31987881660461426, 1.0465744584798813, 0.22302228212356567, 1.0523450560867786, 0.4620668888092041, 1.0381730161607265, 0.35619282722473145, 0.40974897146224976, 1.0154853388667107, 0.41148102283477783, 1.0393381603062153, 0.4001126289367676, 1.023379011079669, 0.4785770773887634, 1.0270944572985172, 0.5324442982673645, 0.5853849351406097, 0.5264983177185059, 0.477788507938385, 0.33631134033203125, 0.472720205783844, 0.41381025314331055, 0.5949023962020874, 0.4800061583518982, 0.3942604064941406, 0.41601842641830444, 0.5028066039085388, 0.42915964126586914, 0.46062004566192627, 0.42971712350845337, 0.5334776341915131, 0.41496723890304565, 0.452589213848114, 0.4422561526298523, 0.43657422065734863, 0.42144328355789185, 0.3529290556907654, 0.3677328824996948, 0.38987332582473755, 0.4837096929550171, 0.41814619302749634, 0.44235289096832275, 0.388802707195282, 0.4307786822319031, 0.3718125820159912, 0.38414669036865234, 0.3453572988510132]",17
"17MA
NI
PUL
ATING
 IMAGE
SIf you have a digital camera or even if 
you
 just upload photos from your phone 
to
 Facebook, you probably cross paths with 
digital image ˜les all the time. You may know 
how to use basic graphics software, such as Microsoft 
Paint or Paintbrush, or even more advanced applica
-tions such as Adobe Photoshop. But if you need to 
edit a massive number of images, editing them by 
hand can be a lengthy, boring job.
Enter Python. Pillow is a third-party Python module for interacting 
with image ˜les. The module has several functions that make it easy to 
crop, resize, and edit the content of an image. With the power to manipu
-late images the same way you would with software such as Microsoft Paint 
or Adobe Photoshop, Python can automatically edit hundreds or thousands 
of images with ease.
 388
   Chapter 17
Computer 
Ima
ge 
Fun
damentals
In order to manipulate an image, you need to understand the basics of how 
computers deal with colors and coordinates in images and how you can 
work with colors and coordinates in Pillow. But before you continue, install 
the 
pillow module. See Appendix A for help installing third-party modules.
Colors and RGBA Values
Computer programs often represent a color in an image as an 
RGBA value
. An RGBA value is a group of numbers that specify the amount of red, green, 
blue, and 
alpha
 (or transparency) in a color. Each of these component values 
is an integer from 
0 (none at all) to 
255 (the maximum). These RGBA values 
are assigned to individual 
pixel
s; a pixel is the smallest dot of a single color 
the computer screen can show (as you can imagine, there are millions of 
pixels on a screen). A pixel™s RGB setting tells it precisely what shade of 
color it should display. Images also have an alpha value to create RGBA 
values. If an image is displayed on the screen over a background image 
or desktop wallpaper, the alpha value determines how much of the back-
ground you can ﬁsee throughﬂ the image™s pixel.
In Pillow, RGBA values are represented by a tuple of four integer values. 
For example, the color red is represented by 
(255, 0, 0, 255). This color has 
the maximum amount of red, no green or blue, and the maximum alpha 
value, meaning it is fully opaque. Green is represented by 
(0, 255, 0, 255), and blue is 
(0, 0, 255, 255). White, the combination of all colors, is 
(255, 255, 255, 255), while black, which has no color at all, is 
(0, 0, 0, 255).If a color has an alpha value of 
0, it is invisible, and it doesn™t really mat-
ter what the RGB values are. After all, invisible red looks the same as invis-
ible black. 
Pillow uses the standard color names that HTML uses. Table 17-1 lists a 
selection of standard color names and their values.
Table 17-1: 
Standard Color Names and Their RGBA Values
Name
RG
BA v
alue
Name
RG
BA v
alue
White
(255, 255, 255, 255)Red
(255, 0, 0, 255)Green
(0, 128, 0, 255)Blue
(0, 0, 255, 255)Gray
(128, 128, 128, 255)Yellow
(255, 255, 0, 255)Black
(0, 0, 0, 255)Purple
(128, 0, 128, 255)Pillow offers the 
ImageColor.getcolor() function so you don™t have to 
memorize RGBA values for the colors you want to use. This function takes 
a color name string as its ˜rst argument, and the string 
'RGBA' as its second 
argument, and it returns an RGBA tuple. 
 Manipulating Images
   389
To see how this function works, enter the following into the interactive 
shell:
 >>> from PIL import ImageColor >>> ImageColor.getcolor('red', 'RGBA')(255, 0, 0, 255) >>> ImageColor.getcolor('RED', 'RGBA')(255, 0, 0, 255)>>> ImageColor.getcolor('Black', 'RGBA')(0, 0, 0, 255)>>> ImageColor.getcolor('chocolate', 'RGBA')(210, 105, 30, 255)>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')(100, 149, 237, 255)First, you need to import the 
ImageColor module from PIL 
 (not 
from
 Pillow; you™ll see why in a moment). The color name string you pass 
to
 ImageColor.getcolor() is case insensitive, so passing 
'red'  and passing 
'RED'  give you the same RGBA tuple. You can also pass more unusual 
color names, like 
'chocolate' and 
'Cornflower Blue'.Pillow supports a huge number of color names, from 
'aliceblue' to 
'whitesmoke'. You can ˜nd the full list of more than 100 standard color 
names in the resources at 
http://nostarch.com/automatestuff/
. Coordinates and Box Tuples
Image pixels are addressed with x- and y-coordinates, which respectively 
specify a pixel™s horizontal and vertical location in an image. The 
origin
 is 
the pixel at the top-left corner of the image and is speci˜ed with the nota-
tion (0, 0). The ˜rst zero represents the x-coordinate, which starts at zero 
at the origin and increases going from left to right. The second zero repre-
sents the y-coordinate, which starts at zero at the origin and increases going 
CMYK
 AND RGB COL
ORING
In grade school you learned that mixing red, yellow, and blue paints can 
form other colors; for example, you can mix blue and yellow to make green 
paint
. This is known as the 
subtractive color model
, and it applies to dyes, inks, 
and pigments
. This is why color printers have 
CMYK
 ink cartridges: the 
Cyan
 (blue), 
Magenta
 (red), 
Yellow
, and 
blacK
 ink can be mixed together to form any 
color
.Ho
wever, the physics of light uses what™s called an 
additive color model
. Wh
en combining light (such as the light given off by your computer screen), 
red, green, and blue light can be combined to form any other color
. This is why 
RGB
 values represent color in computer programs
. 390
   Chapter 17
down the image. This bears repeating: 
y-coordinates increase going downward, 
which is the opposite of how you may 
remember y-coordinates being used in 
math class. Figure 17-1 demonstrates how 
this coordinate system works.
Many of Pillow™s functions and 
 me
thods take a 
box tuple
 argument. This 
means Pillow is expecting a tuple of four 
integer coordinates that represent a rect-
angular region in an image. The four 
integers are, in order, as follows:
Left
: The x-coordinate of the leftmost 
edge of the box.
Top
: The y-coordinate of the top edge 
of the box.
Right
: The x-coordinate of one pixel 
to the right of the rightmost edge of 
the box. This integer must be greater 
than the left integer.
Bottom
: The y-coordinate of one pixel 
lower than the bottom edge of the 
box. This integer must be greater 
than the top integer.
Note that the box includes the left 
and top coordinates and goes up to but 
does not include the right and bottom 
coordinates. For example, the box tuple  
(3, 1, 9, 6) represents all the pixels in 
the
 black box in Figure 17-2.
Manipulating 
Ima
ges with Pillow
Now that you know how colors and coordinates work in Pillow, let™s use 
Pillow to manipulate an image. Figure 17-3 is the image that will be used 
for all the interactive shell examples in this chapter. You can download it 
from 
http://nostarch.com/automatestuff/
.Once you have the image ˜le 
Zophie.png
 in your current working direc-
tory, you™ll be ready to load the image of Zophie into Python, like so:
>>> from PIL import Image>>> catIm = Image.open('zophie.png')Figure 17-2: 
The area represented 
by the box tuple 
(3, 1, 9, 6)x increasesy increases(0,0)(27,26)Figure 17-1: The x- and y-coordinates 
of a 27×26 image of some sort of 
ancient data storage device
 Manipulating Images
   391
Figure 17-3: My cat Zophie. The camera  
adds 10 pounds (which is a lot for a cat).
To load the image, you import the 
Image module from Pillow and call 
Image.open(), passing it the image™s ˜lename. You can then store the loaded 
image in a variable like 
CatIm. The module name of Pillow is 
PIL to make it 
backward compatible with an older module called Python Imaging Library, 
which is why you must run 
from PIL import Image instead of 
from Pillow import Image. Because of the way Pillow™s creators set up the 
pillow module, you must 
use the 
from PIL import Image form of 
import statement, rather than simply 
import PIL.If the image ˜le isn™t in the current working directory, change the 
working directory to the folder that contains the image ˜le by calling the 
os.chdir() function.
>>> import os>>> os.chdir('C:\\folder_with_image_file')The 
Image.open() function returns a value of the 
Image object data type, 
which is how Pillow represents an image as a Python value. You can load an 
Image object from an image ˜le (of any format) by passing the 
Image.open() function a string of the ˜lename. Any changes you make to the 
Image object can be saved to an image ˜le (also of any format) with the 
save() method. All the rotations, resizing, cropping, drawing, and other image 
manipulations will be done through method calls on this 
Image object.
To shorten the examples in this chapter, I™ll assume you™ve imported 
Pillow™s 
Image module and that you have the Zophie image stored in a variable 
named 
catIm. Be sure that the 
zophie.png
 ˜le is in the current working direc-
tory so that the 
Image.open() function can ˜nd it. Otherwise, you will also have 
to specify the full absolute path in the string argument to 
Image.open(). 392
   Chapter 17
Working with the Image Data Type
An 
Image object has several useful attributes that give you basic information 
about the image ˜le it was loaded from: its width and height, the ˜lename, 
and the graphics format (such as JPEG, GIF, or PNG). 
For example, enter the following into the interactive shell:
>>> from PIL import Image>>> catIm = Image.open('zophie.png')>>> catIm.size (816, 1088) >>> width, height = catIm.size >>> width816 >>> height1088>>> catIm.filename'zophie.png'>>> catIm.format'PNG'>>> catIm.format_description'Portable network graphics' >>> catIm.save('zophie.jpg')After making an 
Image object from 
Zophie.png
 and storing the 
Image object in 
catIm, we can see that the object™s 
size attribute contains a tuple 
of the image™s width and height in pixels 
. We can assign the values in the 
tuple to 
width and 
height variables 
 in order to access with width 
 and 
height 
 individually. The 
filename attribute describes the original ˜le™s 
name. The 
format and 
format_description attributes are strings that describe 
the image format of the original ˜le (with 
format_description being a bit 
more verbose).
Finally, calling the 
save() method and passing it 
'zophie.jpg' saves a new 
image with the ˜lename 
zophie.jpg
 to your hard drive 
. Pillow sees that
 the 
˜le extension is 
.jpg
 and automatically saves the image using the JPEG image 
format. Now you should have two images, 
zophie.png
 and 
zophie.jpg
, on your 
hard drive. While these ˜les are based on the same image, they are not iden
-tical because of their different formats.
Pillow also provides the 
Image.new() function, which returns an 
Image objectŠmuch like 
Image.open(), except the image represented by 
Image.new()™s 
object will be blank. The arguments to 
Image.new() are as follows:
The string 
'RGBA', which sets the color mode to RGBA. (There are other 
modes that this book doesn™t go into.)
The size, as a two-integer tuple of the new image™s width and height.
 Manipulating Images
   393
The background color that the image should start with, as a four-
integer tuple of an RGBA value. You can use the return value of 
the
 ImageColor.getcolor() function for this argument. Alternatively, 
Image.new() also supports just passing the string of the standard 
color
 name.
For example, enter the following into the interactive shell:
>>> from PIL import Image >>> im = Image.new('RGBA', (100, 200), 'purple')>>> im.save('purpleImage.png') >>> im2 = Image.new('RGBA', (20, 20))>>> im2.save('transparentImage.png')Here we create an 
Image object for an image that™s 100 pixels wide and 
200 pixels tall, with a purple background 
. This image is then saved to 
the ˜le 
purpleImage.png
. We call 
Image.new() again to create another 
Image object, this time passing (20, 20) for the dimensions and nothing for the 
background color 
. Invisible black, 
(0, 0, 0, 0), is the default color used if 
no color argument is speci˜ed, so the second image has a transparent back-
ground; we save this 20×20 transparent square in 
transparentImage.png
.Cropping Images
Cropping
 an image means selecting a rectangular region inside an image 
and removing everything outside the rectangle. The 
crop() method on 
Image objects takes a box tuple and returns an 
Image object representing 
the cropped image. The cropping does not happen in placeŠthat is, the 
original 
Image object is left untouched, and the 
crop() method returns a 
new 
Image object. Remeber that a boxed tupleŠin this case, the cropped 
se
ctionŠincludes the left column and top row of pixels but only goes up 
to
 and does 
not include the right column and bottom row of pixels.
Enter the following into the interactive shell:
>>> croppedIm = catIm.crop((335, 345, 565, 560))>>> croppedIm.save('cropped.png')This makes a new 
Image object for the cropped image, stores the 
object
 in croppedIm, and then calls 
save() on 
croppedIm to save the cropped 
image in 
cropped.png
. The new ˜le 
cropped.png
 will be created from the ori
-gi
nal image, like in Figure 17-4.
 394
   Chapter 17
     Figure 17-4: The new image will be just the cropped  
section of the original image.
Copying and Pasting Images onto Other Images
The 
copy() method will return a new 
Image object with the same image 
as the 
Image object it was called on. This is useful if you need to make 
changes to an image but also want to keep an untouched version of the 
original. For example, enter the following into the interactive shell:
>>> catIm = Image.open('zophie.png')>>> catCopyIm = catIm.copy()The 
catIm and 
catCopyIm variables contain two separate 
Image objects, 
which both have the same image on them. Now that you have an 
Image object stored in 
catCopyIm, you can modify 
catCopyIm as you like and save 
it to
 a new ˜lename, leaving 
zophie.png
 untouched. For example, let™s try 
 modifying 
catCopyIm with the 
paste() method.
The 
paste() method is called on an 
Image object and pastes another image 
on top of it. Let™s continue the shell example by pasting a smaller image onto 
catCopyIm.>>> faceIm = catIm.crop((335, 345, 565, 560))>>> faceIm.size(230, 215)>>> catCopyIm.paste(faceIm, (0, 0))>>> catCopyIm.paste(faceIm, (400, 500))>>> catCopyIm.save('pasted.png') Manipulating Images
   395
First we pass 
crop() a box tuple for the rectangular area in 
zophie.png
 that contains Zophie™s face. This creates an 
Image object representing a 
230×215 crop, which we store in 
faceIm. Now we can paste 
faceIm onto 
 catCopyIm. The 
paste() method takes two arguments: a ﬁsourceﬂ 
Image object
 and a tuple of the x- and y-coordinates where you want to paste 
the top-left corner of the source 
Image object onto the main 
Image object. 
Here
 we call 
paste() twice on 
catCopyIm, passing (0, 0) the ˜rst time and 
(400, 500) the second time. This pastes 
faceIm onto 
catCopyIm twice: once 
with the top-left corner of 
faceIm at (0, 0) on 
catCopyIm, and once with 
the top-left corner of 
faceIm at (400, 500). Finally, we save the modi˜ed 
 catCopyIm to 
pasted.png
. The 
pasted.png
 image looks like Figure 17-5.
Figure 17-5: Zophie the cat, with her face  
pasted twice
NOTE
 Despite their names, the 
copy() and 
paste() methods in Pillow do not use your com-
puter™s clipboard.
Note that the 
paste() method modi˜es its 
Image object 
in place
; it does 
not return an 
Image object with the pasted image. If you want to call 
paste() but also keep an untouched version of the original image around, you™ll 
need to ˜rst copy the image and then call 
paste() on that copy.
Say you want to tile Zophie™s head across the entire image, as in 
Figure 17-6. You can achieve this effect with just a couple 
for loops. 
Continue the interactive shell example by entering the following:
>>> catImWidth, catImHeight = catIm.size>>> faceImWidth, faceImHeight = faceIm.size >>> catCopyTwo = catIm.copy() 396   Chapter 17
 >>> for left in range(0, catImWidth, faceImWidth):         for top in range(0, catImHeight, faceImHeight):            print(left, top)            catCopyTwo.paste(faceIm, (left, top))0 00 2150 4300 6450 8600 1075230 0230 215--snip--690 860690 1075>>> catCopyTwo.save('tiled.png')Here we store the width of height of 
catIm in 
catImWidth and 
 catImHeight. At 
 we make a copy of 
catIm and store it in 
catCopyTwo. Now 
that
 we have a copy that we can paste onto, we start looping to paste 
faceIm onto 
 catCopyTwo. The outer 
for loop™s 
left variable starts at 0 and increases by 
 faceImWidth(230) . The inner 
for loop™s 
top variable start at 0 and
 increases 
by faceImHeight(215) . These nested 
for loops
 produce values for 
left and 
top to paste a grid of 
faceIm images over the 
catCopyTwo Image object, as in 
Figure 17-6. To see our nested loops working, we print 
left and 
top. After 
the pasting is complete, we save the modi˜ed 
catCopyTwo to 
tiled.png
.Figure 17-6: Nested 
for loops used  
with 
paste() to duplicate the cat™s face  
(a dupli-cat, if you will).
 Manipulating Images
   397
Resizing an Image
The 
resize() method is called on an 
Image object and returns a new 
Image object of the speci˜ed width and height. It accepts a two-integer tuple argu-
ment, representing the new width and height of the returned image. Enter 
the following into the interactive shell:
 >>> width, height = catIm.size >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))>>> quartersizedIm.save('quartersized.png') >>> svelteIm = catIm.resize((width, height + 300))>>> svelteIm.save('svelte.png')Here we assign the two values in the 
catIm.size tuple to the variables 
width and 
height . Using 
width and 
height instead of 
catIm.size[0] and 
 catIm.size[1] makes the rest of the code more readable.
The ˜rst 
resize() call passes 
int(width / 2) for the new width and 
int(height / 2) for the new height 
, so the 
Image object returned from 
resize() will be half the length and width of the original image, or one-
quarter of the original image size overall. The 
resize() method accepts 
only integers in its tuple argument, which is why you needed to wrap both 
divisions by 
2 in an 
int() call.
This resizing keeps the same proportions for the width and height. But 
the new width and height passed to 
resize() do not have to be proportional 
to the original image. The 
svelteIm variable contains an 
Image object that 
has the original width but a height that is 300 pixels taller 
, giving Zophie 
a more slender look.
Note that the 
resize() method does not edit the 
Image object in place 
but instead returns a new 
Image object.
PAS
TING 
TRANSP
ARE
NT PIXEL
SNormally transparent pixels are pasted as white pixels
. If the image you want 
to paste has transparent pixels, pass the 
Image object as the third argument 
so that a solid rectangle isn™t pasted
. This third argument is the ﬁmaskﬂ 
Image object
. A mask is an 
Image object where the alpha value is signi˜cant, but the 
red, green, and blue values are ignored
. The mask tells the 
paste() function 
which pixels it should copy and which it should leave transparent
. Advanced 
usage of masks is beyond this book, but if you want to paste an image that has 
transparent pixels, pass the 
Image object again as the third argument
. 398
   Chapter 17
Rotating and Flipping Images
Images can be rotated with the 
rotate() method, which returns a new 
Image object of the rotated image and leaves the original 
Image object unchanged. 
The argument to 
rotate() is a single integer or ˚oat representing the num-
ber of degrees to rotate the image counterclockwise. Enter the following 
into the interactive shell:
>>> catIm.rotate(90).save('rotated90.png')>>> catIm.rotate(180).save('rotated180.png')>>> catIm.rotate(270).save('rotated270.png')Note how you can 
chain
 method calls by calling 
save() directly on the 
Image object returned from 
rotate(). The ˜rst 
rotate() and 
save() call makes 
a new 
Image object representing the image rotated counterclockwise by 
90
 degrees and saves the rotated image to 
rotated90.png
. The second and 
third calls do the same, but with 180 degress and 270 degress. The results 
look like Figure 17-7.
Figure 17-7: The original image (left) and the image rotated counterclockwise by 90, 180, 
and 270 degrees
Notice that the width and height of the image change when the image 
is rotated 90 or 270 degrees. If you rotate an image by some other amount, 
the original dimensions of the image are maintained. On Windows, a 
black background is used to ˜ll in any gaps made by the rotation, like in 
Figure
 17-8. On OS X, transparent pixels are used for the gaps instead.
The 
rotate() method has an optional 
expand keyword argument that can 
be set to 
True to enlarge the dimensions of the image to ˜t the entire rotated 
new image. For example, enter the following into the interactive shell:
>>> catIm.rotate(6).save('rotated6.png')>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')The ˜rst call rotates the image 6 degrees and saves it to 
rotate6.png
 (see 
the image on the left of Figure 17-8). The second call rotates the image 6 
degrees with 
expand set to 
True and saves it to 
rotate6_expanded.png
 (see the 
image on the right of Figure 17-8).
 Manipulating Images
   399
    Figure 17-8: The image rotated 6 degrees normally (left) and with 
expand=True (right)
You can also get a ﬁmirror ˚ipﬂ of an image with the 
transpose() method. 
You must pass either 
Image.FLIP_LEFT_RIGHT or 
Image.FLIP_TOP_BOTTOM to the 
transpose() method. Enter the following into the interactive shell:
>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')Like 
rotate(), transpose() creates a new 
Image object. Here was pass 
Image.FLIP_LEFT_RIGHT to ˚ip the image horizontally and then save the result 
to 
horizontal_˜ip.png
. To ˚ip the image vertically, we pass 
Image.FLIP_TOP_BOTTOM and save to 
vertical_˜ip.png
. The results look like Figure 17-9.
Figure 17-9: The original image (left), horizontal ˜ip (center), and vertical ˜ip (right)
 400
   Chapter 17
Changing Individual Pixels
The color of an individual pixel can be retrieved or set with the 
getpixel() and 
putpixel() methods. These methods both take a tuple representing the 
x- and y-coordinates of the pixel. The 
putpixel() method also takes an addi-
tional tuple argument for the color of the pixel. This color argument is a 
four-integer RGBA tuple or a three-integer RGB tuple. Enter the following 
into the interactive shell:
 >>> im = Image.new('RGBA', (100, 100)) >>> im.getpixel((0, 0))(0, 0, 0, 0) >>> for x in range(100):        for y in range(50):             im.putpixel((x, y), (210, 210, 210))>>> from PIL import ImageColor >>> for x in range(100):        for y in range(50, 100):             im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))>>> im.getpixel((0, 0))(210, 210, 210, 255)>>> im.getpixel((0, 50))(169, 169, 169, 255)>>> im.save('putPixel.png')At 
 we make a new image that is a 100×100 transparent square. 
Ca
lling 
getpixel() on some coordinates in this image returns 
(0, 0, 0, 0) because the image is transparent 
. To c
olor pixels in this image, we can 
use nested 
for loops to go through all the pixels in the top half of the 
image
  and color each pixel using 
putpixel() . Here we pass 
putpixel() the RGB tuple 
(210, 210, 210), a light gray.
Say we want to color the bottom half of the image dark gray but don™t 
know the RGB tuple for dark gray. The 
putpixel() method doesn™t accept a 
standard color name like 
'darkgray', so you have to use 
ImageColor.getcolor() to get a color tuple from 
'darkgray'. Loop through 
the pixels in the bottom half of the image 
 and pass 
putpixel() the return value of 
ImageColor.getcolor() , an
d you should now have an image that is light gray 
in
 its top half and dark gray in the bottom half, as 
shown in Figure 17-10. You can call 
getpixel() on some 
coordinates to con˜rm that the color at any given 
pixel is what you expect. Finally, save the image to 
 put
Pixel.png
.Of course, drawing one pixel at a time onto 
an image isn™t very convenient. If you need to draw 
shapes, use the 
ImageDraw functions explained later 
in
 this chapter.
Figure 17-10: 
The 
 putPixel
.png
 image 
 Manipulating Images
   401
Project: Adding a 
Log
oSay you have the boring job of resizing thousands 
of images and adding a small logo watermark to 
the corner of each. Doing this with a basic graph-
ics program such as Paintbrush or Paint would 
take forever. A fancier graphics application such 
as Photoshop can do batch processing, but that 
software costs hundreds of dollars. Let™s write a 
script to do it instead.
Say that Figure 17-11 is the logo you want to 
add to the bottom-right corner of each image: a 
black cat icon with a white border, with the rest 
of
 the image transparent.
At a high level, here™s what the program 
should do:
Load the logo image.
Loop over all 
.png
 and
.jpg
 ˜les in the working directory.
Check whether the image is wider or taller than 300 pixels.
If so, reduce the width or height (whichever is larger) to 300 pixels and 
scale down the other dimension proportionally.
Paste the logo image into the corner.
Save the altered images to another folder.
This means the code will need to do the following:
Open the 
catlogo.png
 ˜le as an 
Image object.
Loop over the strings returned from 
os.listdir('.').Get the width and height of the image from the 
size attribute.
Calculate the new width and height of the resized image.
Call the 
resize() method to resize the image.
Call the 
paste() method to paste the logo.
Call the 
save() method to save the changes, using the original ˜lename.
Step 1: Open the Logo Image
For this project, open a new ˜le editor window, enter the following code, 
and save it as 
resizeAndAddLogo.py
:#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.Figure 17-11: The logo to be 
added to the image.
 402
   Chapter 17
import osfrom PIL import Image SQUARE_FIT_SIZE = 300 LOGO_FILENAME = 'catlogo.png' logoIm = Image.open(LOGO_FILENAME) logoWidth, logoHeight = logoIm.size# TODO: Loop over all files in the working directory.# TODO: Check if image needs to be resized.# TODO: Calculate the new width and height to resize to.# TODO: Resize the image.# TODO: Add the logo.# TODO: Save changes.By setting up the 
SQUARE_FIT_SIZE  and 
LOGO_FILENAME  constants at the 
start of the program, we™ve made it easy to change the program later. Say 
the logo that you™re adding isn™t the cat icon, or say you™re reducing the out-
put images™ largest dimension to something other than 300 
 pi
xels. With these 
constants at the start of the program, you can just open the code, change 
those values once, and you™re done. (Or you can make it so that the values 
for these constants are taken from the command line arguments.) Without 
these constants, you™d instead have to search the code for all instances of 
300 and 
'catlogo.png' and replace them with the values for your new project. 
In short, using constants makes your program more generalized.
The logo 
Image object is returned from 
Image.open() . For readability, 
logoWidth and 
logoHeight are assigned to the values from 
logoIm.size .The rest of the program is a skeleton of 
TODO comments for now.
Step 2: Loop Over All Files and Open Images
Now you need to ˜nd every 
.png
 ˜le and 
.jpg
 ˜le in the current working 
directory. Note that you don™t want to add the logo image to the logo image 
itself, so the program should skip any image with a ˜lename that™s the same 
as 
LOGO_FILENAME. Add the following to your code:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip-- Manipulating Images
   403
os.makedirs('withLogo', exist_ok=True)# Loop over all files in the working directory. for filename in os.listdir('.'):     if not (filename.endswith('.png') or filename.endswith('.jpg')) \       or filename == LOGO_FILENAME:         continue    # skip non-image files and the logo file itself     im = Image.open(filename)    width, height = im.size--snip--First, the 
os.makedirs() call creates a 
withLogo
 folder to store the ˜n-
ished images with logos, instead of overwriting the original image ˜les. 
The 
exist_ok=True keyword argument will keep 
os.makedirs() from raising 
an exception if 
withLogo
 already exists. While looping through all the ˜les 
in the working directory with 
os.listdir('.') , the long 
if statement 
 checks whether each ˜lename doesn™t end with 
.png
 or 
.jpg
. If
 soŠor if the 
˜le is the logo image itselfŠthen the loop should skip it and use 
continue  to go to the next ˜le. If 
filename does
 end with 
'.png' or 
'.jpg' (and isn™t the 
logo ˜le), you can open it as an 
Image object 
 and set 
width and 
height.Step 3: Resize the Images
The program should resize the image only if the width or height is larger 
than 
SQUARE_FIT_SIZE (300 pixels, in this case), so put all of the resizing code 
inside an 
if statement that checks the 
width and 
height variables. Add the 
following code to your program:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip--    # Check if image needs to be resized.    if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:        # Calculate the new width and height to resize to.        if width > height:             height = int((SQUARE_FIT_SIZE / width) * height)            width = SQUARE_FIT_SIZE        else:             width = int((SQUARE_FIT_SIZE / height) * width)            height = SQUARE_FIT_SIZE        # Resize the image.        print('Resizing %s...' % (filename))         im = im.resize((width, height))--snip-- 404
   Chapter 17
If the image does need to be resized, you need to ˜nd out whether it is 
a wide or tall image. If 
width is greater than 
height, then the height should 
be reduced by the same proportion that the width would be reduced 
. This proportion is the 
SQUARE_FIT_SIZE value divided by the current width. 
The new 
height value is this proportion multiplied by the current 
height value. Since the division operator returns a ˚oat value and 
resize() requires 
the dimensions to be integers, remember to convert the result to an integer 
with the 
int() function. Finally, the new 
width value will simply be set to 
SQUARE_FIT_SIZE.If the 
height is greater than or equal to the 
width (both cases are handled 
in the 
else clause), then the same calculation is done, except with the 
height and 
width variables swapped 
.Once 
width and 
height contain the new image dimensions, pass them to 
the 
resize() method and store the returned 
Image object in 
im .Step 4: Add the Logo and Save the Changes
Whether or not the image was resized, the logo should still be pasted to the 
bottom-right corner. Where exactly the logo should be pasted depends on 
both the size of the image and the size of the logo. Figure 17-12 shows how 
to calculate the pasting position. The left coordinate for where to paste the 
logo will be the image width minus the logo width; the top coordinate for 
where to paste the logo will be the image height minus the logo height.
ImageLogo widthLogo heightLogoImage widthImage heightFigure 17-12: The left and top coordinates for 
placing the logo in the bottom-right corner 
should be the image width/height minus the 
logo width/height.
After your code pastes the logo into the image, it should save the modi-
˜ed 
Image object. Add the following to your program:
#! python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image Manipulating Images
   405
--snip--    # Check if image needs to be resized.    --snip--    # Add the logo.     print('Adding logo to %s...' % (filename))     im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)    # Save changes.     im.save(os.path.join('withLogo', filename))The new code prints a message telling the user that the logo is being 
added 
, pastes 
logoIm onto 
im at the calculated coordinates 
, and saves 
the changes to a ˜lename in the 
withLogo
 directory 
. When you run this 
program with the 
zophie.png
 ˜le as the only image in the working directory, 
the output will look like this:
Resizing zophie.png...Adding logo to zophie.png...The image 
zophie.png
 will be changed to a 225×300-pixel image that 
looks like Figure 17-13. Remember that the 
paste() method will not paste 
the transparency pixels if you do not pass the 
logoIm for the third argument 
as well. This program can automatically resize and ﬁlogo-ifyﬂ hundreds of 
images in just a couple minutes.
    Figure 17-13: The image 
zophie
.png
 resized and the logo added (left). If you forget the 
third argument, the transparent pixels in the logo will be copied as solid white pixels (right).
 406
   Chapter 17
Ideas for Similar Programs
Being able to composite images or modify image sizes in a batch can be 
useful in many applications. You could write similar programs to do the 
following:
Add text or a website URL to images.
Add timestamps to images.
Copy or move images into different folders based on their sizes.
Add a mostly transparent watermark to an image to prevent others 
from copying it.
Drawing on 
Ima
ges
If you need to draw lines, rectangles, circles, or other simple shapes on 
an
 image, use Pillow™s 
ImageDraw module. Enter the following into the inter-
active shell:
>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im)First, we import 
Image and 
ImageDraw. Then we create a new image, in this 
case, a 200×200 white image, and store the 
Image object in 
im. We pass the 
Image object to the 
ImageDraw.Draw() function to receive an 
ImageDraw object. 
This object has several methods for drawing shapes and text onto an 
Image object. Store the 
ImageDraw object in a variable like 
draw so you can use it eas-
ily in the following example.
Drawing Shapes
The following ImageDraw methods draw various kinds of shapes on the 
image. The 
fill and 
outline parameters for these methods are optional and 
will default to white if left unspeci˜ed.
Points
The 
point(xy, fill) method draws individual pixels. The 
xy argument 
represents a list of the points you want to draw. The list can be a list of 
x- and y-coordinate tuples, such as 
[(x, y), (x, y), ...], or a list of x- and 
y-
 co
ordinates without tuples, such as 
[x1, y1, x2, y2, ...]. The 
fill argu
-ment is the color of the points and is either an RGBA tuple or a string of 
a color name, such as 
'red'. The 
fill argument is optional.
Lines
The 
line(xy, fill, width) method draws a line or series of lines. 
xy is either 
a list of tuples, such as 
[(x, y), (x, y), ...], or a list of integers, such as 
[x1, y1, x2, y2, ...]. Each point is one of the connecting points on the 
 Manipulating Images
   407
lines you™re drawing. The optional 
fill argument is the color of the lines, 
as
 an RGBA tuple or color name. The optional 
width argument is the width 
of the lines and defaults to 1 if left unspeci˜ed.
Rec
tangles
The 
rectangle(xy, fill, outline) method draws a rectangle. The 
xy argu
-ment is a box tuple of the form 
(left, top, right, bottom). The 
left and 
top values specify the x- and y-coordinates of the upper-left corner of the rect-
angle, while 
right and 
bottom specify the lower-right corner. The optional 
fill argument is the color that will ˜ll the inside of the rectangle. The 
optional 
outline argument is the color of the rectangle™s outline.
Ellipses
The 
ellipse(xy, fill, outline) method draws an ellipse. If the width and 
height of the ellipse are identical, this method will draw a circle. The 
xy argument is a box tuple (
left, top, right, bottom) that represents a box that 
precisely contains the ellipse. The optional 
fill argument is the color of the 
inside of the ellipse, and the optional 
outline argument is the color of the 
ellipse™s outline.
Polygons
The 
polygon(xy, fill, outline) method draws an arbitrary polygon. The 
xy argument is a list of tuples, such as 
[(x, y), (x, y), ...], or integers, such 
as 
[x1, y1, x2, y2, ...], representing the connecting points of the polygon™s 
sides. The last pair of coordinates will be automatically connected to the 
˜rst pair. The optional 
fill argument is the color of the inside of the poly-
gon, and the optional 
outline argument is the color of the polygon™s outline.
Drawing Example
Enter the following into the interactive shell:
>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im) >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black') >>> draw.rectangle((20, 30, 60, 60), fill='blue') >>> draw.ellipse((120, 30, 160, 60), fill='red') >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown') >>> for i in range(100, 200, 10):        draw.line([(i, 0), (200, i - 100)], fill='green')>>> im.save('drawing.png')After making an 
Image object for a 200×200 white image, passing it to 
ImageDraw.Draw() to get an 
ImageDraw object, and storing the 
ImageDraw object 
in 
draw, you can call drawing methods on 
draw. Here we make a thin, black 
 408   Chapter 17
outline at the edges of the image 
, a bl
ue rectangle with its top-left corner 
at (20, 30) and bottom-right corner at (60, 60) 
, a red e
llipse de˜ned by a 
box from (120, 30) to (160, 60) 
, a bro
wn polygon with ˜ve points 
, an
d a pattern of green lines drawn with a 
for loop 
. The resulting 
drawing.png
 ˜le will look like Figure 17-14.
Figure 17-14: The resulting 
drawing
.png
  image
There are several other shape-drawing methods for 
ImageDraw objects. 
The full documentation is available at 
http://pillow.readthedocs.org/en/latest/
reference/ImageDraw.html
.Drawing Text
The 
ImageDraw object also has a 
text() method for drawing text onto an 
image. The 
text() method takes four arguments: 
xy, text, fill, and 
font.The 
xy argument is a two-integer tuple specifying the upper-left corner 
of the text box.
The 
text argument is the string of text you want to write.
The optional 
fill argument is the color of the text.
The optional 
font argument is an 
ImageFont object, used to set the type-
face and size of the text. This is described in more detail in the next 
section.
Since it™s often hard to know in advance what size a block of text will 
be in a given font, the 
ImageDraw module also offers a 
textsize() method. 
Its ˜rst argument is the string of text you want to measure, and its second 
argument is an optional 
ImageFont object. The 
textsize() method will then 
return a two-integer tuple of the width and height that the text in the given 
 Manipulating Images
   409
font would be if it were written onto the image. You can use this width and 
height to help you calculate exactly where you want to put the text on your 
image.
The ˜rst three arguments for 
text() are straightforward. Before we use 
text() to draw text onto an image, let™s look at the optional fourth argument, 
the 
ImageFont object.
Both 
text() and 
textsize() take an optional 
ImageFont object as their 
˜nal arguments. To create one of these objects, ˜rst run the following:
>>> from PIL import ImageFontNow that you™ve imported Pillow™s 
ImageFont module, you can call the 
ImageFont.truetype() function, which takes two arguments. The ˜rst argu-
ment is a string for the font™s 
TrueType ˚le
Šthis is the actual font ˜le that 
lives on your hard drive. A TrueType ˜le has the 
.ttf
 ˜le extension and can 
usually be found in the following folders:
On Windows: 
C:\Windows\Fonts
On OS X: 
/Library/Fonts
 and 
/System/Library/Fonts
On Linux: 
/usr/share/fonts/truetype
You don™t actually need to enter these paths as part of the TrueType 
˜le string because Python knows to automatically search for fonts in these 
directories. But Python will display an error if it is unable to ˜nd the font 
you speci˜ed.
The second argument to 
ImageFont.truetype() is an integer for the font 
size in 
points
 (rather than, say, pixels). Keep in mind that Pillow creates 
PNG images that are 72 pixels per inch by default, and a point is 1/72 of 
an inch.
Enter the following into the interactive shell, replacing 
FONT_FOLDER with 
the actual folder name your operating system uses:
>>> from PIL import Image, ImageDraw, ImageFont>>> import os >>> im = Image.new('RGBA', (200, 200), 'white') >>> draw = ImageDraw.Draw(im) >>> draw.text((20, 150), 'Hello', fill='purple')>>> fontsFolder = 'FONT_FOLDER' # e.g. ‚/Library/Fonts™ >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32) >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)>>> im.save('text.png')After importing 
Image, ImageDraw, ImageFont, and 
os, we make an 
Image object for a new 200×200 white image 
 and make an 
ImageDraw object from 
the 
Image object 
. We u
se 
text() to draw 
Hello
 at (20, 150) in purple
 . We 
didn™t pass the optional fourth argument in this 
text() call, so the typeface 
and size of this text aren™t customized.
 410
   Chapter 17
To set a typeface and size, we ˜rst 
store the folder name (like 
/Library/
Fonts
) in 
fontsFolder. Then we call 
ImageFont.truetype(), passing it the 
.ttf
 ˜le for the font we want, followed by 
an integer font size 
. St
ore the 
Font object you get from 
ImageFont.truetype() in a variable like 
arialFont, and then 
pass the
 variable to 
text() in the ˜nal 
keyword argument. The 
text() call at
  dr
aws 
Howdy
 at (100, 150) in gray in 
32-point Arial.
The resulting 
text.png
 ˜le will look 
like Figure 17-15.
Summary
Images consist of a collection of pixels, and each pixel has an RGBA value 
for its color and its addressable by x- and y-coordinates. Two common image 
formats are JPEG and PNG. The 
pillow module can handle both of these 
image formats and others.
When an image is loaded into an 
Image object, its width and height 
dimensions are stored as a two-integer tuple in the 
size attribute. Objects of the 
Image data type also have methods for common image manipulations: 
crop(), copy(), paste(), resize(), rotate(), and 
transpose(). To save the 
Image object to 
an image ˜le, call the 
save() method.
If you want your program to draw shapes onto an image, use 
ImageDraw methods to draw points, lines, rectangles, ellipses, and polygons. The mod-
ule also provides methods for drawing text in a typeface and font size of 
your choosing.
Although advanced (and expensive) applications such as Photoshop 
provide automatic batch processing features, you can use Python scripts to 
do many of the same modi˜cations for free. In the previous chapters, you 
wrote Python programs to deal with plaintext ˜les, spreadsheets, PDFs, and 
other formats. With the 
pillow module, you™ve extended your programming 
powers to processing images as well!
Practice Questions
1. What is an RGBA value?
2. Ho
w can you get the RGBA value of 
'CornflowerBlue' from the 
Pillow module?
3. Wh
at is a box tuple?
4.
 Wh
at function returns an 
Image object for, say, an image ˜le named 
zophie.png
?Figure 17-15: The resulting 
text
.png
 image
 Manipulating Images
   411
5. How can you ˜nd out the width and height of an 
Image object™s image?
6.
 Wh
at method would you call to get 
Image object for a 100×100 image, 
excluding the lower left quarter of it?
7. Af
ter making changes to an 
Image object, how could you save it as an 
image ˜le?
8.
 Wh
at module contains Pillow™s shape-drawing code?
9. Image objects do not have drawing methods. What kind of object does? 
How do you get this kind of object?
Practice Projects
For practice, write programs that do the following.
Extending and Fixing the Chapter Project Programs
The 
resizeAndAddLogo.py
 program in this chapter works with PNG and JPEG 
˜les, but Pillow supports many more formats than just these two. Extend 
resizeAndAddLogo.py
 to process GIF 
and BMP images as well.
Another small issue is that the 
program modi˜es PNG and JPEG 
˜les only if their ˜le extensions are 
set in lowercase. For example, it will 
process 
zophie.png
 but not 
zophie.PNG
. Change the code so that the ˜le 
extension check is case insensitive.
Finally, the logo added to the 
bottom-right corner is meant to be 
just a small mark, but if the image is 
about the same size as the logo itself, 
the result will look like Figure 17-16. 
Modify 
resizeAndAddLogo.py
 so that 
the image must be at least twice the 
width and height of the logo image 
before the logo is pasted. Other
 wi
se, 
it should skip adding the logo.
Identifying Photo Folders on the Hard Drive
I have a bad habit of transferring ˜les from my digital camera to temporary 
folders somewhere on the hard drive and then forgetting about these fold-
ers. It would be nice to write a program that could scan the entire hard 
drive and ˜nd these leftover ﬁphoto folders.ﬂ
Write a program that goes through every folder on your hard drive and 
˜nds potential photo folders. Of course, ˜rst you™ll have to de˜ne what you 
consider a ﬁphoto folderﬂ to be; let™s say that it™s any folder where more than 
half of the ˜les are photos. And how do you de˜ne what ˜les are photos? 
Figure 17-16: When the image isn™t much 
larger than the logo, the results look ugly.
 412   Chapter 17
First, a photo ˜le must have the ˜le extension 
.png
 or 
.jpg
. Also, photos 
are large images; a photo ˜le™s width and height must both be larger than 
500
 pixels. This is a safe bet, since most digital camera photos are several 
thousand pixels in width and height. 
As a hint, here™s a rough skeleton of what this program might look like:
#! python3# Import modules and write comments to describe this program.for foldername, subfolders, filenames in os.walk('C:\\'):    numPhotoFiles = 0    numNonPhotoFiles = 0    for filename in filenames:        # Check if file extension isn't .png or .jpg.        if TODO:            numNonPhotoFiles += 1            continue    # skip to next filename        # Open image file using Pillow.        # Check if width & height are larger than 500.        if TODO:            # Image is large enough to be considered a photo.            numPhotoFiles += 1        else:            # Image is too small to be a photo.            numNonPhotoFiles += 1    # If more than half of files were photos,    # print the absolute path of the folder.    if TODO:        print(TODO)When the program runs, it should print the absolute path of any photo 
folders to the screen.
Custom Seating Cards
Chapter 13 included a practice project to create custom invitations from 
a list of guests in a plaintext ˜le. As an additional project, use the 
 pillow module to create images for custom seating cards for your guests. For 
each of the guests listed in the 
guests.txt
 ˜le from the resources at 
http://
nostarch.com/automatestuff/
, generate an image ˜le with the guest name and 
some ˚owery decoration. A public domain ˚ower image is available in the 
resources at 
http://nostarch.com/automatestuff/
.To ensure that each seating card is the same size, add a black rectangle 
on the edges of the invitation image so that when the image is printed out, 
there will be a guideline for cutting. The PNG ˜les that Pillow produces are 
set to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel 
image.
",What are to Image.new() ?,"['17MA\nNI\nPUL\nATING\n IMAGE\nSIf you have a digital camera or even if \nyou\n just upload photos from your phone \nto\n Facebook, you probably cross paths with \ndigital image ˜les all the time.', 'You may know \nhow to use basic graphics software, such as Microsoft \nPaint or Paintbrush, or even more advanced applica\n-tions such as Adobe Photoshop.', 'But if you need to \nedit a massive number of images, editing them by \nhand can be a lengthy, boring job.', 'Enter Python.', 'Pillow is a third-party Python module for interacting \nwith image ˜les.', 'The module has several functions that make it easy to \ncrop, resize, and edit the content of an image.', 'With the power to manipu\n-late images the same way you would with software such as Microsoft Paint \nor Adobe Photoshop, Python can automatically edit hundreds or thousands \nof images with ease.', '388\n   Chapter 17\nComputer \nIma\nge \nFun\ndamentals\nIn order to manipulate an image, you need to understand the basics of how \ncomputers deal with colors and coordinates in images and how you can \nwork with colors and coordinates in Pillow.', 'But before you continue, install \nthe \npillow module.', 'See Appendix A for help installing third-party modules.', 'Colors and RGBA Values\nComputer programs often represent a color in an image as an \nRGBA value\n.', 'An RGBA value is a group of numbers that specify the amount of red, green, \nblue, and \nalpha\n (or transparency) in a color.', 'Each of these component values \nis an integer from \n0 (none at all) to \n255 (the maximum).', 'These RGBA values \nare assigned to individual \npixel\ns; a pixel is the smallest dot of a single color \nthe computer screen can show (as you can imagine, there are millions of \npixels on a screen).', 'A pixel™s RGB setting tells it precisely what shade of \ncolor it should display.', 'Images also have an alpha value to create RGBA \nvalues.', 'If an image is displayed on the screen over a background image \nor desktop wallpaper, the alpha value determines how much of the back-\nground you can ﬁsee throughﬂ the image™s pixel.', 'In Pillow, RGBA values are represented by a tuple of four integer values.', 'For example, the color red is represented by \n(255, 0, 0, 255).', 'This color has \nthe maximum amount of red, no green or blue, and the maximum alpha \nvalue, meaning it is fully opaque.', 'Green is represented by \n(0, 255, 0, 255), and blue is \n(0, 0, 255, 255).', 'White, the combination of all colors, is \n(255, 255, 255, 255), while black, which has no color at all, is \n(0, 0, 0, 255).If a color has an alpha value of \n0, it is invisible, and it doesn™t really mat-\nter what the RGB values are.', 'After all, invisible red looks the same as invis-\nible black.', 'Pillow uses the standard color names that HTML uses.', 'Table 17-1 lists a \nselection of standard color names and their values.', 'Table 17-1: \nStandard Color Names and Their RGBA Values\nName\nRG\nBA v\nalue\nName\nRG\nBA v\nalue\nWhite\n(255, 255, 255, 255)Red\n(255, 0, 0, 255)Green\n(0, 128, 0, 255)Blue\n(0, 0, 255, 255)Gray\n(128, 128, 128, 255)Yellow\n(255, 255, 0, 255)Black\n(0, 0, 0, 255)Purple\n(128, 0, 128, 255)Pillow offers the \nImageColor.getcolor() function so you don™t have to \nmemorize RGBA values for the colors you want to use.', ""This function takes \na color name string as its ˜rst argument, and the string \n'RGBA' as its second \nargument, and it returns an RGBA tuple."", ""Manipulating Images\n   389\nTo see how this function works, enter the following into the interactive \nshell:\n >>> from PIL import ImageColor >>> ImageColor.getcolor('red', 'RGBA')(255, 0, 0, 255) >>> ImageColor.getcolor('RED', 'RGBA')(255, 0, 0, 255)>>> ImageColor.getcolor('Black', 'RGBA')(0, 0, 0, 255)>>> ImageColor.getcolor('chocolate', 'RGBA')(210, 105, 30, 255)>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')(100, 149, 237, 255)First, you need to import the \nImageColor module from PIL \n (not \nfrom\n Pillow; you™ll see why in a moment)."", ""The color name string you pass \nto\n ImageColor.getcolor() is case insensitive, so passing \n'red'  and passing \n'RED'  give you the same RGBA tuple."", ""You can also pass more unusual \ncolor names, like \n'chocolate' and \n'Cornflower Blue'.Pillow supports a huge number of color names, from \n'aliceblue' to \n'whitesmoke'."", 'You can ˜nd the full list of more than 100 standard color \nnames in the resources at \nhttp://nostarch.com/automatestuff/\n.', 'Coordinates and Box Tuples\nImage pixels are addressed with x- and y-coordinates, which respectively \nspecify a pixel™s horizontal and vertical location in an image.', 'The \norigin\n is \nthe pixel at the top-left corner of the image and is speci˜ed with the nota-\ntion (0, 0).', 'The ˜rst zero represents the x-coordinate, which starts at zero \nat the origin and increases going from left to right.', 'The second zero repre-\nsents the y-coordinate, which starts at zero at the origin and increases going \nCMYK\n AND RGB COL\nORING\nIn grade school you learned that mixing red, yellow, and blue paints can \nform other colors; for example, you can mix blue and yellow to make green \npaint\n.', 'This is known as the \nsubtractive color model\n, and it applies to dyes, inks, \nand pigments\n.', 'This is why color printers have \nCMYK\n ink cartridges: the \nCyan\n (blue), \nMagenta\n (red), \nYellow\n, and \nblacK\n ink can be mixed together to form any \ncolor\n.Ho\nwever, the physics of light uses what™s called an \nadditive color model\n.', 'Wh\nen combining light (such as the light given off by your computer screen), \nred, green, and blue light can be combined to form any other color\n.', 'This is why \nRGB\n values represent color in computer programs\n.', '390\n   Chapter 17\ndown the image.', 'This bears repeating: \ny-coordinates increase going downward, \nwhich is the opposite of how you may \nremember y-coordinates being used in \nmath class.', 'Figure 17-1 demonstrates how \nthis coordinate system works.', 'Many of Pillow™s functions and \n me\nthods take a \nbox tuple\n argument.', 'This \nmeans Pillow is expecting a tuple of four \ninteger coordinates that represent a rect-\nangular region in an image.', 'The four \nintegers are, in order, as follows:\nLeft\n: The x-coordinate of the leftmost \nedge of the box.', 'Top\n: The y-coordinate of the top edge \nof the box.', 'Right\n: The x-coordinate of one pixel \nto the right of the rightmost edge of \nthe box.', 'This integer must be greater \nthan the left integer.', 'Bottom\n: The y-coordinate of one pixel \nlower than the bottom edge of the \nbox.', 'This integer must be greater \nthan the top integer.', 'Note that the box includes the left \nand top coordinates and goes up to but \ndoes not include the right and bottom \ncoordinates.', 'For example, the box tuple  \n(3, 1, 9, 6) represents all the pixels in \nthe\n black box in Figure 17-2.', 'Manipulating \nIma\nges with Pillow\nNow that you know how colors and coordinates work in Pillow, let™s use \nPillow to manipulate an image.', 'Figure 17-3 is the image that will be used \nfor all the interactive shell examples in this chapter.', ""You can download it \nfrom \nhttp://nostarch.com/automatestuff/\n.Once you have the image ˜le \nZophie.png\n in your current working direc-\ntory, you™ll be ready to load the image of Zophie into Python, like so:\n>>> from PIL import Image>>> catIm = Image.open('zophie.png')Figure 17-2: \nThe area represented \nby the box tuple \n(3, 1, 9, 6)x increasesy increases(0,0)(27,26)Figure 17-1: The x- and y-coordinates \nof a 27×26 image of some sort of \nancient data storage device\n Manipulating Images\n   391\nFigure 17-3: My cat Zophie."", 'The camera  \nadds 10 pounds (which is a lot for a cat).', 'To load the image, you import the \nImage module from Pillow and call \nImage.open(), passing it the image™s ˜lename.', 'You can then store the loaded \nimage in a variable like \nCatIm.', 'The module name of Pillow is \nPIL to make it \nbackward compatible with an older module called Python Imaging Library, \nwhich is why you must run \nfrom PIL import Image instead of \nfrom Pillow import Image.', 'Because of the way Pillow™s creators set up the \npillow module, you must \nuse the \nfrom PIL import Image form of \nimport statement, rather than simply \nimport PIL.If the image ˜le isn™t in the current working directory, change the \nworking directory to the folder that contains the image ˜le by calling the \nos.chdir() function.', "">>> import os>>> os.chdir('C:\\\\folder_with_image_file')The \nImage.open() function returns a value of the \nImage object data type, \nwhich is how Pillow represents an image as a Python value."", 'You can load an \nImage object from an image ˜le (of any format) by passing the \nImage.open() function a string of the ˜lename.', 'Any changes you make to the \nImage object can be saved to an image ˜le (also of any format) with the \nsave() method.', 'All the rotations, resizing, cropping, drawing, and other image \nmanipulations will be done through method calls on this \nImage object.', 'To shorten the examples in this chapter, I™ll assume you™ve imported \nPillow™s \nImage module and that you have the Zophie image stored in a variable \nnamed \ncatIm.', 'Be sure that the \nzophie.png\n ˜le is in the current working direc-\ntory so that the \nImage.open() function can ˜nd it.', 'Otherwise, you will also have \nto specify the full absolute path in the string argument to \nImage.open().', '392\n   Chapter 17\nWorking with the Image Data Type\nAn \nImage object has several useful attributes that give you basic information \nabout the image ˜le it was loaded from: its width and height, the ˜lename, \nand the graphics format (such as JPEG, GIF, or PNG).', ""For example, enter the following into the interactive shell:\n>>> from PIL import Image>>> catIm = Image.open('zophie.png')>>> catIm.size (816, 1088) >>> width, height = catIm.size >>> width816 >>> height1088>>> catIm.filename'zophie.png'>>> catIm.format'PNG'>>> catIm.format_description'Portable network graphics' >>> catIm.save('zophie.jpg')After making an \nImage object from \nZophie.png\n and storing the \nImage object in \ncatIm, we can see that the object™s \nsize attribute contains a tuple \nof the image™s width and height in pixels \n."", 'We can assign the values in the \ntuple to \nwidth and \nheight variables \n in order to access with width \n and \nheight \n individually.', 'The \nfilename attribute describes the original ˜le™s \nname.', 'The \nformat and \nformat_description attributes are strings that describe \nthe image format of the original ˜le (with \nformat_description being a bit \nmore verbose).', ""Finally, calling the \nsave() method and passing it \n'zophie.jpg' saves a new \nimage with the ˜lename \nzophie.jpg\n to your hard drive \n."", 'Pillow sees that\n the \n˜le extension is \n.jpg\n and automatically saves the image using the JPEG image \nformat.', 'Now you should have two images, \nzophie.png\n and \nzophie.jpg\n, on your \nhard drive.', 'While these ˜les are based on the same image, they are not iden\n-tical because of their different formats.', 'Pillow also provides the \nImage.new() function, which returns an \nImage objectŠmuch like \nImage.open(), except the image represented by \nImage.new()™s \nobject will be blank.', ""The arguments to \nImage.new() are as follows:\nThe string \n'RGBA', which sets the color mode to RGBA."", '(There are other \nmodes that this book doesn™t go into.)', 'The size, as a two-integer tuple of the new image™s width and height.', 'Manipulating Images\n   393\nThe background color that the image should start with, as a four-\ninteger tuple of an RGBA value.', 'You can use the return value of \nthe\n ImageColor.getcolor() function for this argument.', 'Alternatively, \nImage.new() also supports just passing the string of the standard \ncolor\n name.', ""For example, enter the following into the interactive shell:\n>>> from PIL import Image >>> im = Image.new('RGBA', (100, 200), 'purple')>>> im.save('purpleImage.png') >>> im2 = Image.new('RGBA', (20, 20))>>> im2.save('transparentImage.png')Here we create an \nImage object for an image that™s 100 pixels wide and \n200 pixels tall, with a purple background \n."", 'This image is then saved to \nthe ˜le \npurpleImage.png\n.', 'We call \nImage.new() again to create another \nImage object, this time passing (20, 20) for the dimensions and nothing for the \nbackground color \n.', 'Invisible black, \n(0, 0, 0, 0), is the default color used if \nno color argument is speci˜ed, so the second image has a transparent back-\nground; we save this 20×20 transparent square in \ntransparentImage.png\n.Cropping Images\nCropping\n an image means selecting a rectangular region inside an image \nand removing everything outside the rectangle.', 'The \ncrop() method on \nImage objects takes a box tuple and returns an \nImage object representing \nthe cropped image.', 'The cropping does not happen in placeŠthat is, the \noriginal \nImage object is left untouched, and the \ncrop() method returns a \nnew \nImage object.', 'Remeber that a boxed tupleŠin this case, the cropped \nse\nctionŠincludes the left column and top row of pixels but only goes up \nto\n and does \nnot include the right column and bottom row of pixels.', ""Enter the following into the interactive shell:\n>>> croppedIm = catIm.crop((335, 345, 565, 560))>>> croppedIm.save('cropped.png')This makes a new \nImage object for the cropped image, stores the \nobject\n in croppedIm, and then calls \nsave() on \ncroppedIm to save the cropped \nimage in \ncropped.png\n."", 'The new ˜le \ncropped.png\n will be created from the ori\n-gi\nnal image, like in Figure 17-4.', '394\n   Chapter 17\n     Figure 17-4: The new image will be just the cropped  \nsection of the original image.', 'Copying and Pasting Images onto Other Images\nThe \ncopy() method will return a new \nImage object with the same image \nas the \nImage object it was called on.', 'This is useful if you need to make \nchanges to an image but also want to keep an untouched version of the \noriginal.', ""For example, enter the following into the interactive shell:\n>>> catIm = Image.open('zophie.png')>>> catCopyIm = catIm.copy()The \ncatIm and \ncatCopyIm variables contain two separate \nImage objects, \nwhich both have the same image on them."", 'Now that you have an \nImage object stored in \ncatCopyIm, you can modify \ncatCopyIm as you like and save \nit to\n a new ˜lename, leaving \nzophie.png\n untouched.', 'For example, let™s try \n modifying \ncatCopyIm with the \npaste() method.', 'The \npaste() method is called on an \nImage object and pastes another image \non top of it.', ""Let™s continue the shell example by pasting a smaller image onto \ncatCopyIm.>>> faceIm = catIm.crop((335, 345, 565, 560))>>> faceIm.size(230, 215)>>> catCopyIm.paste(faceIm, (0, 0))>>> catCopyIm.paste(faceIm, (400, 500))>>> catCopyIm.save('pasted.png') Manipulating Images\n   395\nFirst we pass \ncrop() a box tuple for the rectangular area in \nzophie.png\n that contains Zophie™s face."", 'This creates an \nImage object representing a \n230×215 crop, which we store in \nfaceIm.', 'Now we can paste \nfaceIm onto \n catCopyIm.', 'The \npaste() method takes two arguments: a ﬁsourceﬂ \nImage object\n and a tuple of the x- and y-coordinates where you want to paste \nthe top-left corner of the source \nImage object onto the main \nImage object.', 'Here\n we call \npaste() twice on \ncatCopyIm, passing (0, 0) the ˜rst time and \n(400, 500) the second time.', 'This pastes \nfaceIm onto \ncatCopyIm twice: once \nwith the top-left corner of \nfaceIm at (0, 0) on \ncatCopyIm, and once with \nthe top-left corner of \nfaceIm at (400, 500).', 'Finally, we save the modi˜ed \n catCopyIm to \npasted.png\n.', 'The \npasted.png\n image looks like Figure 17-5.', 'Figure 17-5: Zophie the cat, with her face  \npasted twice\nNOTE\n Despite their names, the \ncopy() and \npaste() methods in Pillow do not use your com-\nputer™s clipboard.', 'Note that the \npaste() method modi˜es its \nImage object \nin place\n; it does \nnot return an \nImage object with the pasted image.', 'If you want to call \npaste() but also keep an untouched version of the original image around, you™ll \nneed to ˜rst copy the image and then call \npaste() on that copy.', 'Say you want to tile Zophie™s head across the entire image, as in \nFigure 17-6.', 'You can achieve this effect with just a couple \nfor loops.', ""Continue the interactive shell example by entering the following:\n>>> catImWidth, catImHeight = catIm.size>>> faceImWidth, faceImHeight = faceIm.size >>> catCopyTwo = catIm.copy() 396   Chapter 17\n >>> for left in range(0, catImWidth, faceImWidth):         for top in range(0, catImHeight, faceImHeight):            print(left, top)            catCopyTwo.paste(faceIm, (left, top))0 00 2150 4300 6450 8600 1075230 0230 215--snip--690 860690 1075>>> catCopyTwo.save('tiled.png')Here we store the width of height of \ncatIm in \ncatImWidth and \n catImHeight."", 'At \n we make a copy of \ncatIm and store it in \ncatCopyTwo.', 'Now \nthat\n we have a copy that we can paste onto, we start looping to paste \nfaceIm onto \n catCopyTwo.', 'The outer \nfor loop™s \nleft variable starts at 0 and increases by \n faceImWidth(230) .', 'The inner \nfor loop™s \ntop variable start at 0 and\n increases \nby faceImHeight(215) .', 'These nested \nfor loops\n produce values for \nleft and \ntop to paste a grid of \nfaceIm images over the \ncatCopyTwo Image object, as in \nFigure 17-6.', 'To see our nested loops working, we print \nleft and \ntop.', 'After \nthe pasting is complete, we save the modi˜ed \ncatCopyTwo to \ntiled.png\n.Figure 17-6: Nested \nfor loops used  \nwith \npaste() to duplicate the cat™s face  \n(a dupli-cat, if you will).', 'Manipulating Images\n   397\nResizing an Image\nThe \nresize() method is called on an \nImage object and returns a new \nImage object of the speci˜ed width and height.', 'It accepts a two-integer tuple argu-\nment, representing the new width and height of the returned image.', ""Enter \nthe following into the interactive shell:\n >>> width, height = catIm.size >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))>>> quartersizedIm.save('quartersized.png') >>> svelteIm = catIm.resize((width, height + 300))>>> svelteIm.save('svelte.png')Here we assign the two values in the \ncatIm.size tuple to the variables \nwidth and \nheight ."", 'Using \nwidth and \nheight instead of \ncatIm.size[0] and \n catIm.size[1] makes the rest of the code more readable.', 'The ˜rst \nresize() call passes \nint(width / 2) for the new width and \nint(height / 2) for the new height \n, so the \nImage object returned from \nresize() will be half the length and width of the original image, or one-\nquarter of the original image size overall.', 'The \nresize() method accepts \nonly integers in its tuple argument, which is why you needed to wrap both \ndivisions by \n2 in an \nint() call.', 'This resizing keeps the same proportions for the width and height.', 'But \nthe new width and height passed to \nresize() do not have to be proportional \nto the original image.', 'The \nsvelteIm variable contains an \nImage object that \nhas the original width but a height that is 300 pixels taller \n, giving Zophie \na more slender look.', 'Note that the \nresize() method does not edit the \nImage object in place \nbut instead returns a new \nImage object.', 'PAS\nTING \nTRANSP\nARE\nNT PIXEL\nSNormally transparent pixels are pasted as white pixels\n.', 'If the image you want \nto paste has transparent pixels, pass the \nImage object as the third argument \nso that a solid rectangle isn™t pasted\n.', 'This third argument is the ﬁmaskﬂ \nImage object\n.', 'A mask is an \nImage object where the alpha value is signi˜cant, but the \nred, green, and blue values are ignored\n.', 'The mask tells the \npaste() function \nwhich pixels it should copy and which it should leave transparent\n.', 'Advanced \nusage of masks is beyond this book, but if you want to paste an image that has \ntransparent pixels, pass the \nImage object again as the third argument\n.', '398\n   Chapter 17\nRotating and Flipping Images\nImages can be rotated with the \nrotate() method, which returns a new \nImage object of the rotated image and leaves the original \nImage object unchanged.', 'The argument to \nrotate() is a single integer or ˚oat representing the num-\nber of degrees to rotate the image counterclockwise.', ""Enter the following \ninto the interactive shell:\n>>> catIm.rotate(90).save('rotated90.png')>>> catIm.rotate(180).save('rotated180.png')>>> catIm.rotate(270).save('rotated270.png')Note how you can \nchain\n method calls by calling \nsave() directly on the \nImage object returned from \nrotate()."", 'The ˜rst \nrotate() and \nsave() call makes \na new \nImage object representing the image rotated counterclockwise by \n90\n degrees and saves the rotated image to \nrotated90.png\n.', 'The second and \nthird calls do the same, but with 180 degress and 270 degress.', 'The results \nlook like Figure 17-7.', 'Figure 17-7: The original image (left) and the image rotated counterclockwise by 90, 180, \nand 270 degrees\nNotice that the width and height of the image change when the image \nis rotated 90 or 270 degrees.', 'If you rotate an image by some other amount, \nthe original dimensions of the image are maintained.', 'On Windows, a \nblack background is used to ˜ll in any gaps made by the rotation, like in \nFigure\n 17-8.', 'On OS X, transparent pixels are used for the gaps instead.', 'The \nrotate() method has an optional \nexpand keyword argument that can \nbe set to \nTrue to enlarge the dimensions of the image to ˜t the entire rotated \nnew image.', ""For example, enter the following into the interactive shell:\n>>> catIm.rotate(6).save('rotated6.png')>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')The ˜rst call rotates the image 6 degrees and saves it to \nrotate6.png\n (see \nthe image on the left of Figure 17-8)."", 'The second call rotates the image 6 \ndegrees with \nexpand set to \nTrue and saves it to \nrotate6_expanded.png\n (see the \nimage on the right of Figure 17-8).', 'Manipulating Images\n   399\n    Figure 17-8: The image rotated 6 degrees normally (left) and with \nexpand=True (right)\nYou can also get a ﬁmirror ˚ipﬂ of an image with the \ntranspose() method.', 'You must pass either \nImage.FLIP_LEFT_RIGHT or \nImage.FLIP_TOP_BOTTOM to the \ntranspose() method.', ""Enter the following into the interactive shell:\n>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')Like \nrotate(), transpose() creates a new \nImage object."", 'Here was pass \nImage.FLIP_LEFT_RIGHT to ˚ip the image horizontally and then save the result \nto \nhorizontal_˜ip.png\n.', 'To ˚ip the image vertically, we pass \nImage.FLIP_TOP_BOTTOM and save to \nvertical_˜ip.png\n.', 'The results look like Figure 17-9.', 'Figure 17-9: The original image (left), horizontal ˜ip (center), and vertical ˜ip (right)\n 400\n   Chapter 17\nChanging Individual Pixels\nThe color of an individual pixel can be retrieved or set with the \ngetpixel() and \nputpixel() methods.', 'These methods both take a tuple representing the \nx- and y-coordinates of the pixel.', 'The \nputpixel() method also takes an addi-\ntional tuple argument for the color of the pixel.', 'This color argument is a \nfour-integer RGBA tuple or a three-integer RGB tuple.', ""Enter the following \ninto the interactive shell:\n >>> im = Image.new('RGBA', (100, 100)) >>> im.getpixel((0, 0))(0, 0, 0, 0) >>> for x in range(100):        for y in range(50):             im.putpixel((x, y), (210, 210, 210))>>> from PIL import ImageColor >>> for x in range(100):        for y in range(50, 100):             im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))>>> im.getpixel((0, 0))(210, 210, 210, 255)>>> im.getpixel((0, 50))(169, 169, 169, 255)>>> im.save('putPixel.png')At \n we make a new image that is a 100×100 transparent square."", 'Ca\nlling \ngetpixel() on some coordinates in this image returns \n(0, 0, 0, 0) because the image is transparent \n.', 'To c\nolor pixels in this image, we can \nuse nested \nfor loops to go through all the pixels in the top half of the \nimage\n  and color each pixel using \nputpixel() .', 'Here we pass \nputpixel() the RGB tuple \n(210, 210, 210), a light gray.', 'Say we want to color the bottom half of the image dark gray but don™t \nknow the RGB tuple for dark gray.', ""The \nputpixel() method doesn™t accept a \nstandard color name like \n'darkgray', so you have to use \nImageColor.getcolor() to get a color tuple from \n'darkgray'."", 'Loop through \nthe pixels in the bottom half of the image \n and pass \nputpixel() the return value of \nImageColor.getcolor() , an\nd you should now have an image that is light gray \nin\n its top half and dark gray in the bottom half, as \nshown in Figure 17-10.', 'You can call \ngetpixel() on some \ncoordinates to con˜rm that the color at any given \npixel is what you expect.', 'Finally, save the image to \n put\nPixel.png\n.Of course, drawing one pixel at a time onto \nan image isn™t very convenient.', 'If you need to draw \nshapes, use the \nImageDraw functions explained later \nin\n this chapter.', 'Figure 17-10: \nThe \n putPixel\n.png\n image \n Manipulating Images\n   401\nProject: Adding a \nLog\noSay you have the boring job of resizing thousands \nof images and adding a small logo watermark to \nthe corner of each.', 'Doing this with a basic graph-\nics program such as Paintbrush or Paint would \ntake forever.', 'A fancier graphics application such \nas Photoshop can do batch processing, but that \nsoftware costs hundreds of dollars.', 'Let™s write a \nscript to do it instead.', 'Say that Figure 17-11 is the logo you want to \nadd to the bottom-right corner of each image: a \nblack cat icon with a white border, with the rest \nof\n the image transparent.', 'At a high level, here™s what the program \nshould do:\nLoad the logo image.', 'Loop over all \n.png\n and\n.jpg\n ˜les in the working directory.', 'Check whether the image is wider or taller than 300 pixels.', 'If so, reduce the width or height (whichever is larger) to 300 pixels and \nscale down the other dimension proportionally.', 'Paste the logo image into the corner.', 'Save the altered images to another folder.', 'This means the code will need to do the following:\nOpen the \ncatlogo.png\n ˜le as an \nImage object.', ""Loop over the strings returned from \nos.listdir('."", ""').Get the width and height of the image from the \nsize attribute."", 'Calculate the new width and height of the resized image.', 'Call the \nresize() method to resize the image.', 'Call the \npaste() method to paste the logo.', 'Call the \nsave() method to save the changes, using the original ˜lename.', 'Step 1: Open the Logo Image\nFor this project, open a new ˜le editor window, enter the following code, \nand save it as \nresizeAndAddLogo.py\n:#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.Figure 17-11: The logo to be \nadded to the image.', ""402\n   Chapter 17\nimport osfrom PIL import Image SQUARE_FIT_SIZE = 300 LOGO_FILENAME = 'catlogo.png' logoIm = Image.open(LOGO_FILENAME) logoWidth, logoHeight = logoIm.size# TODO: Loop over all files in the working directory.# TODO: Check if image needs to be resized.# TODO: Calculate the new width and height to resize to.# TODO: Resize the image.# TODO: Add the logo.# TODO: Save changes.By setting up the \nSQUARE_FIT_SIZE  and \nLOGO_FILENAME  constants at the \nstart of the program, we™ve made it easy to change the program later."", 'Say \nthe logo that you™re adding isn™t the cat icon, or say you™re reducing the out-\nput images™ largest dimension to something other than 300 \n pi\nxels.', 'With these \nconstants at the start of the program, you can just open the code, change \nthose values once, and you™re done.', '(Or you can make it so that the values \nfor these constants are taken from the command line arguments.)', ""Without \nthese constants, you™d instead have to search the code for all instances of \n300 and \n'catlogo.png' and replace them with the values for your new project."", 'In short, using constants makes your program more generalized.', 'The logo \nImage object is returned from \nImage.open() .', 'For readability, \nlogoWidth and \nlogoHeight are assigned to the values from \nlogoIm.size .The rest of the program is a skeleton of \nTODO comments for now.', 'Step 2: Loop Over All Files and Open Images\nNow you need to ˜nd every \n.png\n ˜le and \n.jpg\n ˜le in the current working \ndirectory.', 'Note that you don™t want to add the logo image to the logo image \nitself, so the program should skip any image with a ˜lename that™s the same \nas \nLOGO_FILENAME.', 'Add the following to your code:\n#!', ""python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip-- Manipulating Images\n   403\nos.makedirs('withLogo', exist_ok=True)# Loop over all files in the working directory."", ""for filename in os.listdir('."", ""'):     if not (filename.endswith('.png') or filename.endswith('.jpg')) \\       or filename == LOGO_FILENAME:         continue    # skip non-image files and the logo file itself     im = Image.open(filename)    width, height = im.size--snip--First, the \nos.makedirs() call creates a \nwithLogo\n folder to store the ˜n-\nished images with logos, instead of overwriting the original image ˜les."", 'The \nexist_ok=True keyword argument will keep \nos.makedirs() from raising \nan exception if \nwithLogo\n already exists.', ""While looping through all the ˜les \nin the working directory with \nos.listdir('.')"", ', the long \nif statement \n checks whether each ˜lename doesn™t end with \n.png\n or \n.jpg\n.', 'If\n soŠor if the \n˜le is the logo image itselfŠthen the loop should skip it and use \ncontinue  to go to the next ˜le.', ""If \nfilename does\n end with \n'.png' or \n'.jpg' (and isn™t the \nlogo ˜le), you can open it as an \nImage object \n and set \nwidth and \nheight.Step 3: Resize the Images\nThe program should resize the image only if the width or height is larger \nthan \nSQUARE_FIT_SIZE (300 pixels, in this case), so put all of the resizing code \ninside an \nif statement that checks the \nwidth and \nheight variables."", 'Add the \nfollowing code to your program:\n#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image--snip--    # Check if image needs to be resized.', 'if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:        # Calculate the new width and height to resize to.', 'if width > height:             height = int((SQUARE_FIT_SIZE / width) * height)            width = SQUARE_FIT_SIZE        else:             width = int((SQUARE_FIT_SIZE / height) * width)            height = SQUARE_FIT_SIZE        # Resize the image.', ""print('Resizing %s...' % (filename))         im = im.resize((width, height))--snip-- 404\n   Chapter 17\nIf the image does need to be resized, you need to ˜nd out whether it is \na wide or tall image."", 'If \nwidth is greater than \nheight, then the height should \nbe reduced by the same proportion that the width would be reduced \n.', 'This proportion is the \nSQUARE_FIT_SIZE value divided by the current width.', 'The new \nheight value is this proportion multiplied by the current \nheight value.', 'Since the division operator returns a ˚oat value and \nresize() requires \nthe dimensions to be integers, remember to convert the result to an integer \nwith the \nint() function.', 'Finally, the new \nwidth value will simply be set to \nSQUARE_FIT_SIZE.If the \nheight is greater than or equal to the \nwidth (both cases are handled \nin the \nelse clause), then the same calculation is done, except with the \nheight and \nwidth variables swapped \n.Once \nwidth and \nheight contain the new image dimensions, pass them to \nthe \nresize() method and store the returned \nImage object in \nim .Step 4: Add the Logo and Save the Changes\nWhether or not the image was resized, the logo should still be pasted to the \nbottom-right corner.', 'Where exactly the logo should be pasted depends on \nboth the size of the image and the size of the logo.', 'Figure 17-12 shows how \nto calculate the pasting position.', 'The left coordinate for where to paste the \nlogo will be the image width minus the logo width; the top coordinate for \nwhere to paste the logo will be the image height minus the logo height.', 'ImageLogo widthLogo heightLogoImage widthImage heightFigure 17-12: The left and top coordinates for \nplacing the logo in the bottom-right corner \nshould be the image width/height minus the \nlogo width/height.', 'After your code pastes the logo into the image, it should save the modi-\n˜ed \nImage object.', 'Add the following to your program:\n#!', 'python3# resizeAndAddLogo.py - Resizes all images in current working directory to fit # in a 300x300 square, and adds catlogo.png to the lower-right corner.import osfrom PIL import Image Manipulating Images\n   405\n--snip--    # Check if image needs to be resized.', '--snip--    # Add the logo.', ""print('Adding logo to %s...' % (filename))     im.paste(logoIm, (width - logoWidth, height - logoHeight), logoIm)    # Save changes."", ""im.save(os.path.join('withLogo', filename))The new code prints a message telling the user that the logo is being \nadded \n, pastes \nlogoIm onto \nim at the calculated coordinates \n, and saves \nthe changes to a ˜lename in the \nwithLogo\n directory \n."", 'When you run this \nprogram with the \nzophie.png\n ˜le as the only image in the working directory, \nthe output will look like this:\nResizing zophie.png...Adding logo to zophie.png...The image \nzophie.png\n will be changed to a 225×300-pixel image that \nlooks like Figure 17-13.', 'Remember that the \npaste() method will not paste \nthe transparency pixels if you do not pass the \nlogoIm for the third argument \nas well.', 'This program can automatically resize and ﬁlogo-ifyﬂ hundreds of \nimages in just a couple minutes.', 'Figure 17-13: The image \nzophie\n.png\n resized and the logo added (left).', 'If you forget the \nthird argument, the transparent pixels in the logo will be copied as solid white pixels (right).', '406\n   Chapter 17\nIdeas for Similar Programs\nBeing able to composite images or modify image sizes in a batch can be \nuseful in many applications.', 'You could write similar programs to do the \nfollowing:\nAdd text or a website URL to images.', 'Add timestamps to images.', 'Copy or move images into different folders based on their sizes.', 'Add a mostly transparent watermark to an image to prevent others \nfrom copying it.', 'Drawing on \nIma\nges\nIf you need to draw lines, rectangles, circles, or other simple shapes on \nan\n image, use Pillow™s \nImageDraw module.', ""Enter the following into the inter-\nactive shell:\n>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im)First, we import \nImage and \nImageDraw."", 'Then we create a new image, in this \ncase, a 200×200 white image, and store the \nImage object in \nim.', 'We pass the \nImage object to the \nImageDraw.Draw() function to receive an \nImageDraw object.', 'This object has several methods for drawing shapes and text onto an \nImage object.', 'Store the \nImageDraw object in a variable like \ndraw so you can use it eas-\nily in the following example.', 'Drawing Shapes\nThe following ImageDraw methods draw various kinds of shapes on the \nimage.', 'The \nfill and \noutline parameters for these methods are optional and \nwill default to white if left unspeci˜ed.', 'Points\nThe \npoint(xy, fill) method draws individual pixels.', 'The \nxy argument \nrepresents a list of the points you want to draw.', 'The list can be a list of \nx- and y-coordinate tuples, such as \n[(x, y), (x, y), ...], or a list of x- and \ny-\n co\nordinates without tuples, such as \n[x1, y1, x2, y2, ...].', ""The \nfill argu\n-ment is the color of the points and is either an RGBA tuple or a string of \na color name, such as \n'red'."", 'The \nfill argument is optional.', 'Lines\nThe \nline(xy, fill, width) method draws a line or series of lines.', 'xy is either \na list of tuples, such as \n[(x, y), (x, y), ...], or a list of integers, such as \n[x1, y1, x2, y2, ...].', 'Each point is one of the connecting points on the \n Manipulating Images\n   407\nlines you™re drawing.', 'The optional \nfill argument is the color of the lines, \nas\n an RGBA tuple or color name.', 'The optional \nwidth argument is the width \nof the lines and defaults to 1 if left unspeci˜ed.', 'Rec\ntangles\nThe \nrectangle(xy, fill, outline) method draws a rectangle.', 'The \nxy argu\n-ment is a box tuple of the form \n(left, top, right, bottom).', 'The \nleft and \ntop values specify the x- and y-coordinates of the upper-left corner of the rect-\nangle, while \nright and \nbottom specify the lower-right corner.', 'The optional \nfill argument is the color that will ˜ll the inside of the rectangle.', 'The \noptional \noutline argument is the color of the rectangle™s outline.', 'Ellipses\nThe \nellipse(xy, fill, outline) method draws an ellipse.', 'If the width and \nheight of the ellipse are identical, this method will draw a circle.', 'The \nxy argument is a box tuple (\nleft, top, right, bottom) that represents a box that \nprecisely contains the ellipse.', 'The optional \nfill argument is the color of the \ninside of the ellipse, and the optional \noutline argument is the color of the \nellipse™s outline.', 'Polygons\nThe \npolygon(xy, fill, outline) method draws an arbitrary polygon.', 'The \nxy argument is a list of tuples, such as \n[(x, y), (x, y), ...], or integers, such \nas \n[x1, y1, x2, y2, ...], representing the connecting points of the polygon™s \nsides.', 'The last pair of coordinates will be automatically connected to the \n˜rst pair.', 'The optional \nfill argument is the color of the inside of the poly-\ngon, and the optional \noutline argument is the color of the polygon™s outline.', ""Drawing Example\nEnter the following into the interactive shell:\n>>> from PIL import Image, ImageDraw>>> im = Image.new('RGBA', (200, 200), 'white')>>> draw = ImageDraw.Draw(im) >>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black') >>> draw.rectangle((20, 30, 60, 60), fill='blue') >>> draw.ellipse((120, 30, 160, 60), fill='red') >>> draw.polygon(((57, 87), (79, 62), (94, 85), (120, 90), (103, 113)), fill='brown') >>> for i in range(100, 200, 10):        draw.line([(i, 0), (200, i - 100)], fill='green')>>> im.save('drawing.png')After making an \nImage object for a 200×200 white image, passing it to \nImageDraw.Draw() to get an \nImageDraw object, and storing the \nImageDraw object \nin \ndraw, you can call drawing methods on \ndraw."", 'Here we make a thin, black \n 408   Chapter 17\noutline at the edges of the image \n, a bl\nue rectangle with its top-left corner \nat (20, 30) and bottom-right corner at (60, 60) \n, a red e\nllipse de˜ned by a \nbox from (120, 30) to (160, 60) \n, a bro\nwn polygon with ˜ve points \n, an\nd a pattern of green lines drawn with a \nfor loop \n.', 'The resulting \ndrawing.png\n ˜le will look like Figure 17-14.', 'Figure 17-14: The resulting \ndrawing\n.png\n  image\nThere are several other shape-drawing methods for \nImageDraw objects.', 'The full documentation is available at \nhttp://pillow.readthedocs.org/en/latest/\nreference/ImageDraw.html\n.Drawing Text\nThe \nImageDraw object also has a \ntext() method for drawing text onto an \nimage.', 'The \ntext() method takes four arguments: \nxy, text, fill, and \nfont.The \nxy argument is a two-integer tuple specifying the upper-left corner \nof the text box.', 'The \ntext argument is the string of text you want to write.', 'The optional \nfill argument is the color of the text.', 'The optional \nfont argument is an \nImageFont object, used to set the type-\nface and size of the text.', 'This is described in more detail in the next \nsection.', 'Since it™s often hard to know in advance what size a block of text will \nbe in a given font, the \nImageDraw module also offers a \ntextsize() method.', 'Its ˜rst argument is the string of text you want to measure, and its second \nargument is an optional \nImageFont object.', 'The \ntextsize() method will then \nreturn a two-integer tuple of the width and height that the text in the given \n Manipulating Images\n   409\nfont would be if it were written onto the image.', 'You can use this width and \nheight to help you calculate exactly where you want to put the text on your \nimage.', 'The ˜rst three arguments for \ntext() are straightforward.', 'Before we use \ntext() to draw text onto an image, let™s look at the optional fourth argument, \nthe \nImageFont object.', 'Both \ntext() and \ntextsize() take an optional \nImageFont object as their \n˜nal arguments.', 'To create one of these objects, ˜rst run the following:\n>>> from PIL import ImageFontNow that you™ve imported Pillow™s \nImageFont module, you can call the \nImageFont.truetype() function, which takes two arguments.', 'The ˜rst argu-\nment is a string for the font™s \nTrueType ˚le\nŠthis is the actual font ˜le that \nlives on your hard drive.', 'A TrueType ˜le has the \n.ttf\n ˜le extension and can \nusually be found in the following folders:\nOn Windows: \nC:\\Windows\\Fonts\nOn OS X: \n/Library/Fonts\n and \n/System/Library/Fonts\nOn Linux: \n/usr/share/fonts/truetype\nYou don™t actually need to enter these paths as part of the TrueType \n˜le string because Python knows to automatically search for fonts in these \ndirectories.', 'But Python will display an error if it is unable to ˜nd the font \nyou speci˜ed.', 'The second argument to \nImageFont.truetype() is an integer for the font \nsize in \npoints\n (rather than, say, pixels).', 'Keep in mind that Pillow creates \nPNG images that are 72 pixels per inch by default, and a point is 1/72 of \nan inch.', ""Enter the following into the interactive shell, replacing \nFONT_FOLDER with \nthe actual folder name your operating system uses:\n>>> from PIL import Image, ImageDraw, ImageFont>>> import os >>> im = Image.new('RGBA', (200, 200), 'white') >>> draw = ImageDraw.Draw(im) >>> draw.text((20, 150), 'Hello', fill='purple')>>> fontsFolder = 'FONT_FOLDER' # e.g."", ""‚/Library/Fonts™ >>> arialFont = ImageFont.truetype(os.path.join(fontsFolder, 'arial.ttf'), 32) >>> draw.text((100, 150), 'Howdy', fill='gray', font=arialFont)>>> im.save('text.png')After importing \nImage, ImageDraw, ImageFont, and \nos, we make an \nImage object for a new 200×200 white image \n and make an \nImageDraw object from \nthe \nImage object \n."", 'We u\nse \ntext() to draw \nHello\n at (20, 150) in purple\n .', 'We \ndidn™t pass the optional fourth argument in this \ntext() call, so the typeface \nand size of this text aren™t customized.', '410\n   Chapter 17\nTo set a typeface and size, we ˜rst \nstore the folder name (like \n/Library/\nFonts\n) in \nfontsFolder.', 'Then we call \nImageFont.truetype(), passing it the \n.ttf\n ˜le for the font we want, followed by \nan integer font size \n.', 'St\nore the \nFont object you get from \nImageFont.truetype() in a variable like \narialFont, and then \npass the\n variable to \ntext() in the ˜nal \nkeyword argument.', 'The \ntext() call at\n  dr\naws \nHowdy\n at (100, 150) in gray in \n32-point Arial.', 'The resulting \ntext.png\n ˜le will look \nlike Figure 17-15.', 'Summary\nImages consist of a collection of pixels, and each pixel has an RGBA value \nfor its color and its addressable by x- and y-coordinates.', 'Two common image \nformats are JPEG and PNG.', 'The \npillow module can handle both of these \nimage formats and others.', 'When an image is loaded into an \nImage object, its width and height \ndimensions are stored as a two-integer tuple in the \nsize attribute.', 'Objects of the \nImage data type also have methods for common image manipulations: \ncrop(), copy(), paste(), resize(), rotate(), and \ntranspose().', 'To save the \nImage object to \nan image ˜le, call the \nsave() method.', 'If you want your program to draw shapes onto an image, use \nImageDraw methods to draw points, lines, rectangles, ellipses, and polygons.', 'The mod-\nule also provides methods for drawing text in a typeface and font size of \nyour choosing.', 'Although advanced (and expensive) applications such as Photoshop \nprovide automatic batch processing features, you can use Python scripts to \ndo many of the same modi˜cations for free.', 'In the previous chapters, you \nwrote Python programs to deal with plaintext ˜les, spreadsheets, PDFs, and \nother formats.', 'With the \npillow module, you™ve extended your programming \npowers to processing images as well!', 'Practice Questions\n1.', 'What is an RGBA value?', '2.', ""Ho\nw can you get the RGBA value of \n'CornflowerBlue' from the \nPillow module?"", '3.', 'Wh\nat is a box tuple?', '4.', 'Wh\nat function returns an \nImage object for, say, an image ˜le named \nzophie.png\n?Figure 17-15: The resulting \ntext\n.png\n image\n Manipulating Images\n   411\n5.', 'How can you ˜nd out the width and height of an \nImage object™s image?', '6.', 'Wh\nat method would you call to get \nImage object for a 100×100 image, \nexcluding the lower left quarter of it?', '7.', 'Af\nter making changes to an \nImage object, how could you save it as an \nimage ˜le?', '8.', 'Wh\nat module contains Pillow™s shape-drawing code?', '9.', 'Image objects do not have drawing methods.', 'What kind of object does?', 'How do you get this kind of object?', 'Practice Projects\nFor practice, write programs that do the following.', 'Extending and Fixing the Chapter Project Programs\nThe \nresizeAndAddLogo.py\n program in this chapter works with PNG and JPEG \n˜les, but Pillow supports many more formats than just these two.', 'Extend \nresizeAndAddLogo.py\n to process GIF \nand BMP images as well.', 'Another small issue is that the \nprogram modi˜es PNG and JPEG \n˜les only if their ˜le extensions are \nset in lowercase.', 'For example, it will \nprocess \nzophie.png\n but not \nzophie.PNG\n.', 'Change the code so that the ˜le \nextension check is case insensitive.', 'Finally, the logo added to the \nbottom-right corner is meant to be \njust a small mark, but if the image is \nabout the same size as the logo itself, \nthe result will look like Figure 17-16.', 'Modify \nresizeAndAddLogo.py\n so that \nthe image must be at least twice the \nwidth and height of the logo image \nbefore the logo is pasted.', 'Other\n wi\nse, \nit should skip adding the logo.', 'Identifying Photo Folders on the Hard Drive\nI have a bad habit of transferring ˜les from my digital camera to temporary \nfolders somewhere on the hard drive and then forgetting about these fold-\ners.', 'It would be nice to write a program that could scan the entire hard \ndrive and ˜nd these leftover ﬁphoto folders.ﬂ\nWrite a program that goes through every folder on your hard drive and \n˜nds potential photo folders.', 'Of course, ˜rst you™ll have to de˜ne what you \nconsider a ﬁphoto folderﬂ to be; let™s say that it™s any folder where more than \nhalf of the ˜les are photos.', 'And how do you de˜ne what ˜les are photos?', 'Figure 17-16: When the image isn™t much \nlarger than the logo, the results look ugly.', '412   Chapter 17\nFirst, a photo ˜le must have the ˜le extension \n.png\n or \n.jpg\n.', 'Also, photos \nare large images; a photo ˜le™s width and height must both be larger than \n500\n pixels.', 'This is a safe bet, since most digital camera photos are several \nthousand pixels in width and height.', 'As a hint, here™s a rough skeleton of what this program might look like:\n#!', ""python3# Import modules and write comments to describe this program.for foldername, subfolders, filenames in os.walk('C:\\\\'):    numPhotoFiles = 0    numNonPhotoFiles = 0    for filename in filenames:        # Check if file extension isn't .png or .jpg."", 'if TODO:            numNonPhotoFiles += 1            continue    # skip to next filename        # Open image file using Pillow.', '# Check if width & height are larger than 500.        if TODO:            # Image is large enough to be considered a photo.', 'numPhotoFiles += 1        else:            # Image is too small to be a photo.', 'numNonPhotoFiles += 1    # If more than half of files were photos,    # print the absolute path of the folder.', 'if TODO:        print(TODO)When the program runs, it should print the absolute path of any photo \nfolders to the screen.', 'Custom Seating Cards\nChapter 13 included a practice project to create custom invitations from \na list of guests in a plaintext ˜le.', 'As an additional project, use the \n pillow module to create images for custom seating cards for your guests.', 'For \neach of the guests listed in the \nguests.txt\n ˜le from the resources at \nhttp://\nnostarch.com/automatestuff/\n, generate an image ˜le with the guest name and \nsome ˚owery decoration.', 'A public domain ˚ower image is available in the \nresources at \nhttp://nostarch.com/automatestuff/\n.To ensure that each seating card is the same size, add a black rectangle \non the edges of the invitation image so that when the image is printed out, \nthere will be a guideline for cutting.', 'The PNG ˜les that Pillow produces are \nset to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel \nimage.']","[array([ 0.06431493,  0.07472365,  0.13672064, ..., -0.00063823,
       -0.01190728,  0.07100931], dtype=float32), array([ 0.04919231,  0.10589863,  0.17439698, ..., -0.01807923,
       -0.01424596,  0.1708832 ], dtype=float32), array([ 0.03134285,  0.13994716,  0.10458682, ...,  0.06309756,
       -0.03814263,  0.01076107], dtype=float32), array([ 0.07025885, -0.07810354,  0.07427086, ..., -0.03926745,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.10038307,  0.05489067,  0.08221222, ...,  0.00547489,
       -0.0161816 ,  0.06513822], dtype=float32), array([ 0.03190372,  0.10793203,  0.17926428, ...,  0.06401385,
       -0.00772988,  0.07980725], dtype=float32), array([ 0.0428622 ,  0.10350282,  0.17385212, ...,  0.08631015,
       -0.03814263,  0.18071286], dtype=float32), array([ 0.06839821,  0.1490474 ,  0.1313635 , ...,  0.05056475,
       -0.00956214,  0.04912522], dtype=float32), array([ 0.01748219,  0.05110446,  0.05769224, ...,  0.00754203,
        0.03886375, -0.00375294], dtype=float32), array([0.05410789, 0.10346806, 0.07110669, ..., 0.05874321, 0.04942713,
       0.02936727], dtype=float32), array([ 0.0795623 ,  0.1613074 ,  0.11413529, ..., -0.00412017,
        0.00263271, -0.00199845], dtype=float32), array([ 0.05512173,  0.28224882,  0.10825451, ...,  0.06364432,
       -0.00427722,  0.05690479], dtype=float32), array([ 0.05155294,  0.1040457 ,  0.05265638, ...,  0.03801778,
       -0.01966181,  0.0069375 ], dtype=float32), array([ 0.08668395,  0.11782444,  0.07733955, ...,  0.04684611,
       -0.02056096,  0.04767893], dtype=float32), array([ 0.03652222,  0.18587695,  0.1017595 , ...,  0.01768744,
       -0.03092445,  0.00832239], dtype=float32), array([ 0.0766842 ,  0.05648223,  0.04913316, ...,  0.08015788,
       -0.03339547,  0.05370966], dtype=float32), array([ 0.0884609 ,  0.09367552,  0.13224152, ...,  0.0396965 ,
       -0.00664936,  0.04567108], dtype=float32), array([ 0.08815295,  0.20815228,  0.04659249, ...,  0.2278997 ,
       -0.03814263,  0.04382882], dtype=float32), array([ 0.05647859,  0.18485475,  0.0872967 , ..., -0.02970623,
       -0.03814263, -0.00539271], dtype=float32), array([ 0.07426149,  0.24892826,  0.08237553, ...,  0.04701482,
       -0.0114199 ,  0.04223397], dtype=float32), array([ 0.0815654 ,  0.23499411, -0.00230788, ..., -0.02798165,
       -0.03814263, -0.00137427], dtype=float32), array([ 0.07555893,  0.18631947,  0.10038888, ...,  0.06006905,
       -0.03814263,  0.04156219], dtype=float32), array([ 0.09431896,  0.06950986,  0.18247549, ..., -0.01468437,
       -0.03814263,  0.01623263], dtype=float32), array([ 0.12310537,  0.15819417,  0.07630527, ...,  0.05431917,
       -0.01930591,  0.08596666], dtype=float32), array([ 0.08410262,  0.1613636 ,  0.06608897, ...,  0.15973775,
       -0.02996947,  0.01497513], dtype=float32), array([ 0.07497041,  0.30376154,  0.0399021 , ...,  0.05813181,
       -0.02396614,  0.11575406], dtype=float32), array([ 0.07601127,  0.189189  ,  0.07926533, ...,  0.01898011,
       -0.03814263,  0.06221076], dtype=float32), array([ 0.13192421,  0.16202052,  0.06221355, ...,  0.07390723,
       -0.02139065,  0.0726465 ], dtype=float32), array([ 0.06291844,  0.14614467,  0.07045542, ...,  0.05943317,
       -0.02541971,  0.00281954], dtype=float32), array([ 0.09908262,  0.19546968,  0.09959548, ...,  0.07306383,
       -0.03814263, -0.01029061], dtype=float32), array([ 0.09908262,  0.18108791,  0.05521824, ...,  0.1018354 ,
       -0.03814263,  0.01126568], dtype=float32), array([ 0.09108844,  0.09005644,  0.11586274, ...,  0.05389998,
       -0.03814263,  0.02155964], dtype=float32), array([ 0.09132136,  0.05355069,  0.19315279, ...,  0.01418866,
       -0.03814263,  0.01205983], dtype=float32), array([ 0.07584792,  0.09565926,  0.05043862, ...,  0.07396578,
       -0.03814263,  0.08955199], dtype=float32), array([0.05604194, 0.2505204 , 0.12394767, ..., 0.05191016, 0.03132453,
       0.11792186], dtype=float32), array([ 0.08328244,  0.16949087,  0.07205911, ..., -0.03676178,
        0.02532842,  0.05890804], dtype=float32), array([0.08251766, 0.23041785, 0.06506254, ..., 0.01244497, 0.01881933,
       0.07830486], dtype=float32), array([0.05864831, 0.27385154, 0.06457938, ..., 0.00694726, 0.0142929 ,
       0.00520571], dtype=float32), array([ 0.09008251,  0.1694472 ,  0.04357214, ...,  0.06230665,
       -0.00557761, -0.02892259], dtype=float32), array([ 0.0469289 ,  0.15258512,  0.10880781, ..., -0.00311054,
       -0.03814263,  0.03585216], dtype=float32), array([ 0.06972891,  0.06344406,  0.12414273, ...,  0.04784884,
       -0.00577933,  0.03239757], dtype=float32), array([ 0.08484852,  0.11077435,  0.05747169, ...,  0.03774838,
       -0.0189133 ,  0.03788872], dtype=float32), array([ 0.04597238,  0.09253366,  0.02181988, ..., -0.01880834,
        0.000175  ,  0.04085216], dtype=float32), array([ 0.0987749 ,  0.22696021,  0.13155022, ...,  0.21145338,
       -0.03814263,  0.07955025], dtype=float32), array([ 0.11282833,  0.18747492,  0.1698302 , ...,  0.18917498,
       -0.03814263,  0.10340482], dtype=float32), array([ 0.14325023,  0.11657669,  0.13664456, ..., -0.00443025,
       -0.03814263,  0.00242573], dtype=float32), array([ 0.10914269,  0.10751404,  0.15834388, ...,  0.00731974,
       -0.03330582,  0.06314512], dtype=float32), array([ 0.05539125,  0.06336156,  0.03508229, ...,  0.04825284,
       -0.03814263,  0.05771172], dtype=float32), array([ 0.08592106,  0.12174107,  0.14306319, ...,  0.01189961,
       -0.03814263, -0.00048587], dtype=float32), array([ 0.0762489 ,  0.08972747,  0.055613  , ...,  0.0550131 ,
       -0.03814263, -0.02239605], dtype=float32), array([ 0.09268093,  0.08560064,  0.0783288 , ...,  0.07938202,
       -0.0276427 ,  0.07191494], dtype=float32), array([ 0.10484756,  0.19048157,  0.15853176, ...,  0.0422199 ,
       -0.0284193 ,  0.04555564], dtype=float32), array([ 0.06532189,  0.12963194,  0.11500832, ...,  0.01100447,
       -0.01500341,  0.10252608], dtype=float32), array([ 0.08484852,  0.1339228 ,  0.11774598, ...,  0.07299631,
       -0.02273563, -0.01071598], dtype=float32), array([ 0.12196464,  0.17711058,  0.12711327, ...,  0.04408975,
       -0.0075088 ,  0.07370084], dtype=float32), array([ 0.03468516,  0.1643938 ,  0.02923469, ...,  0.08504628,
       -0.03814263, -0.00667095], dtype=float32), array([ 0.06254705,  0.13793936,  0.10868441, ..., -0.0014915 ,
       -0.01154051,  0.06892794], dtype=float32), array([ 0.1138211 ,  0.09639519,  0.10973511, ..., -0.00190814,
       -0.03814263,  0.0275734 ], dtype=float32), array([ 0.053032  ,  0.11074784,  0.09696858, ...,  0.03051257,
       -0.03205256,  0.10812411], dtype=float32), array([ 0.06921297,  0.10593355,  0.13726062, ...,  0.07854313,
       -0.02406617,  0.02984594], dtype=float32), array([ 0.16400862,  0.13829261,  0.10736371, ..., -0.00385956,
       -0.02397317,  0.07548179], dtype=float32), array([ 0.09908262,  0.16447695,  0.10241293, ...,  0.03321312,
       -0.01690692,  0.03341848], dtype=float32), array([ 0.03017557,  0.15713537,  0.11954287, ...,  0.02369552,
       -0.03814263,  0.05558089], dtype=float32), array([ 0.05919995,  0.11622321,  0.09347131, ...,  0.02439196,
       -0.01830894,  0.11239936], dtype=float32), array([0.08492061, 0.14534067, 0.1596853 , ..., 0.02915582, 0.0098824 ,
       0.05401831], dtype=float32), array([ 0.06565915,  0.07196098,  0.06938813, ..., -0.01203438,
       -0.01709725,  0.03730565], dtype=float32), array([ 0.04315702,  0.04594978,  0.10787593, ...,  0.04835742,
       -0.03332894,  0.07196068], dtype=float32), array([ 0.03294341,  0.15110986,  0.15582006, ...,  0.07239477,
       -0.01532549,  0.03666712], dtype=float32), array([ 0.15458897,  0.15147555,  0.13180758, ...,  0.1150566 ,
       -0.03382928,  0.07235524], dtype=float32), array([0.09785706, 0.06781045, 0.14420474, ..., 0.05685432, 0.0392192 ,
       0.03723843], dtype=float32), array([ 0.00407089,  0.04318504,  0.18532565, ...,  0.06408114,
       -0.03814263,  0.03431991], dtype=float32), array([ 0.02999814,  0.09007732,  0.14169167, ...,  0.00650641,
       -0.03814263,  0.01217429], dtype=float32), array([ 0.02856491,  0.09871047,  0.11916202, ...,  0.01401717,
       -0.02066692,  0.0783575 ], dtype=float32), array([ 0.07696597,  0.05040507,  0.13137537, ...,  0.02818248,
       -0.02639731,  0.0813982 ], dtype=float32), array([ 0.06629205,  0.10216536,  0.04359767, ...,  0.14283869,
       -0.03814263,  0.02500696], dtype=float32), array([ 0.10163038,  0.11402921,  0.11492375, ...,  0.16274576,
       -0.03814263, -0.02100274], dtype=float32), array([ 0.0820093 ,  0.13661276,  0.06736468, ..., -0.01575326,
       -0.03814263,  0.08192919], dtype=float32), array([ 0.03717984,  0.14028804,  0.08433895, ..., -0.01739916,
       -0.02203202,  0.06319594], dtype=float32), array([ 0.04133011,  0.04021337,  0.02348235, ..., -0.00078594,
       -0.03438281, -0.00024225], dtype=float32), array([ 0.05964039,  0.10480724,  0.13325876, ...,  0.03592529,
       -0.02996356, -0.01512743], dtype=float32), array([ 0.04544538,  0.1572944 ,  0.10156279, ...,  0.01588498,
       -0.02942418,  0.02342934], dtype=float32), array([ 0.09908262,  0.1357489 ,  0.05521824, ..., -0.02593606,
       -0.01160208,  0.04085216], dtype=float32), array([ 0.03255493,  0.12876712,  0.06845186, ...,  0.06596559,
       -0.03814263,  0.02868678], dtype=float32), array([ 0.12154306,  0.2033798 ,  0.11413283, ...,  0.07607315,
       -0.03814263,  0.08925153], dtype=float32), array([ 0.09384128,  0.05830499,  0.11598927, ..., -0.0172186 ,
       -0.03814263, -0.00220324], dtype=float32), array([ 0.02689293,  0.14510855,  0.06917116, ...,  0.05472209,
       -0.02830765,  0.05434654], dtype=float32), array([ 0.10901388,  0.1604867 ,  0.13969009, ...,  0.10254557,
       -0.03558253,  0.06095471], dtype=float32), array([ 0.07063144,  0.15672386,  0.20497473, ...,  0.0333605 ,
       -0.02996932,  0.11042392], dtype=float32), array([ 0.06728207,  0.12997417,  0.11232853, ...,  0.04312448,
       -0.01229055,  0.09644004], dtype=float32), array([ 0.09518945,  0.10605255,  0.19963583, ...,  0.03025993,
       -0.03644376,  0.07692333], dtype=float32), array([ 0.12266903,  0.14528875,  0.21364893, ...,  0.07520053,
       -0.01086655,  0.0737415 ], dtype=float32), array([ 0.09125844,  0.09060758,  0.1349284 , ...,  0.00209236,
       -0.03814263,  0.00621413], dtype=float32), array([ 0.06471973,  0.14853401,  0.23777397, ...,  0.05840423,
       -0.0311471 ,  0.02999379], dtype=float32), array([ 0.07507648,  0.13563634,  0.08668978, ...,  0.01369246,
       -0.03191522,  0.0931455 ], dtype=float32), array([ 0.08251766,  0.1198255 ,  0.13434851, ...,  0.05846797,
       -0.01145691, -0.02892259], dtype=float32), array([0.11941897, 0.1375211 , 0.09735018, ..., 0.16794951, 0.00441317,
       0.06569751], dtype=float32), array([ 0.05759674,  0.16067146,  0.15380898, ...,  0.02495824,
       -0.03049271,  0.03353409], dtype=float32), array([0.03225759, 0.07841156, 0.19383271, ..., 0.04851587, 0.00350747,
       0.05558089], dtype=float32), array([ 0.12009132,  0.13552384,  0.17115943, ...,  0.01222819,
       -0.02045619,  0.0890739 ], dtype=float32), array([ 0.12021046,  0.16263837,  0.13484308, ...,  0.07035965,
       -0.02663636,  0.09721249], dtype=float32), array([ 0.08407063,  0.15360038,  0.13138266, ...,  0.01101957,
       -0.03814263,  0.06145175], dtype=float32), array([ 0.13411011,  0.05148633,  0.18207139, ...,  0.02516072,
       -0.00422684,  0.07275313], dtype=float32), array([ 0.11272831,  0.14886023,  0.20925687, ...,  0.13447265,
       -0.00679452,  0.0911947 ], dtype=float32), array([ 0.0886748 ,  0.11898074,  0.13820948, ...,  0.03046061,
       -0.03431615,  0.09789579], dtype=float32), array([ 0.12209295,  0.06761865,  0.17731825, ...,  0.02968191,
       -0.01811283,  0.02343927], dtype=float32), array([ 0.0344221 ,  0.08293164,  0.01921652, ..., -0.03926745,
       -0.01775976,  0.05095374], dtype=float32), array([ 0.0740501 ,  0.13278848,  0.17269763, ...,  0.01166298,
       -0.03814263,  0.01547249], dtype=float32), array([ 0.08484852,  0.12184973,  0.20840648, ...,  0.13252255,
       -0.00774061,  0.05438839], dtype=float32), array([ 0.07619177,  0.14730285,  0.17102869, ...,  0.03953595,
       -0.01812584,  0.05841321], dtype=float32), array([0.06917181, 0.121247  , 0.16241816, ..., 0.02417245, 0.01957346,
       0.04547926], dtype=float32), array([0.12611476, 0.09428305, 0.13693468, ..., 0.01625642, 0.04810876,
       0.02558648], dtype=float32), array([ 0.09908262,  0.06609358,  0.07902504, ...,  0.0189566 ,
       -0.03814263, -0.01245891], dtype=float32), array([ 0.13374858,  0.1841396 ,  0.10796802, ...,  0.04349609,
       -0.02506283,  0.0853021 ], dtype=float32), array([ 0.05289273,  0.11165794,  0.03082561, ..., -0.00171907,
       -0.01781811,  0.02216664], dtype=float32), array([0.09508916, 0.03013258, 0.20402734, ..., 0.02516072, 0.0217618 ,
       0.05724372], dtype=float32), array([ 0.0603642 ,  0.09901319,  0.05873497, ...,  0.0401301 ,
       -0.03814263,  0.07555892], dtype=float32), array([ 0.106552  ,  0.11546758,  0.0734043 , ...,  0.04203333,
       -0.03814263,  0.02190967], dtype=float32), array([ 0.09390419,  0.10877089,  0.19905445, ...,  0.09362932,
       -0.00435316,  0.09912835], dtype=float32), array([ 0.10177204,  0.04581835,  0.08093712, ...,  0.08422121,
       -0.03814263,  0.08002698], dtype=float32), array([0.0422437 , 0.07209808, 0.19102424, ..., 0.03461203, 0.00255332,
       0.05298198], dtype=float32), array([ 0.0469295 ,  0.17108525,  0.11133605, ...,  0.02842859,
       -0.0226238 ,  0.08718503], dtype=float32), array([ 0.03638206,  0.12132214,  0.1182116 , ...,  0.0505824 ,
       -0.03814263, -0.00734588], dtype=float32), array([0.12314076, 0.12643191, 0.18921812, ..., 0.16726926, 0.01268523,
       0.07410345], dtype=float32), array([ 0.03902647,  0.12817244,  0.11943574, ...,  0.05587655,
       -0.02958397,  0.07828651], dtype=float32), array([ 0.04902211,  0.13985303,  0.11855579, ...,  0.08246176,
       -0.03814263,  0.05424957], dtype=float32), array([ 0.05837161,  0.1159235 ,  0.11560156, ...,  0.04262975,
       -0.03814263,  0.07371103], dtype=float32), array([ 0.05539125,  0.0535978 ,  0.11854342, ...,  0.0485049 ,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.05067483,  0.0665971 ,  0.10211878, ...,  0.05840423,
       -0.00140269, -0.00261341], dtype=float32), array([ 0.01614291,  0.14429203,  0.17536551, ...,  0.05753361,
       -0.03814263,  0.03084389], dtype=float32), array([ 0.05683771,  0.14763595,  0.10954252, ...,  0.02164799,
       -0.01229055,  0.07456639], dtype=float32), array([ 0.06308489,  0.04586183,  0.12293842, ...,  0.00492019,
       -0.03376217, -0.0054076 ], dtype=float32), array([ 0.08606111,  0.12199628,  0.17324308, ...,  0.09722406,
       -0.01435869,  0.07540414], dtype=float32), array([ 0.05539125,  0.1459951 ,  0.04237986, ..., -0.03062997,
       -0.03814263,  0.07185187], dtype=float32), array([ 0.06387018,  0.2800764 ,  0.09353468, ..., -0.00223939,
       -0.01785183,  0.03688065], dtype=float32), array([ 0.09090106,  0.05025285,  0.1909369 , ..., -0.00453762,
       -0.00661741,  0.0632493 ], dtype=float32), array([ 0.07645395,  0.13374321,  0.16346067, ..., -0.0054778 ,
       -0.00901813,  0.04409929], dtype=float32), array([ 0.07097481,  0.150297  ,  0.15004417, ...,  0.04172441,
       -0.03814263,  0.07989721], dtype=float32), array([ 0.08688521,  0.09837242,  0.16581434, ...,  0.0549456 ,
       -0.0219798 ,  0.07656853], dtype=float32), array([ 0.12266903,  0.11541417,  0.06828991, ...,  0.07372487,
       -0.03814263,  0.10602124], dtype=float32), array([ 0.07968815,  0.14016885,  0.17622335, ...,  0.08349247,
       -0.03814263,  0.03292621], dtype=float32), array([-0.0026457 ,  0.14734718,  0.03898041, ...,  0.07107062,
       -0.03814263, -0.00456351], dtype=float32), array([ 0.06568718,  0.15717657,  0.16995892, ...,  0.01446053,
       -0.02147086,  0.02677075], dtype=float32), array([ 0.08484852,  0.14296225,  0.17406972, ...,  0.09486773,
       -0.03814263,  0.10276736], dtype=float32), array([ 0.08810379,  0.09852195,  0.10595568, ...,  0.06016212,
       -0.03814263, -0.00426486], dtype=float32), array([ 0.07618097,  0.15250853,  0.12218679, ...,  0.01289228,
       -0.00404784, -0.0035625 ], dtype=float32), array([ 0.05055314,  0.08144927,  0.06404729, ...,  0.00386515,
       -0.00187516,  0.01317509], dtype=float32), array([ 0.07968815,  0.09611615,  0.1505501 , ...,  0.10767274,
       -0.01174487,  0.0861977 ], dtype=float32), array([ 0.11930001,  0.20814095,  0.11819282, ...,  0.11411989,
       -0.03814263,  0.08667768], dtype=float32), array([ 0.08222433,  0.18730518,  0.1256876 , ...,  0.13999663,
       -0.03692039,  0.03269031], dtype=float32), array([ 0.08413128,  0.21557659,  0.16499318, ...,  0.10311906,
       -0.00652752,  0.09942581], dtype=float32), array([0.05093275, 0.0641183 , 0.06017646, ..., 0.02369552, 0.02415831,
       0.05558089], dtype=float32), array([ 0.12266903,  0.12232031,  0.07503469, ...,  0.07240871,
       -0.01229055,  0.07567216], dtype=float32), array([ 0.06604335,  0.0835522 ,  0.09147093, ..., -0.03448897,
       -0.00547313,  0.08544903], dtype=float32), array([ 0.08663372,  0.08553983,  0.0935206 , ..., -0.03926745,
        0.01728244,  0.01232722], dtype=float32), array([ 0.06568718,  0.14838952,  0.16995892, ...,  0.01003419,
       -0.02037438,  0.02468636], dtype=float32), array([ 0.08484852,  0.14067313,  0.10717624, ...,  0.03677572,
       -0.00443937,  0.09766243], dtype=float32), array([ 0.04133108,  0.11461961,  0.08913898, ...,  0.05170362,
       -0.03286424,  0.07004566], dtype=float32), array([ 3.4576435e-05,  1.4969958e-01,  4.8481379e-02, ...,
        3.1990262e-03, -3.0767702e-02,  8.8042118e-02], dtype=float32), array([ 0.06803977,  0.14439298,  0.06094306, ...,  0.0483034 ,
       -0.01557093,  0.05268622], dtype=float32), array([ 0.13319767,  0.1261863 ,  0.11100655, ...,  0.07530246,
       -0.01218904,  0.07231174], dtype=float32), array([ 0.09409727,  0.09918369,  0.12665096, ...,  0.05397761,
       -0.03814263,  0.03985059], dtype=float32), array([ 0.09830193,  0.11508672,  0.11163127, ...,  0.08813065,
       -0.01654953,  0.06856177], dtype=float32), array([0.06922282, 0.21324559, 0.05655153, ..., 0.02680734, 0.02438913,
       0.08483645], dtype=float32), array([ 0.06738069,  0.20695615,  0.18171494, ...,  0.06804129,
       -0.01172918,  0.03768379], dtype=float32), array([ 0.01497781,  0.17238836,  0.05877979, ...,  0.02012765,
       -0.00932472,  0.06811247], dtype=float32), array([ 0.11442353,  0.20405318,  0.13713455, ...,  0.07981509,
       -0.01395241,  0.07036401], dtype=float32), array([ 0.09908262,  0.1336963 ,  0.07783571, ...,  0.02242696,
       -0.01643741,  0.01965758], dtype=float32), array([ 0.05425529,  0.10146609,  0.14103013, ...,  0.0604753 ,
       -0.03814263,  0.04655842], dtype=float32), array([ 0.07781169,  0.07224099,  0.09418714, ...,  0.02688501,
       -0.02306077,  0.10724844], dtype=float32), array([ 0.08484852,  0.14362624,  0.10047382, ...,  0.12401534,
       -0.01040853,  0.04817724], dtype=float32), array([ 0.04298909,  0.12364838,  0.06488124, ...,  0.02124198,
       -0.00931101,  0.04385852], dtype=float32), array([0.05397682, 0.1218297 , 0.16157588, ..., 0.09522134, 0.00207924,
       0.09651301], dtype=float32), array([ 0.00863267, -0.03231706,  0.07079056, ...,  0.00386515,
       -0.01564542, -0.02892259], dtype=float32), array([ 0.15207008,  0.18805444,  0.18980092, ...,  0.03476132,
       -0.00496622,  0.02350498], dtype=float32), array([ 0.04609222,  0.06923828,  0.12757653, ..., -0.00959294,
        0.01295492,  0.01748845], dtype=float32), array([ 0.09763924,  0.05746246,  0.05792426, ...,  0.05107833,
       -0.02825841,  0.03519984], dtype=float32), array([ 0.06251205,  0.10054954,  0.16081947, ...,  0.07371749,
       -0.03814263,  0.00915436], dtype=float32), array([ 0.03891615,  0.09373395,  0.1267109 , ...,  0.00547664,
       -0.00806283,  0.00054569], dtype=float32), array([ 0.12423974,  0.084867  ,  0.13463248, ...,  0.03092972,
       -0.03814263,  0.03523901], dtype=float32), array([ 0.04081186,  0.07045457,  0.14754367, ...,  0.03005495,
       -0.00602278,  0.05467357], dtype=float32), array([ 0.05539125,  0.1185494 ,  0.06569687, ..., -0.0126889 ,
       -0.02717856,  0.01821816], dtype=float32), array([ 0.08897324,  0.08358452,  0.03828241, ..., -0.01536987,
       -0.03814263,  0.04345903], dtype=float32), array([ 0.02397518,  0.08783503,  0.13492875, ...,  0.01956045,
       -0.03814263,  0.01226905], dtype=float32), array([ 0.04099862,  0.08105878,  0.15599033, ...,  0.03070894,
       -0.01221009, -0.00743562], dtype=float32), array([0.0476603 , 0.06832608, 0.14918222, ..., 0.01539699, 0.00155232,
       0.09900418], dtype=float32), array([0.0895773 , 0.08342616, 0.20173414, ..., 0.05565548, 0.02386798,
       0.12040439], dtype=float32), array([ 0.01726334,  0.08200432,  0.09109749, ...,  0.09244665,
       -0.00532681,  0.06985086], dtype=float32), array([0.05593292, 0.16491003, 0.13782966, ..., 0.01951506, 0.0140548 ,
       0.07569373], dtype=float32), array([ 0.10558488,  0.11066268,  0.1379118 , ...,  0.0687842 ,
       -0.00577509,  0.0545323 ], dtype=float32), array([0.08836538, 0.14637907, 0.14271678, ..., 0.06906216, 0.02298532,
       0.03930344], dtype=float32), array([ 0.126492  ,  0.08632582,  0.1535294 , ...,  0.09938528,
       -0.03814263,  0.0437573 ], dtype=float32), array([ 0.05037306,  0.130006  ,  0.06377068, ...,  0.08672179,
       -0.03814263, -0.021808  ], dtype=float32), array([ 0.08750732,  0.05459988,  0.07395696, ...,  0.06436399,
       -0.03814263,  0.05085603], dtype=float32), array([ 0.11112016,  0.08601151,  0.07362539, ...,  0.08788154,
        0.01315315, -0.01443818], dtype=float32), array([ 0.03705068,  0.0747446 ,  0.10962265, ...,  0.08143803,
       -0.03584339, -0.00300805], dtype=float32), array([ 0.07149883,  0.14068954,  0.09428232, ..., -0.03926745,
       -0.03814263,  0.02006691], dtype=float32), array([0.02888144, 0.07930851, 0.13207573, ..., 0.02286668, 0.01298954,
       0.04474702], dtype=float32), array([ 0.10213376,  0.15400352,  0.08169454, ...,  0.04951099,
       -0.02681514,  0.06505787], dtype=float32), array([ 0.06149058,  0.09777215,  0.14244075, ..., -0.0005809 ,
       -0.00232458,  0.02774355], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.02420845, 0.06133142,
       0.01927945], dtype=float32), array([ 0.10558488,  0.12753703,  0.13316141, ...,  0.06907871,
       -0.01698992,  0.04691799], dtype=float32), array([ 0.11386558,  0.06699391,  0.0811441 , ..., -0.0151084 ,
       -0.03785231, -0.00476625], dtype=float32), array([ 0.05477499,  0.09630794,  0.13325566, ...,  0.08282485,
       -0.03814263,  0.03319826], dtype=float32), array([ 0.0448198 ,  0.06367143,  0.0836594 , ..., -0.03735045,
       -0.03814263,  0.06795873], dtype=float32), array([ 0.08645787,  0.07626364,  0.06793384, ...,  0.03923167,
       -0.03814263,  0.01290722], dtype=float32), array([ 0.02968117,  0.06116974,  0.01308713, ...,  0.04174259,
       -0.03514061,  0.01348449], dtype=float32), array([ 0.03507475,  0.08063287,  0.12374018, ...,  0.00621569,
        0.01357782, -0.00172263], dtype=float32), array([ 0.03755124,  0.14294566,  0.13777377, ...,  0.08175949,
       -0.01381669,  0.03261644], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.04549165, 0.06356134,
       0.01927945], dtype=float32), array([ 0.10558488,  0.07531881,  0.13316141, ...,  0.06899203,
       -0.01507561,  0.02357434], dtype=float32), array([0.08576518, 0.09175964, 0.13286252, ..., 0.01686598, 0.00403882,
       0.04984888], dtype=float32), array([ 0.07564398,  0.08293092,  0.09937647, ...,  0.03170902,
       -0.03814263,  0.02904022], dtype=float32), array([ 0.05906034,  0.18836679,  0.11147571, ...,  0.11908688,
       -0.03814263,  0.02796097], dtype=float32), array([ 0.05275091,  0.05900305,  0.12291861, ...,  0.02106831,
       -0.03814263, -0.02597314], dtype=float32), array([ 0.05770893,  0.10826097,  0.15755324, ...,  0.09877717,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.04755114,  0.04293785,  0.16898394, ...,  0.10194157,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.05907818,  0.08778394,  0.10399102, ...,  0.02131721,
       -0.00375033,  0.02984594], dtype=float32), array([0.09251843, 0.11944682, 0.19563341, ..., 0.09492623, 0.0266855 ,
       0.09403542], dtype=float32), array([ 0.05681719,  0.11070909,  0.14975175, ..., -0.00154413,
       -0.03814263, -0.00265169], dtype=float32), array([ 0.10509405,  0.13962108,  0.169213  , ...,  0.07598452,
        0.02138352, -0.00464084], dtype=float32), array([0.07908751, 0.05217166, 0.17863894, ..., 0.08349832, 0.00458443,
       0.07001193], dtype=float32), array([ 0.11154329,  0.05710877,  0.18487258, ...,  0.09665303,
       -0.03015057,  0.0822835 ], dtype=float32), array([ 0.0823365 ,  0.12936299,  0.15787415, ...,  0.04216639,
       -0.01021465,  0.02825012], dtype=float32), array([0.08416519, 0.08741266, 0.08246397, ..., 0.02917957, 0.0536803 ,
       0.01927945], dtype=float32), array([ 0.10558488,  0.1201973 ,  0.13316141, ...,  0.06920481,
       -0.01899147,  0.04748207], dtype=float32), array([ 0.08682314,  0.16035514,  0.1100895 , ..., -0.00154413,
        0.02621263,  0.01877964], dtype=float32), array([ 0.07403149,  0.09029793,  0.08301459, ...,  0.11682858,
       -0.03814263,  0.02783682], dtype=float32), array([0.10085865, 0.05052872, 0.1337799 , ..., 0.0410377 , 0.01193772,
       0.07479349], dtype=float32), array([ 0.06883658,  0.13256311,  0.15614396, ...,  0.03050616,
       -0.03796535,  0.02588757], dtype=float32), array([ 8.3649792e-02,  1.4003788e-01,  1.7129116e-01, ...,
       -1.3513051e-02, -1.5475271e-04,  1.0177702e-01], dtype=float32), array([ 0.07026334,  0.10021541,  0.1792656 , ...,  0.09151173,
       -0.01143347, -0.00746236], dtype=float32), array([ 0.08484852,  0.14861953,  0.13358425, ..., -0.02230265,
       -0.03400671,  0.09014373], dtype=float32), array([ 0.04288212,  0.1628584 ,  0.09275819, ..., -0.01764143,
       -0.01918232,  0.06219047], dtype=float32), array([0.08735228, 0.15583171, 0.19333015, ..., 0.05846209, 0.00358031,
       0.03479525], dtype=float32), array([0.04276007, 0.08276037, 0.17760321, ..., 0.05306668, 0.09249227,
       0.02453583], dtype=float32), array([ 0.08416519,  0.04313573,  0.09093276, ...,  0.05306668,
        0.08328475, -0.02892259], dtype=float32), array([ 0.1050837 ,  0.06639223,  0.05494513, ...,  0.16259326,
       -0.03359268, -0.01302203], dtype=float32), array([ 0.08416519,  0.10077269,  0.10776243, ..., -0.00511506,
        0.03358733,  0.00067339], dtype=float32), array([ 0.07698821,  0.07803591,  0.12519787, ...,  0.06256687,
       -0.03814263,  0.08664464], dtype=float32), array([ 0.1321928 ,  0.12199464,  0.08273163, ...,  0.05742363,
       -0.0352064 ,  0.07566879], dtype=float32), array([ 0.0727778 ,  0.11961918,  0.11823579, ...,  0.03910372,
       -0.03120779,  0.05618702], dtype=float32), array([ 0.05171424,  0.15255061,  0.11985284, ..., -0.03926745,
        0.02933659,  0.06703546], dtype=float32), array([0.06617619, 0.10987964, 0.12570724, ..., 0.15175486, 0.01547175,
       0.07986686], dtype=float32), array([ 0.126351  ,  0.06151816,  0.10512231, ...,  0.07269067,
       -0.03814263,  0.04677429], dtype=float32), array([ 0.10897681,  0.09221081,  0.1879899 , ...,  0.07132967,
       -0.03814263,  0.1131511 ], dtype=float32), array([0.05499169, 0.04926322, 0.12104923, ..., 0.10288468, 0.01271343,
       0.06074053], dtype=float32), array([ 0.00175595,  0.07239655,  0.04122206, ...,  0.04429375,
       -0.03814263,  0.08230809], dtype=float32), array([ 0.0709524 ,  0.10243204,  0.07676063, ...,  0.05092203,
       -0.0249857 ,  0.05649034], dtype=float32), array([ 0.10758625,  0.12115274,  0.11326398, ...,  0.02855678,
       -0.02299648,  0.05549686], dtype=float32), array([ 0.05942245,  0.16220392,  0.06513431, ...,  0.00403842,
       -0.03814263,  0.00100973], dtype=float32), array([ 0.03462343,  0.06569002, -0.02357255, ..., -0.00891066,
       -0.03814263,  0.05719043], dtype=float32), array([ 0.02367993,  0.11731327,  0.07070098, ...,  0.03282117,
       -0.03814263,  0.07505313], dtype=float32), array([ 0.09139451,  0.1213074 ,  0.05202517, ...,  0.02046514,
       -0.0224293 ,  0.05549686], dtype=float32), array([ 0.06669892,  0.13002424,  0.09472754, ...,  0.07852342,
       -0.03814263,  0.05200857], dtype=float32), array([ 0.03085979,  0.16411139,  0.06656723, ..., -0.01190574,
       -0.0338017 ,  0.05825324], dtype=float32), array([ 0.04635181,  0.10974585,  0.09589692, ...,  0.00692286,
       -0.00765106,  0.0675621 ], dtype=float32), array([ 0.04339209,  0.05579249,  0.15450527, ...,  0.06967559,
       -0.01591625,  0.09143331], dtype=float32), array([ 0.09588628,  0.07439008,  0.09082685, ...,  0.04633462,
       -0.03814263,  0.08856498], dtype=float32), array([ 0.12232597,  0.07158332,  0.19603007, ...,  0.08739604,
       -0.0122683 ,  0.07326163], dtype=float32), array([ 0.02275919,  0.16411139,  0.12680823, ...,  0.06967559,
       -0.03814263,  0.06621873], dtype=float32), array([0.02369446, 0.15547168, 0.05551006, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.0260329 ,  0.03256358,  0.12072678, ...,  0.04663035,
       -0.01261347,  0.0841902 ], dtype=float32), array([ 0.01879253,  0.09798218,  0.09400927, ...,  0.03735862,
       -0.03814263,  0.09626605], dtype=float32), array([ 0.10328865,  0.08509537,  0.11506584, ...,  0.13104549,
       -0.03095129,  0.086454  ], dtype=float32), array([0.02275919, 0.16411139, 0.08834323, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.02624963,  0.03902737,  0.08861776, ...,  0.05177592,
       -0.01070801,  0.06792269], dtype=float32), array([ 0.05993937,  0.12343464,  0.10228015, ...,  0.05745545,
       -0.02224926,  0.05955847], dtype=float32), array([ 0.04551202,  0.176287  ,  0.14430583, ..., -0.03546636,
       -0.03029229, -0.00345806], dtype=float32), array([0.02275919, 0.16411139, 0.05573709, ..., 0.07479843, 0.00203028,
       0.06457806], dtype=float32), array([ 0.13070847,  0.15192609,  0.13666603, ...,  0.07619821,
       -0.01792219,  0.11983014], dtype=float32), array([ 0.09290419,  0.29323062,  0.1735278 , ...,  0.12908745,
       -0.02502481,  0.08008031], dtype=float32), array([ 0.06262758,  0.16934994,  0.16380714, ..., -0.02907247,
       -0.03814263, -0.0072329 ], dtype=float32), array([ 0.08484852,  0.16080168,  0.19612622, ...,  0.11275941,
       -0.02544033,  0.05149617], dtype=float32), array([ 0.06295563,  0.04761947,  0.16176738, ...,  0.10301219,
       -0.02559451,  0.10130759], dtype=float32), array([ 0.06540383,  0.19954015,  0.20175566, ...,  0.19391568,
       -0.02076216,  0.10526532], dtype=float32), array([ 0.03445043,  0.10518062,  0.0762269 , ...,  0.00779483,
       -0.01040095,  0.07078829], dtype=float32), array([ 0.02275919,  0.16411139,  0.06380051, ...,  0.03424048,
       -0.03018341,  0.06506533], dtype=float32), array([0.0416098 , 0.11082976, 0.12002824, ..., 0.03424048, 0.01652382,
       0.04823881], dtype=float32), array([ 0.08251766,  0.09600144,  0.09609004, ...,  0.03167634,
       -0.03814263, -0.01258131], dtype=float32), array([ 0.09196821,  0.10986441,  0.09943554, ...,  0.02369552,
       -0.02460027,  0.05558089], dtype=float32), array([0.0590032 , 0.11724192, 0.05512537, ..., 0.0118496 , 0.00709948,
       0.06796276], dtype=float32), array([ 0.07325102,  0.09853196,  0.13581274, ...,  0.01939702,
       -0.02669174,  0.10291215], dtype=float32), array([0.09908262, 0.0427498 , 0.14529076, ..., 0.05576538, 0.01908024,
       0.00908458], dtype=float32), array([-0.00823845,  0.16543354,  0.0926383 , ...,  0.19430181,
       -0.03814263,  0.06369505], dtype=float32), array([ 0.04700416,  0.1867569 ,  0.1533788 , ..., -0.01604737,
       -0.03164654,  0.06967777], dtype=float32), array([ 0.03834976,  0.07844851,  0.02640763, ...,  0.14640708,
       -0.02662517,  0.0495082 ], dtype=float32), array([ 0.11396881,  0.12684081,  0.07989192, ...,  0.16777962,
       -0.00323444,  0.06154715], dtype=float32), array([ 0.066962  ,  0.05806724,  0.14420737, ...,  0.044401  ,
       -0.03814263, -0.02581211], dtype=float32), array([0.0956309 , 0.11493645, 0.13144323, ..., 0.1011124 , 0.02415242,
       0.06114484], dtype=float32), array([ 0.06095172,  0.03615721,  0.07997877, ..., -0.02789195,
       -0.01160106, -0.02583642], dtype=float32), array([ 0.0589449 ,  0.10606927,  0.07807285, ..., -0.01849896,
       -0.03814263,  0.06512162], dtype=float32), array([ 0.0844486 ,  0.0841589 ,  0.06161225, ...,  0.03640024,
       -0.03814263,  0.07459302], dtype=float32), array([ 0.134728  ,  0.11687581,  0.12617205, ...,  0.08913621,
       -0.03216092,  0.0723759 ], dtype=float32), array([ 0.16400862,  0.15277007,  0.12280588, ...,  0.0150814 ,
       -0.00234766,  0.07265441], dtype=float32), array([ 0.10703056,  0.21124204,  0.06328084, ...,  0.04985657,
       -0.03814263,  0.0680062 ], dtype=float32), array([ 0.04762009,  0.2148328 ,  0.12129717, ...,  0.09092029,
       -0.0280107 ,  0.06125292], dtype=float32), array([ 0.06122737,  0.15811527,  0.07833301, ...,  0.00608845,
       -0.01241929,  0.04891423], dtype=float32), array([ 0.04544741,  0.10757673,  0.09371583, ...,  0.0254949 ,
       -0.03814263,  0.03512625], dtype=float32), array([0.11781666, 0.08178487, 0.09739185, ..., 0.01551077, 0.02116443,
       0.05504657], dtype=float32), array([ 0.07898492,  0.19872767,  0.07664378, ...,  0.08607066,
       -0.03814263,  0.08829124], dtype=float32), array([ 0.06262758,  0.17327708,  0.16380714, ..., -0.00763996,
       -0.03814263, -0.00437824], dtype=float32), array([ 0.0687221 ,  0.15380453,  0.06845457, ...,  0.09097259,
       -0.01556588,  0.00268409], dtype=float32), array([ 0.09737398,  0.0999466 ,  0.14459905, ..., -0.01693236,
       -0.03814263,  0.01309632], dtype=float32), array([ 0.05296021,  0.10155625,  0.11370152, ...,  0.02296354,
       -0.03663985,  0.02748565], dtype=float32), array([ 0.0550718 ,  0.14639288,  0.13693388, ...,  0.04519892,
       -0.01408176,  0.01908418], dtype=float32), array([0.06544938, 0.15666927, 0.17677858, ..., 0.00251395, 0.02656142,
       0.09256226], dtype=float32), array([ 0.0576892 ,  0.16017109,  0.10239063, ...,  0.02369552,
       -0.01513251,  0.05558089], dtype=float32), array([ 0.07149454,  0.07738895,  0.15472275, ...,  0.09967072,
       -0.00713429,  0.06205224], dtype=float32), array([ 0.05096561,  0.09975405,  0.13829494, ...,  0.0646703 ,
       -0.02517674,  0.06416072], dtype=float32), array([ 0.04118737,  0.12353454,  0.13936837, ...,  0.03409924,
       -0.00088844,  0.09719422], dtype=float32), array([0.04404324, 0.12720762, 0.04472166, ..., 0.12733658, 0.01497925,
       0.00194292], dtype=float32), array([ 0.04077566,  0.10007277,  0.10812829, ...,  0.02981298,
       -0.01748167,  0.06674401], dtype=float32), array([-0.01550015,  0.13553892, -0.03044511, ..., -0.03926745,
       -0.01199068,  0.08443667], dtype=float32), array([ 0.0711433 ,  0.05201079, -0.00176563, ..., -0.01201542,
       -0.03814263, -0.01678034], dtype=float32), array([ 0.02019117,  0.08796927, -0.03044511, ...,  0.01277419,
       -0.03814263,  0.02286086], dtype=float32), array([ 0.09262701,  0.12603025,  0.01500361, ...,  0.0041425 ,
       -0.01721946,  0.0652359 ], dtype=float32), array([ 0.01476154,  0.1353471 , -0.03044511, ...,  0.03261454,
       -0.03814263, -0.00274784], dtype=float32), array([ 0.05228613,  0.03384677,  0.00069748, ..., -0.00567655,
       -0.03814263,  0.00800889], dtype=float32), array([ 0.02378257,  0.1498467 , -0.03044511, ...,  0.0377831 ,
       -0.03814263, -0.00776624], dtype=float32), array([ 0.06511424,  0.18149021,  0.19843793, ...,  0.07084002,
       -0.03814263,  0.04690739], dtype=float32), array([ 0.09307673,  0.13291141,  0.12382974, ...,  0.02287332,
       -0.02336534,  0.04156443], dtype=float32), array([ 0.01654708,  0.13481121, -0.03044511, ...,  0.05909277,
       -0.03814263, -0.01365289], dtype=float32), array([ 0.02481831,  0.1392735 ,  0.10759261, ...,  0.04995108,
       -0.03549791,  0.08868442], dtype=float32), array([ 0.01279654,  0.12855001, -0.03044511, ...,  0.05229145,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.01591492,  0.15715592,  0.11737266, ..., -0.02002032,
       -0.02962212,  0.02767854], dtype=float32), array([ 0.02435273,  0.11231264, -0.03044511, ...,  0.05992391,
       -0.03814263, -0.02892259], dtype=float32), array([0.02376635, 0.03556767, 0.02646068, ..., 0.10632691, 0.03840991,
       0.02400864], dtype=float32), array([ 0.01860841,  0.10220166, -0.02707466, ...,  0.05086929,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.06252009,  0.09052779,  0.05622405, ...,  0.08277726,
       -0.03814263,  0.03610033], dtype=float32), array([ 0.03907557,  0.11429281,  0.00819061, ..., -0.03926745,
       -0.03814263, -0.00854429], dtype=float32), array([ 0.02979692,  0.12859468,  0.03009896, ..., -0.03926745,
       -0.01437241, -0.00642798], dtype=float32), array([-0.01988107,  0.07600649,  0.06797623, ...,  0.05777366,
        0.00432163,  0.04035112], dtype=float32), array([0.00699613, 0.13168575, 0.03224277, ..., 0.13432212, 0.00333977,
       0.06121249], dtype=float32), array([0.0574318 , 0.09437264, 0.07642394, ..., 0.03463751, 0.0022449 ,
       0.0418727 ], dtype=float32), array([ 0.08064809,  0.07947964,  0.12770635, ...,  0.13230087,
       -0.03814263, -0.02892259], dtype=float32), array([ 0.01680276,  0.07526043,  0.04323175, ..., -0.03926745,
       -0.03814263, -0.01049163], dtype=float32), array([ 0.07598264,  0.13567737,  0.09173384, ..., -0.02745138,
        0.0189583 , -0.01430729], dtype=float32), array([ 0.10726005,  0.13412085,  0.18488626, ..., -0.00683629,
       -0.03814263,  0.06642674], dtype=float32), array([ 0.06037651,  0.08202238,  0.16370231, ...,  0.07647158,
       -0.02899953, -0.01229508], dtype=float32), array([ 0.0475829 ,  0.10219084,  0.11584309, ...,  0.08701865,
       -0.01801323,  0.0470693 ], dtype=float32), array([ 0.08847661,  0.11759412,  0.09194948, ...,  0.08651745,
       -0.03645133,  0.04095907], dtype=float32), array([0.05017384, 0.07326708, 0.11727326, ..., 0.10945997, 0.00233977,
       0.04391011], dtype=float32), array([ 0.02688095,  0.13716653,  0.07401535, ...,  0.09344514,
       -0.03814263,  0.00644236], dtype=float32), array([ 0.03481552,  0.02988851,  0.05987809, ..., -0.00465294,
       -0.03452516,  0.00991839], dtype=float32), array([ 0.08484852,  0.14766107,  0.27925816, ...,  0.03168964,
       -0.01966913,  0.01738691], dtype=float32), array([ 0.02650172,  0.13412185,  0.09889919, ..., -0.01119425,
       -0.0295766 ,  0.02892657], dtype=float32), array([ 0.05603222,  0.08225174,  0.18120885, ...,  0.083465  ,
       -0.03814263, -0.00353423], dtype=float32), array([ 0.08251766,  0.05517632,  0.13356145, ...,  0.18673562,
       -0.03814263,  0.00029763], dtype=float32), array([ 0.03920261,  0.11786988,  0.1530823 , ..., -0.03926745,
       -0.01379242,  0.01927945], dtype=float32), array([0.09510153, 0.08081179, 0.10897003, ..., 0.03460962, 0.03959017,
       0.06485603], dtype=float32), array([ 0.07874823,  0.17884706,  0.10298396, ...,  0.05464249,
       -0.02257323,  0.06351391], dtype=float32), array([ 0.08179848,  0.17447859,  0.12401593, ...,  0.01387853,
       -0.03814263,  0.02328598], dtype=float32), array([ 0.09509943,  0.19236717,  0.11837321, ..., -0.031828  ,
       -0.03697804,  0.03233077], dtype=float32), array([ 0.090388  ,  0.16259365,  0.08466899, ...,  0.09872125,
       -0.03771278,  0.05611002], dtype=float32), array([ 0.02205419,  0.13974047,  0.09178976, ...,  0.02815794,
       -0.01414806,  0.01840639], dtype=float32), array([0.08692412, 0.15785149, 0.0825119 , ..., 0.08707576, 0.04993172,
       0.11586791], dtype=float32), array([0.02150635, 0.10912733, 0.11644456, ..., 0.08746654, 0.02481652,
       0.01750685], dtype=float32), array([ 0.09794389,  0.13877003,  0.12107924, ...,  0.0783311 ,
       -0.03814263,  0.03761261], dtype=float32), array([ 0.07914004,  0.08628422,  0.17773359, ...,  0.07728365,
       -0.02109174,  0.06041912], dtype=float32), array([ 0.07771505,  0.09564464,  0.108064  , ...,  0.01213985,
       -0.03814263,  0.08720908], dtype=float32)]","[[ 0.06177381  0.08238312 -0.00745485 ... -0.03926745 -0.03115077
   0.01568113]]","[0.715486615896225, 0.6125071346759796, 0.6702745258808136, 0.6092185080051422, 0.6767013967037201, 0.6683744788169861, 0.6807451248168945, 0.6427578926086426, 0.6209289133548737, 0.5924341082572937, 0.6630772352218628, 0.6410046815872192, 0.5028572082519531, 0.6457406878471375, 0.6607886552810669, 0.5990830361843109, 0.6607789099216461, 0.6524240672588348, 0.5240016877651215, 0.6812708377838135, 0.5054945945739746, 0.607247918844223, 0.7098197340965271, 0.6432876884937286, 0.6993057727813721, 0.627301037311554, 0.6536414623260498, 0.5693933367729187, 0.5810191929340363, 0.6427492797374725, 0.5844266414642334, 0.6522228121757507, 0.5684502720832825, 0.647261381149292, 0.7356314063072205, 0.6406113505363464, 0.6588159799575806, 0.6236107349395752, 0.6442073881626129, 0.5937567353248596, 0.6470317244529724, 0.6877918541431427, 0.6102644801139832, 0.6778519749641418, 0.6057640612125397, 0.6331309676170349, 0.6143697202205658, 0.5508348643779755, 0.6466616094112396, 0.56264728307724, 0.6018906235694885, 0.629474937915802, 0.6315024197101593, 0.6877757906913757, 0.6414298117160797, 0.6354769170284271, 0.5365862846374512, 0.6135535538196564, 0.6562752425670624, 0.6286342442035675, 0.5559378266334534, 0.5011929273605347, 0.4706151485443115, 0.6540903449058533, 0.627714216709137, 0.46456199884414673, 0.49253737926483154, 0.6297116875648499, 0.5938924849033356, 0.5902970433235168, 0.6246612071990967, 0.5996943712234497, 0.5925197005271912, 0.682012677192688, 0.6174276471138, 0.6037163734436035, 0.5470730364322662, 0.5253276824951172, 0.4791489839553833, 0.6696536839008331, 0.6434912085533142, 0.4145631790161133, 0.5760893523693085, 0.6197221279144287, 0.5860353112220764, 0.5402246713638306, 0.6627753376960754, 0.6123101115226746, 0.6002494990825653, 0.6303294599056244, 0.5829607248306274, 0.6548512279987335, 0.6486141383647919, 0.5820479393005371, 0.6086894869804382, 0.5458418428897858, 0.5967003703117371, 0.47519439458847046, 0.5677495002746582, 0.5949068665504456, 0.6728498637676239, 0.5520506203174591, 0.6141465604305267, 0.5040349662303925, 0.5900299549102783, 0.5194316506385803, 0.6929388642311096, 0.6424461007118225, 0.5405249297618866, 0.5538082122802734, 0.638089656829834, 0.6063351333141327, 0.6219422519207001, 0.6014147400856018, 0.6329596042633057, 0.5328530967235565, 0.5215693712234497, 0.6870476007461548, 0.6088956296443939, 0.5955525934696198, 0.6002460718154907, 0.6593981385231018, 0.5478554666042328, 0.5791743099689484, 0.5938397943973541, 0.5339377522468567, 0.7020001411437988, 0.5154438614845276, 0.6886009871959686, 0.5267476737499237, 0.7129099667072296, 0.6485281884670258, 0.5932217240333557, 0.6840197145938873, 0.5557607412338257, 0.6452592611312866, 0.6268148124217987, 0.5791095495223999, 0.5334542989730835, 0.6289205849170685, 0.6475273668766022, 0.6508177816867828, 0.656950980424881, 0.613979160785675, 0.6502736508846283, 0.5771463513374329, 0.6156243979930878, 0.5841663777828217, 0.6433427035808563, 0.6066042184829712, 0.37260347604751587, 0.5311523377895355, 0.6044490337371826, 0.5628860592842102, 0.651606410741806, 0.606209397315979, 0.6367744505405426, 0.5865799486637115, 0.6287121474742889, 0.5794889628887177, 0.5172393321990967, 0.5855528116226196, 0.536259263753891, 0.6397438645362854, 0.5045287013053894, 0.6538702845573425, 0.4643059968948364, 0.6842174530029297, 0.6307912468910217, 0.6994609236717224, 0.6393566131591797, 0.6882763803005219, 0.5425159931182861, 0.7033558785915375, 0.5840515196323395, 0.6557779908180237, 0.6100059747695923, 0.5724121630191803, 0.7330708205699921, 0.6220712959766388, 0.5185180008411407, 0.5953550338745117, 0.5791378021240234, 0.6820350289344788, 0.46491116285324097, 0.48468416929244995, 0.4634091854095459, 0.6111399531364441, 0.6958787441253662, 0.6516473889350891, 0.6490140855312347, 0.591754287481308, 0.4892199635505676, 0.609992653131485, 0.6251203715801239, 0.49415284395217896, 0.6099051237106323, 0.5719569027423859, 0.616264820098877, 0.47679245471954346, 0.6651075482368469, 0.5419832170009613, 0.6196135580539703, 0.4704350233078003, 0.591233104467392, 0.5597003698348999, 0.5946587920188904, 0.6286795139312744, 0.5063381195068359, 0.6796591579914093, 0.5383364856243134, 0.4975976347923279, 0.5399850010871887, 0.6034190058708191, 0.6388494074344635, 0.6900604069232941, 0.5269473195075989, 0.6499010920524597, 0.6172609031200409, 0.6846805512905121, 0.6492258012294769, 0.6839310526847839, 0.6227583885192871, 0.48578500747680664, 0.6824524700641632, 0.532583087682724, 0.48562508821487427, 0.6440577805042267, 0.6631541848182678, 0.5397790670394897, 0.7048486471176147, 0.6111711859703064, 0.5840947926044464, 0.60582435131073, 0.5192979872226715, 0.5929000377655029, 0.6215268075466156, 0.6485418975353241, 0.6578006744384766, 0.5824409425258636, 0.6612607836723328, 0.5562698543071747, 0.6694707870483398, 0.6596212387084961, 0.7426063120365143, 0.5819657742977142, 0.5318717360496521, 0.5837912261486053, 0.5638047754764557, 0.6324515044689178, 0.56247878074646, 0.5668141543865204, 0.5301288962364197, 0.6459235548973083, 0.6246357262134552, 0.5750257968902588, 0.6313109397888184, 0.6109997630119324, 0.6833721101284027, 0.6592466533184052, 0.6469204127788544, 0.610161155462265, 0.61226686835289, 0.6124187409877777, 0.6714266538619995, 0.609916627407074, 0.5781463980674744, 0.6148875057697296, 0.6603383719921112, 0.6306689977645874, 0.6848070621490479, 0.6468552052974701, 0.6837592124938965, 0.6187374591827393, 0.637065052986145, 0.5571916699409485, 0.6048482358455658, 0.593335896730423, 0.6067571938037872, 0.6436311602592468, 0.5788371562957764, 0.6087896823883057, 0.5676009058952332, 0.47590774297714233, 0.5407203435897827, 0.5049782693386078, 0.5504904687404633, 0.6938580572605133, 0.6230400502681732, 0.559999018907547, 0.5106052160263062, 0.6601722240447998, 0.605758935213089, 0.6105327010154724, 0.50004643201828, 0.573479413986206, 0.5716624557971954, 0.5164145529270172, 0.5462551712989807, 0.6303254067897797, 0.6466393768787384, 0.6682367026805878, 0.6232773959636688, 0.6645153760910034, 0.6463908553123474, 0.5425736308097839, 0.4447537660598755, 0.6470920443534851, 0.7062364220619202, 0.6452720463275909, 0.612749844789505, 0.6756738424301147, 0.46508193016052246, 0.4916645288467407, 0.6839986145496368, 0.5621683299541473, 0.6955821812152863, 0.5788433253765106, 0.6952126324176788, 0.6351378262042999, 0.5311174988746643, 0.6754314303398132, 0.5687292516231537, 0.6851375102996826, 0.5514399409294128, 0.6880500912666321, 0.5459743440151215, 0.6803276538848877, 0.5774438679218292, 0.4245569705963135, 0.43693917989730835, 0.5657021701335907, 0.673271894454956, 0.6134717166423798, 0.616767942905426, 0.5304397940635681, 0.6082938313484192, 0.6725257933139801, 0.6382134258747101, 0.583039790391922, 0.6855910420417786, 0.6880996823310852, 0.5570465326309204, 0.4748150110244751, 0.6737593710422516, 0.5775650441646576, 0.6543631553649902, 0.725843995809555, 0.5835116803646088, 0.5977774858474731, 0.5484139323234558, 0.6017818450927734, 0.5483941733837128, 0.6214949190616608, 0.5854174792766571, 0.6989515423774719, 0.7270005941390991, 0.6458269357681274, 0.7014269530773163, 0.6603124141693115]",150
